# Jenkins システム時間取得スクリプト作成手順書

**作成日**: 2025年10月24日  
**対象者**: 新人エンジニア  
**所要時間**: 約30分

---

## 📋 目次

1. [事前準備](#事前準備)
2. [手順A: SSH接続してnanoで作成する方法](#手順a-ssh接続してnanoで作成する方法)
3. [手順B: Jenkinsで自動生成する方法（推奨）](#手順b-jenkinsで自動生成する方法推奨)
4. [トラブルシューティング](#トラブルシューティング)

---

## 事前準備

### 必要な情報

- [ ] Jenkinsサーバーのアドレス（例: `http://jenkins.example.com:8080`）
- [ ] Jenkinsのログインユーザー名とパスワード
- [ ] SSH接続用のユーザー名とパスワード（手順Aの場合）

### 必要なツール

- [ ] Webブラウザ（Chrome、Firefox、Edge等）
- [ ] SSH接続ツール（手順Aの場合）
  - Windows: Git Bash、PowerShell、Tera Term
  - Mac/Linux: ターミナル

---

## 手順A: SSH接続してnanoで作成する方法

### A-1. Jenkinsサーバーにログイン

#### Windowsの場合

```bash
# Git Bashを起動
# 以下のコマンドを実行
ssh ユーザー名@jenkinsサーバーのIPアドレス

# 例
ssh jenkins@192.168.1.100
```

#### Mac/Linuxの場合

```bash
# ターミナルを起動
# 以下のコマンドを実行
ssh ユーザー名@jenkinsサーバーのIPアドレス
```

**確認事項:**
- [ ] パスワードを入力してログイン成功
- [ ] プロンプトが表示された（例: `jenkins@server:~$`）

---

### A-2. 作業ディレクトリの準備

```bash
# Jenkinsワークスペースに移動
cd /var/lib/jenkins/workspace

# ※Windowsの場合
# cd C:/ProgramData/Jenkins/.jenkins/workspace

# フォルダ一覧を確認
ls -la

# ジョブ用のフォルダを作成
mkdir -p SystemTimeCheck
cd SystemTimeCheck

# scriptsフォルダを作成
mkdir -p scripts
cd scripts

# 現在の場所を確認
pwd
```

**確認事項:**
- [ ] `/var/lib/jenkins/workspace/SystemTimeCheck/scripts` に移動完了
- [ ] `pwd` コマンドで正しいパスが表示された

---

### A-3. nanoエディタでスクリプトを作成

```bash
# nanoを起動
nano get-system-time.sh
```

**nanoが開かない場合:**

```bash
# インストールされているか確認
which nano

# インストール（Ubuntu/Debian）
sudo apt-get update
sudo apt-get install nano

# インストール（CentOS/RHEL）
sudo yum install nano
```

---

### A-4. スクリプトの記述

nanoが開いたら、以下のスクリプトを**すべてコピー&ペースト**してください:

```bash
#!/bin/bash

# ==========================================
# Jenkinsシステム時間取得スクリプト
# ==========================================

set -e  # エラーで即座に終了

echo "=========================================="
echo "システム時間取得スクリプト"
echo "=========================================="
echo ""

# Jenkins環境変数を表示
echo "📋 Jenkins情報"
echo "  ビルド番号: ${BUILD_NUMBER:-ローカル実行}"
echo "  ジョブ名: ${JOB_NAME:-ローカル実行}"
echo "  ビルドID: ${BUILD_ID:-N/A}"
echo "  ワークスペース: ${WORKSPACE:-$(pwd)}"
echo ""

# システム時間を取得
echo "⏰ システム時間情報"
echo "----------------------------------------"
echo "  現在日時: $(date '+%Y年%m月%d日 %H時%M分%S秒')"
echo "  ISO形式: $(date '+%Y-%m-%d %H:%M:%S')"
echo "  ファイル名用: $(date '+%Y%m%d_%H%M%S')"
echo "  UNIXタイム: $(date +%s)"
echo "  曜日: $(date '+%A')"
echo "  タイムゾーン: $(date +%Z)"
echo ""

# システム情報
echo "💻 システム情報"
echo "----------------------------------------"
echo "  ホスト名: $(hostname)"
echo "  ユーザー: $(whoami)"
echo "  OS: $(uname -s)"
echo ""

# ログファイルを作成
WORKSPACE=${WORKSPACE:-$(pwd)}
LOG_DIR="$WORKSPACE/logs"
mkdir -p "$LOG_DIR"

TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
LOG_FILE="$LOG_DIR/system_time_${TIMESTAMP}.log"

# ログに記録
cat > "$LOG_FILE" <<EOF
========================================
システム時間ログ
========================================
実行日時: $(date '+%Y-%m-%d %H:%M:%S')
ビルド番号: ${BUILD_NUMBER:-N/A}
ジョブ名: ${JOB_NAME:-N/A}
ホスト: $(hostname)
ユーザー: $(whoami)
----------------------------------------
UNIXタイムスタンプ: $(date +%s)
タイムゾーン: $(date +%Z)
========================================
EOF

echo "✅ ログファイル作成"
echo "  場所: $LOG_FILE"
echo ""

# ログ内容を表示
echo "📄 ログ内容:"
cat "$LOG_FILE"

echo ""
echo "🎉 スクリプト実行完了！"

exit 0
```

---

### A-5. nanoで保存と終了

1. **`Ctrl + O`** を押す（ファイルを保存）
2. **`Enter`** を押す（ファイル名を確定）
3. **`Ctrl + X`** を押す（nanoを終了）

**画面下の表示例:**
```
^O 書込む    ← Ctrl + O を押す
File Name to Write: get-system-time.sh
                    ← Enter を押す
[ Wrote 78 lines ]  ← 保存完了の表示

^X 終了      ← Ctrl + X を押す
```

**確認事項:**
- [ ] 「Wrote XX lines」というメッセージが表示された
- [ ] ターミナルのプロンプトに戻った

---

### A-6. 実行権限の付与

```bash
# 実行権限を付与
chmod +x get-system-time.sh

# 権限を確認
ls -la get-system-time.sh
```

**正常な表示例:**
```
-rwxr-xr-x 1 jenkins jenkins 2048 Oct 24 14:30 get-system-time.sh
```

**確認事項:**
- [ ] `-rwxr-xr-x` のように `x` が表示されている
- [ ] エラーメッセージが出ていない

---

### A-7. ローカルでテスト実行

```bash
# スクリプトを実行
./get-system-time.sh
```

**期待される出力:**
```
==========================================
システム時間取得スクリプト
==========================================

📋 Jenkins情報
  ビルド番号: ローカル実行
  ジョブ名: ローカル実行
  ...
🎉 スクリプト実行完了！
```

**確認事項:**
- [ ] エラーメッセージが出ていない
- [ ] システム時間が表示された
- [ ] ログファイルが作成された

---

### A-8. Jenkinsジョブの作成

#### 8-1. Jenkinsにログイン

1. ブラウザを開く
2. Jenkinsのアドレスにアクセス（例: `http://jenkins.example.com:8080`）
3. ユーザー名とパスワードを入力してログイン

**確認事項:**
- [ ] Jenkinsダッシュボードが表示された

#### 8-2. 新規ジョブ作成

1. 左メニューの **「新規ジョブ作成」** をクリック
2. 以下を入力:
   - **ジョブ名**: `SystemTimeCheck`
3. **「フリースタイル・プロジェクトのビルド」** を選択
4. **「OK」** をクリック

**確認事項:**
- [ ] ジョブ設定画面が表示された

#### 8-3. ビルド手順の設定

1. 下にスクロールして **「ビルド」** セクションを探す
2. **「ビルド手順の追加」** をクリック
3. **「シェルの実行」** を選択
4. 以下のコードを入力:

```bash
#!/bin/bash

# スクリプトの場所
SCRIPT_PATH="${WORKSPACE}/scripts/get-system-time.sh"

echo "=========================================="
echo "Jenkins ビルド開始"
echo "=========================================="
echo ""

# スクリプトの存在確認
if [ ! -f "$SCRIPT_PATH" ]; then
    echo "❌ エラー: スクリプトが見つかりません"
    echo "パス: $SCRIPT_PATH"
    exit 1
fi

# 実行権限を確認・付与
chmod +x "$SCRIPT_PATH"

# スクリプトを実行
echo "▶️  スクリプト実行"
echo ""
"$SCRIPT_PATH"

# 実行結果を確認
if [ $? -eq 0 ]; then
    echo ""
    echo "✅ ビルド成功"
else
    echo ""
    echo "❌ ビルド失敗"
    exit 1
fi
```

**確認事項:**
- [ ] コードが正しく入力された
- [ ] コピー＆ペーストした場合、改行が正しく保持されている

#### 8-4. ビルド後の処理（オプション）

1. 下にスクロールして **「ビルド後の処理」** セクションを探す
2. **「ビルド後の処理の追加」** をクリック
3. **「成果物の保管」** を選択
4. **「保管する成果物」** に以下を入力:

```
logs/*.log
```

**確認事項:**
- [ ] 設定が追加された

#### 8-5. 設定の保存

1. 画面左下の **「保存」** ボタンをクリック

**確認事項:**
- [ ] ジョブのトップページに戻った

---

### A-9. ビルドの実行と確認

#### 9-1. ビルドの実行

1. 左メニューの **「ビルド実行」** をクリック
2. 左下の **「ビルド履歴」** に新しいビルド（例: `#1`）が表示される

**確認事項:**
- [ ] ビルドが開始された
- [ ] ビルド履歴に番号が表示された

#### 9-2. コンソール出力の確認

1. **「ビルド履歴」** の番号（例: `#1`）をクリック
2. 左メニューの **「コンソール出力」** をクリック

**期待される出力:**
```
Started by user admin
Running as SYSTEM
Building in workspace /var/lib/jenkins/workspace/SystemTimeCheck
==========================================
Jenkins ビルド開始
==========================================

▶️  スクリプト実行

==========================================
システム時間取得スクリプト
==========================================
...
🎉 スクリプト実行完了！

✅ ビルド成功
Finished: SUCCESS
```

**確認事項:**
- [ ] 「Finished: SUCCESS」と表示された
- [ ] エラーメッセージがない
- [ ] システム時間が正しく表示された

#### 9-3. ログファイルの確認（オプション）

1. ビルドページに戻る
2. **「ビルド成果物」** セクションを確認
3. `logs/system_time_YYYYMMDD_HHMMSS.log` をクリックしてダウンロード

**確認事項:**
- [ ] ログファイルがダウンロードできた
- [ ] ログの内容が正しい

---

## 手順B: Jenkinsで自動生成する方法（推奨）

**この方法のメリット:**
- SSH接続不要
- nanoの操作不要
- Jenkinsの管理画面だけで完結

### B-1. Jenkinsにログイン

1. ブラウザを開く
2. Jenkinsのアドレスにアクセス
3. ログイン

**確認事項:**
- [ ] Jenkinsダッシュボードが表示された

---

### B-2. 新規ジョブ作成

1. **「新規ジョブ作成」** をクリック
2. ジョブ名: `SystemTime-AutoGenerate`
3. **「フリースタイル・プロジェクトのビルド」** を選択
4. **「OK」**

**確認事項:**
- [ ] ジョブ設定画面が開いた

---

### B-3. ビルド手順の設定

1. **「ビルド」** セクションまでスクロール
2. **「ビルド手順の追加」** → **「シェルの実行」**
3. 以下のコードを**すべてコピー&ペースト**:

```bash
#!/bin/bash

set -e

echo "=========================================="
echo "スクリプト自動生成 & 実行"
echo "=========================================="
echo ""

# scriptsディレクトリを作成
mkdir -p scripts

# スクリプトを生成
cat > scripts/get-system-time.sh <<'SCRIPT_EOF'
#!/bin/bash

set -e

echo "=========================================="
echo "システム時間取得スクリプト"
echo "=========================================="
echo ""

echo "📋 Jenkins情報"
echo "  ビルド番号: ${BUILD_NUMBER:-N/A}"
echo "  ジョブ名: ${JOB_NAME:-N/A}"
echo "  ワークスペース: ${WORKSPACE:-$(pwd)}"
echo ""

echo "⏰ システム時間"
echo "  現在日時: $(date '+%Y年%m月%d日 %H時%M分%S秒')"
echo "  ISO形式: $(date '+%Y-%m-%d %H:%M:%S')"
echo "  ファイル名用: $(date '+%Y%m%d_%H%M%S')"
echo "  UNIXタイム: $(date +%s)"
echo "  曜日: $(date '+%A')"
echo ""

echo "💻 システム情報"
echo "  ホスト名: $(hostname)"
echo "  ユーザー: $(whoami)"
echo "  OS: $(uname -s)"
echo ""

# ログ作成
LOG_DIR="${WORKSPACE:-$(pwd)}/logs"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/log_$(date '+%Y%m%d_%H%M%S').log"

cat > "$LOG_FILE" <<EOF
========================================
ビルドログ
========================================
実行日時: $(date '+%Y-%m-%d %H:%M:%S')
ビルド番号: ${BUILD_NUMBER:-N/A}
ジョブ名: ${JOB_NAME:-N/A}
ホスト: $(hostname)
ユーザー: $(whoami)
========================================
EOF

echo "✅ ログ作成: $LOG_FILE"
echo ""
echo "📄 ログ内容:"
cat "$LOG_FILE"
echo ""
echo "🎉 スクリプト実行完了"

SCRIPT_EOF

# 実行権限を付与
chmod +x scripts/get-system-time.sh

echo "✅ スクリプト生成完了"
echo ""

# スクリプトを実行
echo "▶️  スクリプト実行"
echo "=========================================="
./scripts/get-system-time.sh

echo ""
echo "=========================================="
echo "✅ すべて完了"
echo "=========================================="
```

**確認事項:**
- [ ] コードが正しく貼り付けられた
- [ ] スクロールして全体を確認した

---

### B-4. ビルド後の処理（オプション）

1. **「ビルド後の処理の追加」** → **「成果物の保管」**
2. **「保管する成果物」**: `logs/*.log`

**確認事項:**
- [ ] 設定が追加された

---

### B-5. 保存

**「保存」** ボタンをクリック

**確認事項:**
- [ ] ジョブのページに戻った

---

### B-6. ビルド実行

1. **「ビルド実行」** をクリック
2. **「コンソール出力」** で結果を確認

**期待される出力:**
```
==========================================
スクリプト自動生成 & 実行
==========================================

✅ スクリプト生成完了

▶️  スクリプト実行
==========================================
システム時間取得スクリプト
==========================================
...
🎉 スクリプト実行完了

==========================================
✅ すべて完了
==========================================
Finished: SUCCESS
```

**確認事項:**
- [ ] 「Finished: SUCCESS」と表示された
- [ ] エラーがない
- [ ] システム時間が表示された

---

## トラブルシューティング

### 問題1: `nano: command not found`

**原因:** nanoがインストールされていない

**解決方法:**

```bash
# Ubuntu/Debianの場合
sudo apt-get update
sudo apt-get install nano

# CentOS/RHELの場合
sudo yum install nano

# または vi を使う
vi get-system-time.sh
```

---

### 問題2: `Permission denied` エラー

**原因:** スクリプトに実行権限がない

**解決方法:**

```bash
# 実行権限を付与
chmod +x get-system-time.sh

# 権限を確認
ls -la get-system-time.sh
```

---

### 問題3: スクリプトが見つからない

**原因:** パスが間違っている

**解決方法:**

```bash
# 現在の場所を確認
pwd

# ファイル一覧を確認
ls -la

# ワークスペース全体を確認
ls -laR ${WORKSPACE}

# 絶対パスで指定
/var/lib/jenkins/workspace/SystemTimeCheck/scripts/get-system-time.sh
```

---

### 問題4: ビルドが失敗する

**原因:** スクリプトにエラーがある

**解決方法:**

1. **コンソール出力** を確認
2. エラーメッセージを読む
3. スクリプトを再確認:

```bash
# スクリプトの内容を確認
cat scripts/get-system-time.sh

# 構文チェック
bash -n scripts/get-system-time.sh
```

---

### 問題5: nanoの操作がわからない

**基本操作:**

| 操作 | キー |
|------|------|
| 保存 | `Ctrl + O` → `Enter` |
| 終了 | `Ctrl + X` |
| 切り取り | `Ctrl + K` |
| 貼り付け | `Ctrl + U` |
| 検索 | `Ctrl + W` |
| ヘルプ | `Ctrl + G` |

---

## チェックリスト

### 手順A完了チェック

- [ ] SSH接続成功
- [ ] scriptsフォルダ作成完了
- [ ] nanoでスクリプト作成完了
- [ ] 実行権限付与完了
- [ ] ローカルテスト実行成功
- [ ] Jenkinsジョブ作成完了
- [ ] ビルド実行成功
- [ ] コンソール出力に「SUCCESS」表示

### 手順B完了チェック

- [ ] Jenkinsにログイン成功
- [ ] 新規ジョブ作成完了
- [ ] ビルド手順設定完了
- [ ] ビルド実行成功
- [ ] コンソール出力に「SUCCESS」表示

---

## 付録: よく使うコマンド

### SSH接続

```bash
# 接続
ssh ユーザー名@サーバーアドレス

# 切断
exit
```

### ファイル・ディレクトリ操作

```bash
# 現在のディレクトリ表示
pwd

# ファイル一覧
ls -la

# ディレクトリ移動
cd /path/to/directory

# ディレクトリ作成
mkdir -p directory-name

# ファイル内容表示
cat filename

# 実行権限付与
chmod +x script.sh
```

### Git操作（応用）

```bash
# クローン
git clone https://github.com/user/repo.git

# 状態確認
git status

# 追加
git add .

# コミット
git commit -m "メッセージ"

# プッシュ
git push origin main
```

---

## サポート

質問がある場合は、以下を確認してください:

1. コンソール出力のエラーメッセージ
2. スクリプトのパス
3. 実行権限の有無

---

**手順書 終わり**
