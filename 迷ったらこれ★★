# 🚀 Git/GitBash/Windows 完全ガイド【図解付き】https://docs.google.com/spreadsheets/d/1W04QKtuzNy-Gd0gQYdJ1h1VcyLJE06qGP_vKmEvbagE/edit?usp=sharing

## 📚 目次

1. [GitBash基本操作](#gitbash基本操作)
   - 階層移動(フォルダ移動)
   - フォルダ作成
   - ファイル作成
   - ファイル・フォルダ操作
2. [Git初期設定](#git初期設定)
3. [GitHub連携](#github連携)
4. [日常のGit作業](#日常のgit作業)
5. [記号の読み方](#記号の読み方)
6. [チートシート](#チートシート)

---

## 🖥️ GitBash基本操作 {#gitbash基本操作}

### 🌟 まず知っておくべき重要なこと

```bash
# ❌ これは入力しない!
$  ← プロンプト(目印)

# ✅ これだけ入力する!
git status  ← コマンド本体
```

**重要:** `$` 記号は**入力しません!** これは「ここに入力してね」という目印です。

---

## 📂 階層移動(フォルダ移動)

### 現在地を確認する

```bash
$ pwd
```

**📖 読み方:** `pwd` = ピー・ダブリュー・ディー (Print Working Directory)

**💻 実行結果:**

```bash
$ pwd
/c/Users/YourName
```

**📊 意味:**
- `/c/` = Cドライブ
- `/Users/YourName` = ユーザーフォルダ
- 現在、`C:\Users\YourName` にいる

---

### 📁 Windows パスとGitBash パスの対応表

| Windows表記 | GitBash表記 | 意味 |
|------------|------------|------|
| `C:\` | `/c/` | Cドライブ |
| `D:\` | `/d/` | Dドライブ |
| `C:\Users` | `/c/Users` | ユーザーフォルダ |
| `C:\projects\myapp` | `/c/projects/myapp` | プロジェクトフォルダ |
| `C:\Program Files` | `/c/Program Files` | プログラムファイル |

**⚠️ 注意:**
- Windows: バックスラッシュ `\`
- GitBash: スラッシュ `/`

---

### フォルダを移動する

#### パターン1: 絶対パスで移動

```bash
$ cd /c/projects
```

**📖 読み方:** `cd` = シー・ディー (Change Directory)

**💻 実行結果:**

```bash
$ cd /c/projects

$ pwd
/c/projects
```

**✅ 成功の証拠:** エラーが出ない、`pwd`で確認できる

---

#### パターン2: 相対パスで移動

```bash
# 現在地
$ pwd
/c/Users/YourName

# Desktopフォルダに移動
$ cd Desktop

$ pwd
/c/Users/YourName/Desktop
```

**📊 図解:**

```
現在地: /c/Users/YourName
         ↓ cd Desktop
移動先:  /c/Users/YourName/Desktop
```

---

#### パターン3: 親フォルダ(一つ上)に移動

```bash
# 現在地
$ pwd
/c/Users/YourName/Desktop

# 一つ上に移動
$ cd ..

$ pwd
/c/Users/YourName
```

**📖 読み方:** `..` = ドット・ドット (親フォルダ)

**📊 図解:**

```
/c/Users/YourName/Desktop  ← 現在地
         ↑ cd ..
/c/Users/YourName          ← 移動先
```

---

#### パターン4: ホームディレクトリに移動

```bash
$ cd ~

$ pwd
/c/Users/YourName
```

**📖 読み方:** `~` = チルダ (ホームディレクトリ)

---

#### パターン5: 複数階層を一気に移動

```bash
# 2つ上に移動
$ cd ../..

# 3つ上に移動
$ cd ../../..

# 特定のフォルダに一気に移動
$ cd /c/projects/myapp/src/components
```

---

### 📋 移動のまとめ表

| コマンド | 意味 | 例 |
|---------|------|-----|
| `cd /c/projects` | 絶対パスで移動 | Cドライブのprojectsへ |
| `cd Desktop` | 相対パスで移動 | 現在地からDesktopへ |
| `cd ..` | 一つ上に移動 | 親フォルダへ |
| `cd ~` | ホームに移動 | C:\Users\YourName へ |
| `cd -` | 直前の場所に戻る | 行き来する |

---

## 📂 フォルダ・ファイルを見る

### フォルダの中身を確認

```bash
$ ls
```

**📖 読み方:** `ls` = エル・エス (List)

**💻 実行結果:**

```bash
$ ls
Desktop  Documents  Downloads  Pictures
```

---

### 詳細表示

```bash
$ ls -la
```

**📖 読み方:** `ls -la` = エル・エス・オプション・エル・エー

**💻 実行結果:**

```bash
$ ls -la
total 8
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121    0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Desktop
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Documents
-rw-r--r-- 1 User 197121  156 Oct  8 10:00 .bashrc
```

**📊 見方:**

```
drwxr-xr-x  ← フォルダ
-rw-r--r--  ← ファイル
.bashrc     ← .で始まる = 隠しファイル
```

**オプション解説:**
- `-l` = 詳細表示 (long format)
- `-a` = 隠しファイルも表示 (all)
- `-la` = 両方

---

### 📊 lsオプション一覧

| コマンド | 意味 | よく使う? |
|---------|------|----------|
| `ls` | 基本表示 | ⭐⭐⭐ |
| `ls -l` | 詳細表示 | ⭐⭐⭐ |
| `ls -a` | 隠しファイルも | ⭐⭐ |
| `ls -la` | 全て詳細表示 | ⭐⭐⭐ |
| `ls -lh` | サイズを読みやすく | ⭐⭐ |

---

## 🆕 フォルダを作成する

### 基本のフォルダ作成

```bash
$ mkdir myproject
```

**📖 読み方:** `mkdir` = エムケー・ディーアイアール (Make Directory)

**💻 実行結果:**

```bash
$ mkdir myproject

$ ls
myproject

$ cd myproject

$ pwd
/c/Users/YourName/myproject
```

**✅ 成功の証拠:** エラーが出ない、`ls`で確認できる

---

### 複数階層を一気に作成

```bash
$ mkdir -p myproject/src/components
```

**📖 読み方:** `-p` = ピー (parents、親フォルダも作成)

**📊 図解:**

```
Before:
/c/Users/YourName
  (何もない)

After:
/c/Users/YourName
  └── myproject
       └── src
            └── components
```

**💻 確認:**

```bash
$ ls -R myproject
myproject:
src

myproject/src:
components

myproject/src/components:
```

---

### 複数のフォルダを同時に作成

```bash
$ mkdir folder1 folder2 folder3
```

**💻 実行結果:**

```bash
$ mkdir folder1 folder2 folder3

$ ls
folder1  folder2  folder3
```

---

## 📝 ファイルを作成する

### 空ファイルを作成

```bash
$ touch app.py
```

**📖 読み方:** `touch` = タッチ

**💻 実行結果:**

```bash
$ touch app.py

$ ls
app.py

$ ls -l app.py
-rw-r--r-- 1 User 197121 0 Oct  8 10:00 app.py
                         ↑ サイズ0バイト = 空ファイル
```

---

### 複数ファイルを同時に作成

```bash
$ touch main.py utils.py config.py
```

**💻 実行結果:**

```bash
$ touch main.py utils.py config.py

$ ls
config.py  main.py  utils.py
```

---

### テキストファイルに内容を書き込む

#### パターン1: echoで一行書き込み

```bash
$ echo "print('Hello')" > test.py
```

**📖 読み方:** 
- `echo` = エコー (表示)
- `>` = リダイレクト (ファイルに書き込む)

**💻 実行結果:**

```bash
$ echo "print('Hello')" > test.py

$ cat test.py
print('Hello')
```

**📖 読み方:** `cat` = キャット (ファイル内容表示)

---

#### パターン2: 追記する

```bash
$ echo "print('World')" >> test.py
```

**📖 読み方:** `>>` = 追記リダイレクト

**💻 実行結果:**

```bash
$ cat test.py
print('Hello')
print('World')
```

**⚠️ 注意:**
- `>` = 上書き (元の内容が消える)
- `>>` = 追記 (元の内容に追加)

---

### 📊 リダイレクト記号まとめ

| 記号 | 意味 | 使い方 |
|------|------|--------|
| `>` | 上書き | `echo "text" > file.txt` |
| `>>` | 追記 | `echo "text" >> file.txt` |
| `<` | 入力 | `command < input.txt` |
| `\|` | パイプ | `ls \| grep "test"` |

---

## 🗑️ ファイル・フォルダを削除する

### ファイルを削除

```bash
$ rm test.py
```

**📖 読み方:** `rm` = アールエム (Remove)

**💻 実行結果:**

```bash
$ ls
test.py

$ rm test.py

$ ls
(何も表示されない)
```

**⚠️ 警告:** 削除したファイルは**ゴミ箱に入らない!** 完全に消える!

---

### 複数ファイルを削除

```bash
$ rm file1.txt file2.txt file3.txt
```

---

### フォルダを削除

```bash
$ rm -r myfolder
```

**📖 読み方:** `-r` = アール (recursive、再帰的に全て削除)

**⚠️ 警告:** フォルダの中身も**全て消える!**

---

### 確認しながら削除

```bash
$ rm -i test.py
rm: remove regular file 'test.py'? y
```

**📖 読み方:** `-i` = アイ (interactive、対話的)

**操作方法:**
- `y` = Yes (削除する)
- `n` = No (削除しない)

---

### 🚨 安全な削除のベストプラクティス

```bash
# ❌ 危険! いきなり削除
$ rm -rf *

# ✅ 安全! まず確認
$ ls
file1.txt  file2.txt

# ✅ 安全! 削除前にバックアップ
$ cp important.txt important.txt.backup

# ✅ 安全! 確認しながら削除
$ rm -i important.txt
```

---

## 📋 ファイル・フォルダ操作まとめ

### コピー

```bash
$ cp source.txt destination.txt
```

**📖 読み方:** `cp` = シー・ピー (Copy)

**💻 例:**

```bash
# ファイルをコピー
$ cp app.py app_backup.py

# フォルダをコピー
$ cp -r myfolder myfolder_backup
```

---

### 移動・リネーム

```bash
$ mv old.txt new.txt
```

**📖 読み方:** `mv` = エム・ブイ (Move)

**💻 例:**

```bash
# リネーム
$ mv old_name.py new_name.py

# 移動
$ mv file.txt /c/projects/

# 移動+リネーム
$ mv old.txt /c/projects/new.txt
```

---

## 📊 基本コマンド完全一覧表

| コマンド | 読み方 | 意味 | 例 |
|---------|-------|------|-----|
| `pwd` | ピー・ダブリュー・ディー | 現在地表示 | `pwd` |
| `cd` | シー・ディー | フォルダ移動 | `cd /c/projects` |
| `ls` | エル・エス | 一覧表示 | `ls -la` |
| `mkdir` | エムケー・ディーアイアール | フォルダ作成 | `mkdir test` |
| `touch` | タッチ | ファイル作成 | `touch app.py` |
| `rm` | アールエム | 削除 | `rm file.txt` |
| `cp` | シー・ピー | コピー | `cp a.txt b.txt` |
| `mv` | エム・ブイ | 移動/リネーム | `mv old.txt new.txt` |
| `cat` | キャット | ファイル表示 | `cat app.py` |
| `echo` | エコー | 文字列表示 | `echo "test"` |
| `clear` | クリア | 画面クリア | `clear` |

---

## 🔧 Git初期設定 {#git初期設定}

### ステップ1: Gitがインストールされているか確認

```bash
$ git --version
```

**💻 実行結果:**

```bash
$ git --version
git version 2.42.0.windows.1
```

**✅ 成功:** バージョン番号が表示される  
**❌ 失敗:** `command not found` → Gitをインストール

**📥 Gitインストール方法:**
1. https://git-scm.com/download/win にアクセス
2. 64-bit版をダウンロード
3. インストーラーを実行(全てデフォルトでOK)
4. GitBashを再起動

---

### ステップ2: ユーザー名とメールアドレスを設定

```bash
$ git config --global user.name "Yamada Taro"
```

**📖 読み方:**
- `git config` = ギット・コンフィグ (設定)
- `--global` = グローバル (全体に適用)
- `user.name` = ユーザー名

**💻 コピペ用:**

```bash
# 名前を設定(GitHubのユーザー名でもOK)
git config --global user.name "Yamada Taro"

# メールアドレスを設定(GitHubで使っているメール)
git config --global user.email "yamada@example.com"

# 確認
git config --list
```

**✅ 成功時の表示:**

```bash
$ git config --list
user.name=Yamada Taro
user.email=yamada@example.com
...
```

---

### ステップ3: デフォルトブランチ名を設定

```bash
$ git config --global init.defaultBranch main
```

**💡 理由:** 最近のGitHubはデフォルトが`main`になった

---

### ステップ4: 改行コード設定(Windows)

```bash
$ git config --global core.autocrlf true
```

**📖 読み方:**
- `core.autocrlf` = コア・オート・シーアールエルエフ (自動改行変換)
- `true` = 有効

**💡 理由:** WindowsとMac/Linuxで改行コードが違うため

---

## 🔑 GitHub連携 {#github連携}

### ステップ1: SSH鍵を作成

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
```

**📖 読み方:**
- `ssh-keygen` = エスエスエイチ・キージェン (SSH鍵生成)
- `-t ed25519` = タイプ・イーディー25519 (暗号化方式)
- `-C` = コメント (識別用メールアドレス)

**💻 実行中の表示:**

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (/c/Users/YourName/.ssh/id_ed25519):
```

**🎯 操作:**
1. 何も入力せず **Enterキー**
2. `Enter passphrase:` → **Enterキー** (パスワード不要なら)
3. `Enter same passphrase again:` → **Enterキー**

**✅ 成功時の表示:**

```bash
Your identification has been saved in /c/Users/YourName/.ssh/id_ed25519
Your public key has been saved in /c/Users/YourName/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yamada@example.com
```

**📊 作成されたファイル:**

```
/c/Users/YourName/.ssh/
  ├── id_ed25519     ← 秘密鍵(絶対に人に見せない!)
  └── id_ed25519.pub ← 公開鍵(GitHubに登録する)
```

---

### ステップ2: 公開鍵をコピー

```bash
$ cat ~/.ssh/id_ed25519.pub
```

**💻 実行結果:**

```bash
$ cat ~/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGx7h... yamada@example.com
```

**🎯 操作:**
1. 表示された**全文**をコピー
2. `ssh-ed25519` から `yamada@example.com` まで全て

---

### ステップ3: GitHubに公開鍵を登録

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上のアイコンをクリック → **Settings**
3. 左メニュー → **SSH and GPG keys**
4. **New SSH key** ボタンをクリック
5. 入力:
   - **Title:** `Windows PC` (わかりやすい名前)
   - **Key:** コピーした公開鍵を貼り付け
6. **Add SSH key** ボタンをクリック
7. パスワード確認 → 完了!

**📊 図解:**

```
[GitHub]
    ↑
    | SSH接続(暗号化)
    | 公開鍵で認証
    ↓
[あなたのPC]
  秘密鍵で証明
```

---

### ステップ4: 接続テスト

```bash
$ ssh -T git@github.com
```

**📖 読み方:** `ssh -T` = エスエスエイチ・テスト

**💻 初回実行時:**

```bash
$ ssh -T git@github.com
The authenticity of host 'github.com' can't be established.
ED25519 key fingerprint is SHA256:xxxxx...
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
```

**🎯 操作:** `yes` と入力して Enter

**✅ 成功時の表示:**

```bash
Hi YamadaTaro! You've successfully authenticated, but GitHub does not provide shell access.
```

**🎉 これで接続完了!**

---

## 📦 リポジトリ作成とGitHub連携 {#日常のgit作業}

### シナリオ: 新規プロジェクトを作成してGitHubにアップ

#### ステップ1: プロジェクトフォルダを作成

```bash
# projectsフォルダに移動
$ cd /c/projects

# プロジェクトフォルダを作成
$ mkdir myapp

# 移動
$ cd myapp

# 確認
$ pwd
/c/projects/myapp
```

---

#### ステップ2: Gitリポジトリを初期化

```bash
$ git init
```

**📖 読み方:** `git init` = ギット・イニット (初期化)

**💻 実行結果:**

```bash
$ git init
Initialized empty Git repository in /c/projects/myapp/.git/
```

**✅ 成功の証拠:**
- `Initialized empty Git repository` と表示
- `.git` フォルダが作成される

**確認:**

```bash
$ ls -la
total 0
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121 0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .git  ← これが作成された!
```

---

#### ステップ3: ファイルを作成

```bash
# メインファイルを作成
$ touch app.py

# READMEを作成
$ echo "# My App" > README.md

# 確認
$ ls
README.md  app.py
```

---

#### ステップ4: .gitignoreを作成

```bash
$ cat > .gitignore << EOF
__pycache__/
*.pyc
.env
venv/
EOF
```

**📖 意味:** 
- `.gitignore` = Gitで管理しないファイルを指定
- `__pycache__/` = Pythonのキャッシュ
- `*.pyc` = コンパイル済みPython
- `.env` = 環境変数(秘密情報)
- `venv/` = 仮想環境

**確認:**

```bash
$ cat .gitignore
__pycache__/
*.pyc
.env
venv/
```

---

#### ステップ5: ファイルをステージング

```bash
$ git add .
```

**📖 読み方:** 
- `git add` = ギット・アド (追加)
- `.` = ドット (全てのファイル)

**💻 実行結果:**

```bash
$ git add .
(何も表示されない = 成功)
```

**確認:**

```bash
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   README.md
        new file:   app.py
```

**✅ 成功の証拠:**
- `Changes to be committed` = コミット準備完了
- ファイル名が緑色

---

#### ステップ6: 初回コミット

```bash
$ git commit -m "Initial commit"
```

**📖 読み方:**
- `git commit` = ギット・コミット (記録)
- `-m` = メッセージ
- `"Initial commit"` = 初回コミットの定型文

**💻 実行結果:**

```bash
$ git commit -m "Initial commit"
[main (root-commit) a1b2c3d] Initial commit
 3 files changed, 5 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 README.md
 create mode 100644 app.py
```

**✅ 成功の証拠:**
- `[main a1b2c3d] Initial commit` = コミット成功
- `3 files changed` = 3ファイルが記録された

---

#### ステップ7: GitHubにリポジトリを作成

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上の **+** アイコン → **New repository**
3. 入力:
   - **Repository name:** `myapp`
   - **Description:** プロジェクトの説明(任意)
   - **Public** または **Private** を選択
   - ⚠️ **Initialize this repository with:** **全てチェックなし!**
4. **Create repository** ボタンをクリック

**📊 作成後の画面:**

```
…or push an existing repository from the command line

git remote add origin git@github.com:YourName/myapp.git
git branch -M main
git push -u origin main
```

**これをコピーして使います!**

---

#### ステップ8: リモートリポジトリを登録

```bash
$ git remote add origin git@github.com:YourName/myapp.git
```

**📖 読み方:**
- `git remote add` = ギット・リモート・アド (リモート追加)
- `origin` = オリジン (リモートの名前、慣例)
- `git@github.com:YourName/myapp.git` = GitHubのSSH URL

**💻 実行結果:**

```bash
$ git remote add origin git@github.com:YourName/myapp.git
(何も表示されない = 成功)
```

**確認:**

```bash
$ git remote -v
origin  git@github.com:YourName/myapp.git (fetch)
origin  git@github.com:YourName/myapp.git (push)
```

---

#### ステップ9: GitHubにプッシュ

```bash
$ git push -u origin main
```

**📖 読み方:**
- `git push` = ギット・プッシュ (送信)
- `-u` = ユー (upstream、上流を設定)
- `origin main` = originのmainブランチへ

**💻 実行結果:**

```bash
$ git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 456 bytes | 456.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:YourName/myapp.git
 * [new branch]      main -> main
Branch 'main' set up to track remote branch 'main' from 'origin'.
```

**✅ 成功の証拠:**
- `done.` が表示される
- `[new branch] main -> main` = 新しいブランチが作成された
- エラーメッセージが無い

---

## 🔄 日常のGit作業フロー

### 📊 全体の流れ図

```
1. コード編集
   ↓
2. git status (確認)
   ↓
3. git add . (ステージング)
   ↓
4. git commit -m "message" (コミット)
   ↓
5. git push (GitHubに送信)
```

---

### ステップバイステップ

#### 1. ファイルを編集

```bash
$ code app.py
# または
$ vim app.py
# または
$ notepad app.py
```

---

#### 2. 状態を確認

```bash
$ git status
```

**💻 実行結果:**

```bash
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        utils.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**📊 状態の読み方:**

```
modified:   app.py     ← 赤文字 = 変更済み(未add)
utils.py              ← 赤文字 = 新規ファイル(未追跡)
```

---

#### 3. ファイルをステージング

```bash
$ git add .
```

**または個別に追加:**

```bash
$ git add app.py
$ git add utils.py
```

**確認:**

```bash
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   app.py
        new file:   utils.py
```

**✅ 緑色になった = ステージング成功!**

---

#### 4. コミット

```bash
$ git commit -m "ユーティリティ関数を追加"
```

**💻 実行結果:**

```bash
$ git commit -m "ユーティリティ関数を追加"
[main b2c3d4e] ユーティリティ関数を追加
 2 files changed, 25 insertions(+), 5 deletions(-)
 create mode 100644 utils.py
```

**✅ 成功の証拠:**
- コミットハッシュが表示される `b2c3d4e`
- ファイル変更数が表示される

---

#### 5. GitHubにプッシュ

```bash
$ git push
```

**💡 注意:** 初回は `git push -u origin main` が必要だが、2回目以降は `git push` だけでOK

**💻 実行結果:**

```bash
$ git push
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 8 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 567 bytes | 567.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:YourName/myapp.git
   a1b2c3d..b2c3d4e  main -> main
```

**✅ 成功の証拠:**
- `done.` が表示される
- `a1b2c3d..b2c3d4e` = コミット範囲が更新
- エラーメッセージが無い

---

## 📥 既存リポジトリをクローン

### GitHubからプロジェクトをダウンロード

```bash
# 保存先に移動
$ cd /c/projects

# クローン
$ git clone git@github.com:YourName/myapp.git

# フォルダに移動
$ cd myapp
```

**💻 実行結果:**

```bash
$ git clone git@github.com:YourName/myapp.git
Cloning into 'myapp'...
remote: Enumerating objects: 10, done.
remote: Counting objects: 100% (10/10), done.
remote: Compressing objects: 100% (8/8), done.
Receiving objects: 100% (10/10), 1.23 MiB | 2.00 MiB/s, done.
Resolving deltas: 100% (3/3), done.
```

**✅ 成功の証拠:**
- `done.` が複数回表示
- `Resolving deltas: 100%` = 完了
- エラーメッセージが無い

**📊 図解:**

```
GitHub (リモート)
    ↓ git clone
あなたのPC (ローカル)
/c/projects/myapp/
  ├── app.py
  ├── utils.py
  └── README.md
```

---

## 🔀 ブランチ操作

### ブランチを作成して切り替え

```bash
$ git checkout -b feature/login
```

**📖 読み方:**
- `git checkout` = ギット・チェックアウト (切り替え)
- `-b` = ブランチ (新規作成)
- `feature/login` = ブランチ名

**💻 実行結果:**

```bash
$ git checkout -b feature/login
Switched to a new branch 'feature/login'
```

**確認:**

```bash
$ git branch
  main
* feature/login  ← *印 = 現在のブランチ
```

---

### ブランチ一覧を表示

```bash
# ローカルブランチ
$ git branch
  main
* feature/login

# リモートも含めて
$ git branch -a
  main
* feature/login
  remotes/origin/main
  remotes/origin/feature/login
```

---

### ブランチを切り替え

```bash
$ git checkout main
```

**💻 実行結果:**

```bash
$ git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
```

---

### ブランチをマージ

```bash
# mainに戻る
$ git checkout main

# feature/loginをマージ
$ git merge feature/login
```

**💻 実行結果:**

```bash
$ git merge feature/login
Updating a1b2c3d..c3d4e5f
Fast-forward
 login.py | 50 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 50 insertions(+)
 create mode 100644 login.py
```

**✅ 成功の証拠:**
- `Fast-forward` = 自動マージ成功
- ファイル変更数が表示

---

## 🎯 記号の読み方完全ガイド {#記号の読み方}

### 💲 $ (ドルマーク)

**❌ 入力しない!**

```bash
$ git status  ← $ は入力しない!
```

**📊 画面の見方:**

```bash
User@PC MINGW64 /c/projects/myapp (main)
$ git status
  ↑
  これが$記号の正体!
  "ここに入力してね"という目印
```

---

### 🐍 >>> (Python)

**❌ 入力しない!**

```bash
>>> print("Hello")  ← >>> は入力しない!
Hello
```

---

### 📝 # (シャープ)

**コメント(説明文) = 入力しなくてもOK**

```bash
$ git add .  # 全ファイルを追加
             ↑ この部分は説明なので入力不要
```

---

### 📊 記号一覧表

| 記号 | 名前 | 意味 | 入力する? |
|------|------|------|----------|
| `# 🚀 Git/GitBash/Windows 完全ガイド【図解付き】

## 📚 目次

1. [GitBash基本操作](#gitbash基本操作)
   - 階層移動(フォルダ移動)
   - フォルダ作成
   - ファイル作成
   - ファイル・フォルダ操作
2. [Git初期設定](#git初期設定)
3. [GitHub連携](#github連携)
4. [日常のGit作業](#日常のgit作業)
5. [記号の読み方](#記号の読み方)
6. [チートシート](#チートシート)

---

## 🖥️ GitBash基本操作 {#gitbash基本操作}

### 🌟 まず知っておくべき重要なこと

```bash
# ❌ これは入力しない!
$  ← プロンプト(目印)

# ✅ これだけ入力する!
git status  ← コマンド本体
```

**重要:** `$` 記号は**入力しません!** これは「ここに入力してね」という目印です。

---

## 📂 階層移動(フォルダ移動)

### 現在地を確認する

```bash
$ pwd
```

**📖 読み方:** `pwd` = ピー・ダブリュー・ディー (Print Working Directory)

**💻 実行結果:**

```bash
$ pwd
/c/Users/YourName
```

**📊 意味:**
- `/c/` = Cドライブ
- `/Users/YourName` = ユーザーフォルダ
- 現在、`C:\Users\YourName` にいる

---

### 📁 Windows パスとGitBash パスの対応表

| Windows表記 | GitBash表記 | 意味 |
|------------|------------|------|
| `C:\` | `/c/` | Cドライブ |
| `D:\` | `/d/` | Dドライブ |
| `C:\Users` | `/c/Users` | ユーザーフォルダ |
| `C:\projects\myapp` | `/c/projects/myapp` | プロジェクトフォルダ |
| `C:\Program Files` | `/c/Program Files` | プログラムファイル |

**⚠️ 注意:**
- Windows: バックスラッシュ `\`
- GitBash: スラッシュ `/`

---

### フォルダを移動する

#### パターン1: 絶対パスで移動

```bash
$ cd /c/projects
```

**📖 読み方:** `cd` = シー・ディー (Change Directory)

**💻 実行結果:**

```bash
$ cd /c/projects

$ pwd
/c/projects
```

**✅ 成功の証拠:** エラーが出ない、`pwd`で確認できる

---

#### パターン2: 相対パスで移動

```bash
# 現在地
$ pwd
/c/Users/YourName

# Desktopフォルダに移動
$ cd Desktop

$ pwd
/c/Users/YourName/Desktop
```

**📊 図解:**

```
現在地: /c/Users/YourName
         ↓ cd Desktop
移動先:  /c/Users/YourName/Desktop
```

---

#### パターン3: 親フォルダ(一つ上)に移動

```bash
# 現在地
$ pwd
/c/Users/YourName/Desktop

# 一つ上に移動
$ cd ..

$ pwd
/c/Users/YourName
```

**📖 読み方:** `..` = ドット・ドット (親フォルダ)

**📊 図解:**

```
/c/Users/YourName/Desktop  ← 現在地
         ↑ cd ..
/c/Users/YourName          ← 移動先
```

---

#### パターン4: ホームディレクトリに移動

```bash
$ cd ~

$ pwd
/c/Users/YourName
```

**📖 読み方:** `~` = チルダ (ホームディレクトリ)

---

#### パターン5: 複数階層を一気に移動

```bash
# 2つ上に移動
$ cd ../..

# 3つ上に移動
$ cd ../../..

# 特定のフォルダに一気に移動
$ cd /c/projects/myapp/src/components
```

---

### 📋 移動のまとめ表

| コマンド | 意味 | 例 |
|---------|------|-----|
| `cd /c/projects` | 絶対パスで移動 | Cドライブのprojectsへ |
| `cd Desktop` | 相対パスで移動 | 現在地からDesktopへ |
| `cd ..` | 一つ上に移動 | 親フォルダへ |
| `cd ~` | ホームに移動 | C:\Users\YourName へ |
| `cd -` | 直前の場所に戻る | 行き来する |

---

## 📂 フォルダ・ファイルを見る

### フォルダの中身を確認

```bash
$ ls
```

**📖 読み方:** `ls` = エル・エス (List)

**💻 実行結果:**

```bash
$ ls
Desktop  Documents  Downloads  Pictures
```

---

### 詳細表示

```bash
$ ls -la
```

**📖 読み方:** `ls -la` = エル・エス・オプション・エル・エー

**💻 実行結果:**

```bash
$ ls -la
total 8
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121    0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Desktop
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Documents
-rw-r--r-- 1 User 197121  156 Oct  8 10:00 .bashrc
```

**📊 見方:**

```
drwxr-xr-x  ← フォルダ
-rw-r--r--  ← ファイル
.bashrc     ← .で始まる = 隠しファイル
```

**オプション解説:**
- `-l` = 詳細表示 (long format)
- `-a` = 隠しファイルも表示 (all)
- `-la` = 両方

---

### 📊 lsオプション一覧

| コマンド | 意味 | よく使う? |
|---------|------|----------|
| `ls` | 基本表示 | ⭐⭐⭐ |
| `ls -l` | 詳細表示 | ⭐⭐⭐ |
| `ls -a` | 隠しファイルも | ⭐⭐ |
| `ls -la` | 全て詳細表示 | ⭐⭐⭐ |
| `ls -lh` | サイズを読みやすく | ⭐⭐ |

---

## 🆕 フォルダを作成する

### 基本のフォルダ作成

```bash
$ mkdir myproject
```

**📖 読み方:** `mkdir` = エムケー・ディーアイアール (Make Directory)

**💻 実行結果:**

```bash
$ mkdir myproject

$ ls
myproject

$ cd myproject

$ pwd
/c/Users/YourName/myproject
```

**✅ 成功の証拠:** エラーが出ない、`ls`で確認できる

---

### 複数階層を一気に作成

```bash
$ mkdir -p myproject/src/components
```

**📖 読み方:** `-p` = ピー (parents、親フォルダも作成)

**📊 図解:**

```
Before:
/c/Users/YourName
  (何もない)

After:
/c/Users/YourName
  └── myproject
       └── src
            └── components
```

**💻 確認:**

```bash
$ ls -R myproject
myproject:
src

myproject/src:
components

myproject/src/components:
```

---

### 複数のフォルダを同時に作成

```bash
$ mkdir folder1 folder2 folder3
```

**💻 実行結果:**

```bash
$ mkdir folder1 folder2 folder3

$ ls
folder1  folder2  folder3
```

---

## 📝 ファイルを作成する

### 空ファイルを作成

```bash
$ touch app.py
```

**📖 読み方:** `touch` = タッチ

**💻 実行結果:**

```bash
$ touch app.py

$ ls
app.py

$ ls -l app.py
-rw-r--r-- 1 User 197121 0 Oct  8 10:00 app.py
                         ↑ サイズ0バイト = 空ファイル
```

---

### 複数ファイルを同時に作成

```bash
$ touch main.py utils.py config.py
```

**💻 実行結果:**

```bash
$ touch main.py utils.py config.py

$ ls
config.py  main.py  utils.py
```

---

### テキストファイルに内容を書き込む

#### パターン1: echoで一行書き込み

```bash
$ echo "print('Hello')" > test.py
```

**📖 読み方:** 
- `echo` = エコー (表示)
- `>` = リダイレクト (ファイルに書き込む)

**💻 実行結果:**

```bash
$ echo "print('Hello')" > test.py

$ cat test.py
print('Hello')
```

**📖 読み方:** `cat` = キャット (ファイル内容表示)

---

#### パターン2: 追記する

```bash
$ echo "print('World')" >> test.py
```

**📖 読み方:** `>>` = 追記リダイレクト

**💻 実行結果:**

```bash
$ cat test.py
print('Hello')
print('World')
```

**⚠️ 注意:**
- `>` = 上書き (元の内容が消える)
- `>>` = 追記 (元の内容に追加)

---

### 📊 リダイレクト記号まとめ

| 記号 | 意味 | 使い方 |
|------|------|--------|
| `>` | 上書き | `echo "text" > file.txt` |
| `>>` | 追記 | `echo "text" >> file.txt` |
| `<` | 入力 | `command < input.txt` |
| `\|` | パイプ | `ls \| grep "test"` |

---

## 🗑️ ファイル・フォルダを削除する

### ファイルを削除

```bash
$ rm test.py
```

**📖 読み方:** `rm` = アールエム (Remove)

**💻 実行結果:**

```bash
$ ls
test.py

$ rm test.py

$ ls
(何も表示されない)
```

**⚠️ 警告:** 削除したファイルは**ゴミ箱に入らない!** 完全に消える!

---

### 複数ファイルを削除

```bash
$ rm file1.txt file2.txt file3.txt
```

---

### フォルダを削除

```bash
$ rm -r myfolder
```

**📖 読み方:** `-r` = アール (recursive、再帰的に全て削除)

**⚠️ 警告:** フォルダの中身も**全て消える!**

---

### 確認しながら削除

```bash
$ rm -i test.py
rm: remove regular file 'test.py'? y
```

**📖 読み方:** `-i` = アイ (interactive、対話的)

**操作方法:**
- `y` = Yes (削除する)
- `n` = No (削除しない)

---

### 🚨 安全な削除のベストプラクティス

```bash
# ❌ 危険! いきなり削除
$ rm -rf *

# ✅ 安全! まず確認
$ ls
file1.txt  file2.txt

# ✅ 安全! 削除前にバックアップ
$ cp important.txt important.txt.backup

# ✅ 安全! 確認しながら削除
$ rm -i important.txt
```

---

## 📋 ファイル・フォルダ操作まとめ

### コピー

```bash
$ cp source.txt destination.txt
```

**📖 読み方:** `cp` = シー・ピー (Copy)

**💻 例:**

```bash
# ファイルをコピー
$ cp app.py app_backup.py

# フォルダをコピー
$ cp -r myfolder myfolder_backup
```

---

### 移動・リネーム

```bash
$ mv old.txt new.txt
```

**📖 読み方:** `mv` = エム・ブイ (Move)

**💻 例:**

```bash
# リネーム
$ mv old_name.py new_name.py

# 移動
$ mv file.txt /c/projects/

# 移動+リネーム
$ mv old.txt /c/projects/new.txt
```

---

## 📊 基本コマンド完全一覧表

| コマンド | 読み方 | 意味 | 例 |
|---------|-------|------|-----|
| `pwd` | ピー・ダブリュー・ディー | 現在地表示 | `pwd` |
| `cd` | シー・ディー | フォルダ移動 | `cd /c/projects` |
| `ls` | エル・エス | 一覧表示 | `ls -la` |
| `mkdir` | エムケー・ディーアイアール | フォルダ作成 | `mkdir test` |
| `touch` | タッチ | ファイル作成 | `touch app.py` |
| `rm` | アールエム | 削除 | `rm file.txt` |
| `cp` | シー・ピー | コピー | `cp a.txt b.txt` |
| `mv` | エム・ブイ | 移動/リネーム | `mv old.txt new.txt` |
| `cat` | キャット | ファイル表示 | `cat app.py` |
| `echo` | エコー | 文字列表示 | `echo "test"` |
| `clear` | クリア | 画面クリア | `clear` |

---

## 🔧 Git初期設定 {#git初期設定}

### ステップ1: Gitがインストールされているか確認

```bash
$ git --version
```

**💻 実行結果:**

```bash
$ git --version
git version 2.42.0.windows.1
```

**✅ 成功:** バージョン番号が表示される  
**❌ 失敗:** `command not found` → Gitをインストール

**📥 Gitインストール方法:**
1. https://git-scm.com/download/win にアクセス
2. 64-bit版をダウンロード
3. インストーラーを実行(全てデフォルトでOK)
4. GitBashを再起動

---

### ステップ2: ユーザー名とメールアドレスを設定

```bash
$ git config --global user.name "Yamada Taro"
```

**📖 読み方:**
- `git config` = ギット・コンフィグ (設定)
- `--global` = グローバル (全体に適用)
- `user.name` = ユーザー名

**💻 コピペ用:**

```bash
# 名前を設定(GitHubのユーザー名でもOK)
git config --global user.name "Yamada Taro"

# メールアドレスを設定(GitHubで使っているメール)
git config --global user.email "yamada@example.com"

# 確認
git config --list
```

**✅ 成功時の表示:**

```bash
$ git config --list
user.name=Yamada Taro
user.email=yamada@example.com
...
```

---

### ステップ3: デフォルトブランチ名を設定

```bash
$ git config --global init.defaultBranch main
```

**💡 理由:** 最近のGitHubはデフォルトが`main`になった

---

### ステップ4: 改行コード設定(Windows)

```bash
$ git config --global core.autocrlf true
```

**📖 読み方:**
- `core.autocrlf` = コア・オート・シーアールエルエフ (自動改行変換)
- `true` = 有効

**💡 理由:** WindowsとMac/Linuxで改行コードが違うため

---

## 🔑 GitHub連携 {#github連携}

### ステップ1: SSH鍵を作成

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
```

**📖 読み方:**
- `ssh-keygen` = エスエスエイチ・キージェン (SSH鍵生成)
- `-t ed25519` = タイプ・イーディー25519 (暗号化方式)
- `-C` = コメント (識別用メールアドレス)

**💻 実行中の表示:**

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (/c/Users/YourName/.ssh/id_ed25519):
```

**🎯 操作:**
1. 何も入力せず **Enterキー**
2. `Enter passphrase:` → **Enterキー** (パスワード不要なら)
3. `Enter same passphrase again:` → **Enterキー**

**✅ 成功時の表示:**

```bash
Your identification has been saved in /c/Users/YourName/.ssh/id_ed25519
Your public key has been saved in /c/Users/YourName/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yamada@example.com
```

**📊 作成されたファイル:**

```
/c/Users/YourName/.ssh/
  ├── id_ed25519     ← 秘密鍵(絶対に人に見せない!)
  └── id_ed25519.pub ← 公開鍵(GitHubに登録する)
```

---

### ステップ2: 公開鍵をコピー

```bash
$ cat ~/.ssh/id_ed25519.pub
```

**💻 実行結果:**

```bash
$ cat ~/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGx7h... yamada@example.com
```

**🎯 操作:**
1. 表示された**全文**をコピー
2. `ssh-ed25519` から `yamada@example.com` まで全て

---

### ステップ3: GitHubに公開鍵を登録

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上のアイコンをクリック → **Settings**
3. 左メニュー → **SSH and GPG keys**
4. **New SSH key** ボタンをクリック
5. 入力:
   - **Title:** `Windows PC` (わかりやすい名前)
   - **Key:** コピーした公開鍵を貼り付け
6. **Add SSH key** ボタンをクリック
7. パスワード確認 → 完了!

**📊 図解:**

```
[GitHub]
    ↑
    | SSH接続(暗号化)
    | 公開鍵で認証
    ↓
[あなたのPC]
  秘密鍵で証明
```

---

### ステップ4: 接続テスト

```bash
$ ssh -T git@github.com
```

**📖 読み方:** `ssh -T` = エスエスエイチ・テスト

**💻 初回実行時:**

```bash
$ ssh -T git@github.com
The authenticity of host 'github.com' can't be established.
ED25519 key fingerprint is SHA256:xxxxx...
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
```

**🎯 操作:** `yes` と入力して Enter

**✅ 成功時の表示:**

```bash
Hi YamadaTaro! You've successfully authenticated, but GitHub does not provide shell access.
```

**🎉 これで接続完了!**

---

## 📦 リポジトリ作成とGitHub連携 {#日常のgit作業}

### シナリオ: 新規プロジェクトを作成してGitHubにアップ

#### ステップ1: プロジェクトフォルダを作成

```bash
# projectsフォルダに移動
$ cd /c/projects

# プロジェクトフォルダを作成
$ mkdir myapp

# 移動
$ cd myapp

# 確認
$ pwd
/c/projects/myapp
```

---

#### ステップ2: Gitリポジトリを初期化

```bash
$ git init
```

**📖 読み方:** `git init` = ギット・イニット (初期化)

**💻 実行結果:**

```bash
$ git init
Initialized empty Git repository in /c/projects/myapp/.git/
```

**✅ 成功の証拠:**
- `Initialized empty Git repository` と表示
- `.git` フォルダが作成される

**確認:**

```bash
$ ls -la
total 0
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121 0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .git  ← これが作成された!
```

---

#### ステップ3: ファイルを作成

```bash
# メインファイルを作成
$ touch app.py

# READMEを作成
$ echo "# My App" > README.md

# 確認
$ ls
README.md  app.py
```

---

#### ステップ4: .gitignoreを作成

```bash
$ cat > .gitignore << EOF
__pycache__/
*.pyc
.env
venv/
EOF
```

**📖 意味:** 
- `.gitignore` = Gitで管理しないファイルを指定
- `__pycache__/` = Pythonのキャッシュ
- `*.pyc` = コンパイル済みPython
- `.env` = 環境変数(秘密情報)
- `venv/` = 仮想環境

**確認:**

```bash
$ cat .gitignore
__pycache__/
*.pyc
.env
venv/
```

---

#### ステップ5: ファイルをステージング

```bash
$ git add .
```

**📖 読み方:** 
- `git add` = ギット・アド (追加)
- `.` = ドット (全てのファイル)

**💻 実行結果:**

```bash
$ git add .
(何も表示されない = 成功)
```

**確認:**

```bash
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   README.md
        new file:   app.py
```

**✅ 成功の証拠:**
- `Changes to be committed` = コミット準備完了
- ファイル名が緑色

---

#### ステップ6: 初回コミット

```bash
$ git commit -m "Initial commit"
```

**📖 読み方:**
- `git commit` = ギット・コミット (記録)
- `-m` = メッセージ
- `"Initial commit"` = 初回コミットの定型文

**💻 実行結果:**

```bash
$ git commit -m "Initial commit"
[main (root-commit) a1b2c3d] Initial commit
 3 files changed, 5 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 README.md
 create mode 100644 app.py
```

**✅ 成功の証拠:**
- `[main a1b2c3d] Initial commit` = コミット成功
- `3 files changed` = 3ファイルが記録された

---

#### ステップ7: GitHubにリポジトリを作成

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上の **+** アイコン → **New repository**
3. 入力:
   - **Repository name:** `myapp`
   - **Description:** プロジェクトの説明(任意)
   - **Public** または **Private** を選択
   - ⚠️ **Initialize this repository with:** **全てチェックなし!**
4. **Create repository** ボタンをクリック

**📊 作成後の画面:**

```
…or push an existing repository from the command line

git remote add origin git@github.com:YourName/myapp.git
git branch -M main
git push -u origin main
```

**これをコピーして使います!**

---

#### ステップ8: リモートリポジトリを登録

```bash
$ git remote add origin git@github.com:YourName/myapp.git
```

**📖 読み方:**
- `git remote add` = ギット・リモート・アド (リモート追加)
- `origin` = オリジン (リモートの名前、慣例)
- `git@github.com:YourName/myapp.git` = GitHubのSSH URL

**💻 実行結果:**

```bash
$ git remote add origin git@github.com:YourName/myapp.git
(何も表示されない = 成功)
```

**確認:**

```bash
$ git remote -v
origin  git@github.com:YourName/myapp.git (fetch)
origin  git@github.com:YourName/myapp.git (push)
```

---

#### ステップ9: GitHubにプッシュ

```bash
$ git push -u origin main
```

**📖 読み方:**
- `git push` = ギット・プッシュ (送信)
- `-u` = ユー (upstream、上流を設定)
- `origin main` = originのmainブランチへ

**💻 実行結果:**

```bash
$ git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 456 bytes | 456.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:YourName/myapp.git
 * [new branch]      main -> main
Branch 'main' set up to track remote branch 'main' from 'origin'.
```

**✅ 成功の証拠:**
- `done.` が表示される
- `[new branch] main -> main` = 新しいブランチが作成された
- エラーメッセージが無い

---

## 🔄 日常のGit作業フロー

### 📊 全体の流れ図

```
1. コード編集
   ↓
2. git status (確認)
   ↓
3. git add . (ステージング)
   ↓
4. git commit -m "message" (コミット)
   ↓
5. git push (GitHubに送信)
```

---

### ステップバイステップ

#### 1. ファイルを編集

```bash
$ code app.py
# または
$ vim app.py
# または
$ notepad app.py
```

---

#### 2. 状態を確認

```bash
$ git status
```

**💻 実行結果:**

```bash
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
 | ドルマーク | GitBashプロンプト | ❌ NO |
| `>>>` | 大なり3つ | Pythonプロンプト | ❌ NO |
| `...` | ドット3つ | Python続き | ❌ NO |
| `#` | シャープ | コメント | ❌ NO |
| `/` | スラッシュ | フォルダ区切り | ✅ YES |
| `.` | ドット | 現在フォルダ | ✅ YES |
| `..` | ドット2つ | 親フォルダ | ✅ YES |
| `~` | チルダ | ホーム | ✅ YES |
| `*` | アスタリスク | ワイルドカード | ✅ YES |

---

## 📚 完全チートシート {#チートシート}

### 🗂️ フォルダ・ファイル操作

```bash
# === 移動 ===
pwd                        # 現在地を表示
cd /c/projects            # 絶対パスで移動
cd myapp                  # 相対パスで移動
cd ..                     # 一つ上に移動
cd ~                      # ホームに移動
cd -                      # 直前の場所に戻る

# === 表示 ===
ls                        # ファイル一覧
ls -la                    # 詳細表示(隠しファイルも)
ls -lh                    # サイズを読みやすく

# === 作成 ===
mkdir myapp               # フォルダ作成
mkdir -p app/src/utils    # 複数階層を一気に作成
touch app.py              # 空ファイル作成
echo "text" > file.txt    # 上書き
echo "text" >> file.txt   # 追記

# === コピー・移動 ===
cp a.txt b.txt            # ファイルコピー
cp -r folder1 folder2     # フォルダコピー
mv old.txt new.txt        # リネーム
mv file.txt /c/projects/  # 移動

# === 削除 ===
rm file.txt               # ファイル削除
rm -r folder              # フォルダ削除
rm -i file.txt            # 確認しながら削除

# === 表示 ===
cat file.txt              # ファイル内容表示
head file.txt             # 先頭10行表示
tail file.txt             # 末尾10行表示
```

---

### 🔧 Git設定

```bash
# === 初期設定 ===
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
git config --global init.defaultBranch main
git config --global core.autocrlf true

# === 設定確認 ===
git config --list
git config user.name

# === SSH鍵 ===
ssh-keygen -t ed25519 -C "your@email.com"
cat ~/.ssh/id_ed25519.pub
ssh -T git@github.com
```

---

### 📦 リポジトリ操作

```bash
# === 初期化 ===
git init                  # リポジトリ作成
git clone git@github.com:user/repo.git  # クローン

# === リモート ===
git remote add origin git@github.com:user/repo.git
git remote -v             # リモート確認
git remote remove origin  # リモート削除
```

---

### 💾 日常のGit操作

```bash
# === 基本フロー ===
git status                # 状態確認
git add .                 # 全て追加
git add file.txt          # 個別に追加
git commit -m "message"   # コミット
git push                  # プッシュ
git pull                  # プル

# === ログ確認 ===
git log                   # 履歴表示
git log --oneline         # 1行で表示
git log --graph --all     # グラフ表示

# === 差分確認 ===
git diff                  # 変更差分
git diff --staged         # ステージング済みの差分
```

---

### 🔀 ブランチ操作

```bash
# === ブランチ作成・切り替え ===
git branch                # ブランチ一覧
git branch feature/login  # ブランチ作成
git checkout main         # ブランチ切り替え
git checkout -b feature/test  # 作成+切り替え

# === ブランチ削除 ===
git branch -d feature/login   # ローカル削除
git push origin --delete feature/login  # リモート削除

# === マージ ===
git merge feature/login   # マージ
git merge --abort         # マージ中止
```

---

### 🆘 トラブルシューティング

```bash
# === 取り消し ===
git restore file.txt      # 変更を破棄
git restore --staged file.txt  # ステージング取り消し
git reset --soft HEAD~1   # コミット取り消し(変更は残す)
git reset --hard HEAD~1   # コミット取り消し(変更も削除)

# === やり直し ===
git commit --amend        # 直前のコミットを修正
git revert abc1234        # コミットを取り消す

# === 強制操作 ===
git push --force-with-lease  # 強制プッシュ(安全版)
git clean -fd             # 未追跡ファイルを削除

# === 一時退避 ===
git stash                 # 変更を一時保存
git stash pop             # 一時保存を戻す
git stash list            # 一時保存一覧
```

---

## 🎨 よくあるシナリオ別コマンド

### シナリオ1: 新規プロジェクト作成

```bash
# 1. フォルダ作成
cd /c/projects
mkdir myapp
cd myapp

# 2. Git初期化
git init

# 3. ファイル作成
touch app.py README.md
echo "# My App" > README.md

# 4. .gitignore作成
cat > .gitignore << EOF
__pycache__/
*.pyc
.env
venv/
EOF

# 5. 初回コミット
git add .
git commit -m "Initial commit"

# 6. GitHubに接続
git remote add origin git@github.com:YourName/myapp.git
git push -u origin main
```

---

### シナリオ2: 既存プロジェクトをクローン

```bash
# 1. 保存先に移動
cd /c/projects

# 2. クローン
git clone git@github.com:YourName/myapp.git

# 3. フォルダに移動
cd myapp

# 4. ブランチ確認
git branch -a

# 5. 作業開始
git checkout -b feature/my-work
```

---

### シナリオ3: 毎日の作業フロー

```bash
# 朝: 最新を取得
git checkout main
git pull origin main

# 作業ブランチ作成
git checkout -b feature/new-function

# コーディング
code app.py

# 確認
git status
git diff

# コミット
git add .
git commit -m "新機能を追加"

# プッシュ
git push origin feature/new-function

# GitHub でプルリクエスト作成
```

---

### シナリオ4: コンフリクト解決

```bash
# 1. プルしてコンフリクト発生
git pull origin main
# CONFLICT が表示される

# 2. 状態確認
git status
# both modified: app.py

# 3. ファイルを開いて修正
code app.py
# <<<<<<<, =======, >>>>>>> を削除して修正

# 4. 解決をマーク
git add app.py

# 5. マージコミット
git commit -m "Merge main into feature/my-work"

# 6. プッシュ
git push
```

---

## 📊 GitBash画面の読み方

### プロンプトの構造

```bash
User@PC MINGW64 /c/projects/myapp (main)
$
```

**📖 各部分の意味:**

```
User      ← Windowsのユーザー名
@         ← 区切り
PC        ← コンピューター名
MINGW64   ← GitBashの環境
/c/projects/myapp  ← 現在のパス
(main)    ← 現在のブランチ名
$         ← プロンプト(入力待ち)
```

---

### ブランチ表示のパターン

```bash
(main)              ← mainブランチ
(feature/login)     ← feature/loginブランチ
(main|MERGING)      ← マージ中
(main|REBASE)       ← リベース中
((no branch))       ← detached HEAD状態
```

---

## 🎯 コマンド実行結果の読み方

### git status の読み方

```bash
$ git status
On branch main                    ← 現在mainブランチ
Your branch is up to date with 'origin/main'.  ← 最新

Changes not staged for commit:   ← 未ステージング(赤文字)
        modified:   app.py

Untracked files:                  ← 未追跡ファイル(赤文字)
        utils.py

no changes added to commit        ← git add してない
```

**📊 状態の見分け方:**

```
✅ nothing to commit, working tree clean
   → 全てクリーン、変更なし

⚠️ Changes not staged for commit
   → 変更あり、git add が必要

✅ Changes to be committed
   → ステージング済み、git commit が必要

⚠️ Your branch is ahead of 'origin/main' by 1 commit
   → git push が必要

⚠️ Your branch is behind 'origin/main' by 1 commit
   → git pull が必要
```

---

### git log の読み方

```bash
$ git log --oneline
b2c3d4e (HEAD -> main, origin/main) 新機能を追加
a1b2c3d Initial commit
```

**📖 各部分の意味:**

```
b2c3d4e              ← コミットハッシュ(ID)
(HEAD -> main)       ← HEADの位置(現在地)
origin/main          ← リモートのmain
新機能を追加         ← コミットメッセージ
```

---

### git push の読み方

```bash
$ git push
Enumerating objects: 5, done.           ← オブジェクト数え中
Counting objects: 100% (5/5), done.     ← カウント完了
Delta compression using up to 8 threads ← 圧縮中
Compressing objects: 100% (3/3), done.  ← 圧縮完了
Writing objects: 100% (3/3), done.      ← 書き込み完了
Total 3 (delta 1), reused 0 (delta 0)  ← 統計
To github.com:YourName/myapp.git
   a1b2c3d..b2c3d4e  main -> main       ← 更新範囲
```

**✅ 成功の証拠:**
- `done.` が複数表示
- `100%` が表示
- エラーメッセージが無い

---

## 🆘 よくあるエラーと解決方法

### エラー1: Permission denied (publickey)

```bash
$ git push
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.
```

**原因:** SSH鍵が登録されていない

**解決方法:**

```bash
# 1. SSH鍵を作成
ssh-keygen -t ed25519 -C "your@email.com"

# 2. 公開鍵をコピー
cat ~/.ssh/id_ed25519.pub

# 3. GitHubに登録(ブラウザ)
# Settings → SSH and GPG keys → New SSH key

# 4. 接続テスト
ssh -T git@github.com
```

---

### エラー2: fatal: not a git repository

```bash
$ git status
fatal: not a git repository (or any of the parent directories): .git
```

**原因:** Gitリポジトリではないフォルダで実行

**解決方法:**

```bash
# パターンA: 正しいフォルダに移動
cd /c/projects/myapp
git status

# パターンB: 新規リポジトリ作成
git init
```

---

### エラー3: Your branch is behind

```bash
$ git push
! [rejected] main -> main (fetch first)
error: failed to push some refs
```

**原因:** リモートの方が新しい

**解決方法:**

```bash
# 1. 最新を取得
git pull origin main

# 2. コンフリクトがあれば解決

# 3. 再度プッシュ
git push
```

---

### エラー4: Please commit your changes or stash them

```bash
$ git pull
error: Your local changes to the following files would be overwritten by merge:
        app.py
Please commit your changes or stash them before you merge.
```

**原因:** 未コミットの変更がある

**解決方法A: コミットする**

```bash
git add .
git commit -m "作業中の変更を保存"
git pull
```

**解決方法B: 一時退避する**

```bash
git stash
git pull
git stash pop
```

---

## 💡 便利なエイリアス設定

### よく使うコマンドを短縮

```bash
# エイリアス設定
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.cm commit
git config --global alias.lg "log --oneline --graph --all"

# 使い方
git st      # = git status
git co main # = git checkout main
git br      # = git branch
git cm -m "message"  # = git commit -m "message"
git lg      # = git log --oneline --graph --all
```

---

## 🎓 まとめ

### 最重要コマンド Top 10

```bash
1.  pwd               # 現在地確認
2.  cd                # フォルダ移動
3.  ls                # ファイル一覧
4.  git status        # 状態確認
5.  git add .         # ステージング
6.  git commit -m     # コミット
7.  git push          # プッシュ
8.  git pull          # プル
9.  git checkout -b   # ブランチ作成+切り替え
10. git clone         # クローン
```

---

### 毎日使う基本フロー

```bash
# === 朝 ===
git checkout main
git pull origin main

# === 作業開始 ===
git checkout -b feature/new-task

# === コーディング ===
code app.py

# === 保存 ===
git add .
git commit -m "新機能を実装"
git push origin feature/new-task

# === GitHub でプルリクエスト ===
```

---

### 困った時の対処法

```bash
# 状態確認
git status

# 履歴確認
git log --oneline -5

# 差分確認
git diff

# やり直し
git restore file.txt        # 変更を破棄
git reset --soft HEAD~1     # コミット取り消し

# 中断
git merge --abort           # マージ中止
git rebase --abort          # リベース中止

# 一時退避
git stash                   # 変更を退避
git stash pop               # 変更を戻す
```

---

## 🎉 おわりに

これで **GitBash** と **Git** と **GitHub** の基本操作は完璧です!

**覚えておくべき3つのポイント:**

1. **$ や >>> は入力しない!** (記号の後ろだけコピペ)
2. **git status でいつでも確認!** (迷ったらこれ)
3. **困ったら --abort で中止!** (いつでもやり直せる)

---

**📚 参考資料:**
- [Git公式ドキュメント](https://git-scm.com/book/ja/v2)
- [GitHub公式ドキュメント](https://docs.github.com/ja)
- [Learn Git Branching](https://learngitbranching.js.org/?locale=ja)

**🎓 次のステップ:**
- ブランチ戦略を学ぶ
- プルリクエストの作り方
- チーム開発のベストプラクティス

Happy Coding! 🚀
