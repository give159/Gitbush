すばらしいテーマです👏
これはまさに**「Gitでの“やり直し大全”」**とも言える、
新人〜中級エンジニアが**実務で一番つまずくポイント**を体系的に整理する内容です。

以下に、**Qiita投稿そのままコピペOK**な構成で、
MECE（モレなくダブりなく）＋実務エラーに基づく**原因＆解決策**をまとめました。
Git Bashで実行できるコマンドもすべてコピペOKです。

---

# 🧭 【保存版】Gitのやり直し大全：add／commit／push／mergeミスを安全に戻す方法

### 〜 新人・中級エンジニア向け｜実務で遭遇する「やばいGit操作」を救出するチートシート 〜

---

## 🎯 はじめに

「間違えてaddしちゃった…」
「commitメッセージ変えたい！」
「pushしちゃったけど取り消したい！」

Gitの“やり直し”操作は実務で**誰もが必ず通る道**です。
しかし、適切なコマンドを知らないまま焦って操作すると、チーム全体を巻き込む事故になりかねません。

この記事では、**Gitのやり直し操作をフェーズ別にMECEで整理**。
「どの段階で」「何を」「どうやって安全に戻すか」を、
実際のエラー例とセットで紹介します。

---

## 🧩 目次（MECE構成）

| フェーズ | 状況      | 操作内容               |
| ---- | ------- | ------------------ |
| 1️⃣  | add前    | ステージングを取り消す        |
| 2️⃣  | commit前 | 変更を元に戻す            |
| 3️⃣  | commit後 | コミットを修正／取り消す       |
| 4️⃣  | push後   | リモートに反映されたものを修正・戻す |
| 5️⃣  | merge後  | 間違えたマージをやり直す       |

---

## 1️⃣ 【add前】ステージングを取り消す（`git reset`）

### 🔍 よくある失敗

> 「間違ったファイルを `git add .` しちゃった！」

### ✅ 解決方法

#### ▪ すべてのステージングを解除

```bash
git reset
```

#### ▪ 特定のファイルだけ解除

```bash
git reset ファイル名
```

📘 例：

```
git reset settings.py
```

✅ ファイルはワークツリーに残る（＝変更内容は消えない）

---

### 💡 実務ヒント

* **commit前ならresetは安全**
* addしたけどまだcommitしてない → 何度でもやり直せる

---

## 2️⃣ 【commit前】変更そのものを元に戻す（`git checkout --`）

### 🔍 よくある失敗

> 「ローカルで書き換えたけど、やっぱり元に戻したい！」

### ✅ 解決方法

#### ▪ 単一ファイルを元に戻す

```bash
git checkout -- ファイル名
```

#### ▪ 全部戻す

```bash
git checkout -- .
```

⚠️ 注意：この操作は**変更が完全に破棄**される。取り戻せない。

---

### 💡 実務ヒント

* この操作は「確定前のファイル」をリセットする時だけに使う
* 編集途中の作業を残したいときは、先に `git stash` で一時保存

---

## 3️⃣ 【commit後】コミットをやり直す（`--amend`）

### 🔍 よくある失敗

> 「コミットメッセージを間違えた」
> 「ファイルを入れ忘れた」

---

### ✅ 修正したい場合

#### ▪ コミット内容を修正

```bash
git add 追加ファイル
git commit --amend
```

→ 前のコミットを上書きして再登録。

---

### ✅ メッセージだけ修正したい場合

```bash
git commit --amend -m "正しいメッセージ"
```

📘 例：

```
git commit --amend -m "ログイン機能修正完了"
```

---

### ⚠️ 注意

* `--amend` は「**直前のcommitのみ**」上書きできる
* すでに **push済み** のコミットを amend すると、履歴がズレる
  → push前にのみ使用！

---

## 4️⃣ 【push後】リモートに上げたあと戻したい

### 🔍 よくある失敗

> 「pushしてから気づいた、ミスがある…」
> 「やばいコードをmainに上げてしまった！」

---

### ✅ パターン別対処法

#### 🧱 4-1：まだ他の人がpullしていない場合

**ローカルを修正 → 強制push**

```bash
git reset --soft HEAD~1     # 直前のコミットを取り消し（変更は残す）
git commit -m "修正版"
git push -f origin ブランチ名
```

📘 例：

```
git push -f origin feature/fix-login
```

⚠️ チーム開発では **必ずSlackなどで共有してから実施！**

---

#### 🪄 4-2：チームメンバーが既にpullしている場合

👉 強制pushは禁止！履歴破壊の危険あり。
代わりに「**修正版コミットを追加する**」対応を。

```bash
git commit -m "fix: 修正版を追加"
git push origin feature/fix-login
```

---

### 💡 実務ヒント

* **“reset + -f push”は最終手段**
* 一人で作業しているfeatureブランチ内だけに限定して使う

---

## 5️⃣ 【merge後】誤ってマージしたときの戻し方

### 🔍 よくある失敗

> 「間違ったブランチをmergeしちゃった」
> 「PRを早まってmainにmergeした」

---

### ✅ ローカルでのマージ取り消し

```bash
git log --oneline
# → mergeコミットの直前IDを確認
git reset --hard <直前のコミットID>
```

📘 例：

```
git reset --hard a1b2c3d
```

---

### ✅ GitHubで間違ってマージした場合

1. GitHubの「Revert」ボタンでrevert PRを作成
2. それをmainにマージ

👉 「revert PR」が“マージ取り消し”として機能します。

---

### 💡 実務ヒント

* main/masterブランチでは **reset禁止**（他人の履歴を壊す）
* **Revert運用**をチームでルール化しておくと安全

---

## ⚠️ 【付録】よくあるGitエラーメッセージと即対応

| エラーメッセージ                                                    | 原因            | 解決方法                                     |
| ----------------------------------------------------------- | ------------- | ---------------------------------------- |
| `fatal: You have unmerged paths.`                           | コンフリクト発生      | 手動でファイル修正 → `git add` → `git commit`     |
| `error: failed to push some refs`                           | リモートと履歴がズレている | `git pull --rebase origin ブランチ名` → 再push |
| `nothing to commit`                                         | addしていない      | `git add .` → 再commit                    |
| `Updates were rejected because the remote contains work...` | 他人のpushが先     | `git pull --rebase` or mergeして再push      |

---

## 🧭 最後に：やり直しの原則3つ

| 原則                             | 意味                          | 実務ポイント     |
| ------------------------------ | --------------------------- | ---------- |
| ✅ **commit前は自由に戻せる**           | `git reset`, `git checkout` | ローカルは練習場   |
| ⚠️ **push後は慎重に**               | `git push -f` は最終手段         | チームに確認してから |
| 🧠 **mergeは履歴操作ではなくrevertで戻す** | reset禁止                     | mainは神聖    |

---

## ✨ まとめ：Gitは「戻せる」からこそ焦らない

Gitはどんな操作も「戻す」手段があります。
焦って適当に`reset --hard`する前に、
「今どの段階のやり直しなのか」をまず確認しましょう。

---

### 📘 次に読むと良い記事

* 🧱 [Git事故対応マニュアル（ケース別解決策）](#)
* 🧠 [中級者向け Git リベース実践練習帳（失敗例つき）](#)
* 🧩 [上級者向け Git 戦略パターン（squash / merge / rebaseの使い分け）](#)

---

> 💬 **Git先生からの一言：**
> 「やり直せるからこそ、焦らず冷静に。
> 一番危険なのは“知った気でresetすること”。」

---

💾 **保存推奨！**
このチートシートを印刷しておくと、
深夜の“Git事故”でも冷静に対処できます。

---

🟩 ご希望あればこのQiita風記事を

* Markdown（Qiita投稿用）
* PDF（社内研修資料用）
  のどちらかに整形してお渡しできます。

どちらの形式にしますか？
