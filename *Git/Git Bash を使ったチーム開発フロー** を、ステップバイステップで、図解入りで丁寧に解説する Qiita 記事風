了解です！
では、新人エンジニア向けに **Git/Git Bash を使ったチーム開発フロー** を、ステップバイステップで、図解入りで丁寧に解説する Qiita 記事風にまとめます。この記事では、SSH認証、クローン、add/commit/push、PR、マージ、コンフリクト解消、差分比較、ブランチ付け替え、チェリーピック、コミット先ブランチ変更など応用編までカバーします。

---

# はじめに

こんにちは、TechCommitメンバーの **友季子** です。
今回は新人エンジニア向けに **Git Bash を使ったチーム開発の基本と応用操作** を、図解とステップバイステップで解説します。
Gitを使ったことがなくても大丈夫！一緒に進めていきましょう。

---

# 1. Gitの初期設定とSSH認証

### 1-1. Gitのインストール

* [Git公式サイト](https://git-scm.com/) から Git をインストール
* Git Bash で以下を確認：

```bash
git --version
```

### 1-2. ユーザー情報設定

```bash
git config --global user.name "あなたの名前"
git config --global user.email "あなたのメールアドレス"
```

### 1-3. SSH鍵の生成とGitHub登録

```bash
ssh-keygen -t ed25519 -C "あなたのメールアドレス"
```

* 出力される公開鍵 `id_ed25519.pub` を GitHub に登録
  → GitHub: **Settings > SSH and GPG keys > New SSH key**

### 1-4. 接続確認

```bash
ssh -T git@github.com
```

✅ 成功すればGitHubとのSSH認証完了！

---

# 2. リポジトリのクローン

```bash
git clone git@github.com:ユーザー名/リポジトリ名.git
cd リポジトリ名
```

```
[図解イメージ]
GitHubリポジトリ → Git Bash → ローカルにクローン
```

---

# 3. 基本操作：add → commit → push

### 3-1. 変更確認

```bash
git status
```

### 3-2. 変更をステージング

```bash
git add ファイル名
# 例: git add main.py
```

### 3-3. コミット

```bash
git commit -m "変更内容の説明"
```

### 3-4. プッシュ

```bash
git push origin ブランチ名
```

```
[図解イメージ]
作業ファイル → git add → git commit → git push → GitHubリモート
```

---

# 4. ブランチ操作

### 4-1. ブランチ作成・切り替え

```bash
git checkout -b feature/新機能
# 既存ブランチに切り替え
git checkout develop
```

### 4-2. ブランチ確認

```bash
git branch
```

---

# 5. プルリクエスト(PR)とマージ

1. GitHubで新しいPR作成
2. レビュー依頼
3. マージ

```bash
# ローカルで最新状態に更新
git pull origin main
```

---

# 6. コンフリクト解消

1. プルやマージ時にコンフリクト発生

```bash
git merge ブランチ名
```

2. ファイルに `<<<<<<< HEAD` の表示が出る
3. 必要な内容を残し、不要部分を削除
4. ステージング → コミット

```bash
git add 修正ファイル
git commit -m "コンフリクト解消"
```

```
[図解イメージ]
HEAD ←→ マージ対象ブランチ
```

---

# 7. 差分比較

```bash
# 作業中の差分確認
git diff

# コミット間の差分確認
git diff コミットID1 コミットID2
```

---

# 8. ブランチ付け替え・チェリーピック応用

### 8-1. コミットを別ブランチに適用

```bash
# 例: develop のコミットを feature に移す
git checkout feature
git cherry-pick コミットID
```

### 8-2. コミット先ブランチ変更

```bash
# 直前のコミットを別ブランチへ
git checkout 新ブランチ
git cherry-pick 元ブランチの直前コミットID
git checkout 元ブランチ
git reset --hard HEAD~1
```

---

# 9. 応用Tips

* `rebase` で履歴を整理
* `stash` で作業途中の変更を退避
* `git log --oneline --graph` で履歴を視覚化

```
[図解イメージ]
ブランチの枝分かれ、マージ、チェリーピックの流れ
```

---

# 終わりに

今回の記事では **Git Bash を使ったチーム開発の基本～応用** を図解入りで解説しました。

* SSH認証
* クローン
* add → commit → push
* PR & マージ
* コンフリクト解消
* 差分確認
* ブランチ付け替え・チェリーピック

これで新人エンジニアでも **チーム開発に入れる準備** が整いました。
ぜひ実際に試して、Git操作に慣れていきましょう！

---

💡 希望があれば、上記の **図解を画像付きで作った完全版** も作れます。
作ってほしいですか？
