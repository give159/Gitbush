🚀 GitGitBashWindows 完全ガイド【図解付き】
# 🚀 Git/GitBash/Windows 完全ガイド【図解付き】

## 📚 目次

1. [GitBash基本操作](#gitbash基本操作)
   - 階層移動(フォルダ移動)
   - フォルダ作成
   - ファイル作成
   - ファイル・フォルダ操作
2. [Git初期設定](#git初期設定)
3. [GitHub連携](#github連携)
4. [日常のGit作業](#日常のgit作業)
5. [記号の読み方](#記号の読み方)
6. [チートシート](#チートシート)

---

## 🖥️ GitBash基本操作 {#gitbash基本操作}

### 🌟 まず知っておくべき重要なこと

```bash
# ❌ これは入力しない!
$  ← プロンプト(目印)

# ✅ これだけ入力する!
git status  ← コマンド本体
```

**重要:** `$` 記号は**入力しません!** これは「ここに入力してね」という目印です。

---

## 📂 階層移動(フォルダ移動)

### 現在地を確認する

```bash
$ pwd
```

**📖 読み方:** `pwd` = ピー・ダブリュー・ディー (Print Working Directory)

**💻 実行結果:**

```bash
$ pwd
/c/Users/YourName
```

**📊 意味:**
- `/c/` = Cドライブ
- `/Users/YourName` = ユーザーフォルダ
- 現在、`C:\Users\YourName` にいる

---

### 📁 Windows パスとGitBash パスの対応表

| Windows表記 | GitBash表記 | 意味 |
|------------|------------|------|
| `C:\` | `/c/` | Cドライブ |
| `D:\` | `/d/` | Dドライブ |
| `C:\Users` | `/c/Users` | ユーザーフォルダ |
| `C:\projects\myapp` | `/c/projects/myapp` | プロジェクトフォルダ |
| `C:\Program Files` | `/c/Program Files` | プログラムファイル |

**⚠️ 注意:**
- Windows: バックスラッシュ `\`
- GitBash: スラッシュ `/`

---

### フォルダを移動する

#### パターン1: 絶対パスで移動

```bash
$ cd /c/projects
```

**📖 読み方:** `cd` = シー・ディー (Change Directory)

**💻 実行結果:**

```bash
$ cd /c/projects

$ pwd
/c/projects
```

**✅ 成功の証拠:** エラーが出ない、`pwd`で確認できる

---

#### パターン2: 相対パスで移動

```bash
# 現在地
$ pwd
/c/Users/YourName

# Desktopフォルダに移動
$ cd Desktop

$ pwd
/c/Users/YourName/Desktop
```

**📊 図解:**

```
現在地: /c/Users/YourName
         ↓ cd Desktop
移動先:  /c/Users/YourName/Desktop
```

---

#### パターン3: 親フォルダ(一つ上)に移動

```bash
# 現在地
$ pwd
/c/Users/YourName/Desktop

# 一つ上に移動
$ cd ..

$ pwd
/c/Users/YourName
```

**📖 読み方:** `..` = ドット・ドット (親フォルダ)

**📊 図解:**

```
/c/Users/YourName/Desktop  ← 現在地
         ↑ cd ..
/c/Users/YourName          ← 移動先
```

---

#### パターン4: ホームディレクトリに移動

```bash
$ cd ~

$ pwd
/c/Users/YourName
```

**📖 読み方:** `~` = チルダ (ホームディレクトリ)

---

#### パターン5: 複数階層を一気に移動

```bash
# 2つ上に移動
$ cd ../..

# 3つ上に移動
$ cd ../../..

# 特定のフォルダに一気に移動
$ cd /c/projects/myapp/src/components
```

---

### 📋 移動のまとめ表

| コマンド | 意味 | 例 |
|---------|------|-----|
| `cd /c/projects` | 絶対パスで移動 | Cドライブのprojectsへ |
| `cd Desktop` | 相対パスで移動 | 現在地からDesktopへ |
| `cd ..` | 一つ上に移動 | 親フォルダへ |
| `cd ~` | ホームに移動 | C:\Users\YourName へ |
| `cd -` | 直前の場所に戻る | 行き来する |

---

## 📂 フォルダ・ファイルを見る

### フォルダの中身を確認

```bash
$ ls
```

**📖 読み方:** `ls` = エル・エス (List)

**💻 実行結果:**

```bash
$ ls
Desktop  Documents  Downloads  Pictures
```

---

### 詳細表示

```bash
$ ls -la
```

**📖 読み方:** `ls -la` = エル・エス・オプション・エル・エー

**💻 実行結果:**

```bash
$ ls -la
total 8
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121    0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Desktop
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Documents
-rw-r--r-- 1 User 197121  156 Oct  8 10:00 .bashrc
```

**📊 見方:**

```
drwxr-xr-x  ← フォルダ
-rw-r--r--  ← ファイル
.bashrc     ← .で始まる = 隠しファイル
```

**オプション解説:**
- `-l` = 詳細表示 (long format)
- `-a` = 隠しファイルも表示 (all)
- `-la` = 両方

---

### 📊 lsオプション一覧

| コマンド | 意味 | よく使う? |
|---------|------|----------|
| `ls` | 基本表示 | ⭐⭐⭐ |
| `ls -l` | 詳細表示 | ⭐⭐⭐ |
| `ls -a` | 隠しファイルも | ⭐⭐ |
| `ls -la` | 全て詳細表示 | ⭐⭐⭐ |
| `ls -lh` | サイズを読みやすく | ⭐⭐ |

---

## 🆕 フォルダを作成する

### 基本のフォルダ作成

```bash
$ mkdir myproject
```

**📖 読み方:** `mkdir` = エムケー・ディーアイアール (Make Directory)

**💻 実行結果:**

```bash
$ mkdir myproject

$ ls
myproject

$ cd myproject

$ pwd
/c/Users/YourName/myproject
```

**✅ 成功の証拠:** エラーが出ない、`ls`で確認できる

---

### 複数階層を一気に作成

```bash
$ mkdir -p myproject/src/components
```

**📖 読み方:** `-p` = ピー (parents、親フォルダも作成)

**📊 図解:**

```
Before:
/c/Users/YourName
  (何もない)

After:
/c/Users/YourName
  └── myproject
       └── src
            └── components
```

**💻 確認:**

```bash
$ ls -R myproject
myproject:
src

myproject/src:
components

myproject/src/components:
```

---

### 複数のフォルダを同時に作成

```bash
$ mkdir folder1 folder2 folder3
```

**💻 実行結果:**

```bash
$ mkdir folder1 folder2 folder3

$ ls
folder1  folder2  folder3
```

---

## 📝 ファイルを作成する

### 空ファイルを作成

```bash
$ touch app.py
```

**📖 読み方:** `touch` = タッチ

**💻 実行結果:**

```bash
$ touch app.py

$ ls
app.py

$ ls -l app.py
-rw-r--r-- 1 User 197121 0 Oct  8 10:00 app.py
                         ↑ サイズ0バイト = 空ファイル
```

---

### 複数ファイルを同時に作成

```bash
$ touch main.py utils.py config.py
```

**💻 実行結果:**

```bash
$ touch main.py utils.py config.py

$ ls
config.py  main.py  utils.py
```

---

### テキストファイルに内容を書き込む

#### パターン1: echoで一行書き込み

```bash
$ echo "print('Hello')" > test.py
```

**📖 読み方:** 
- `echo` = エコー (表示)
- `>` = リダイレクト (ファイルに書き込む)

**💻 実行結果:**

```bash
$ echo "print('Hello')" > test.py

$ cat test.py
print('Hello')
```

**📖 読み方:** `cat` = キャット (ファイル内容表示)

---

#### パターン2: 追記する

```bash
$ echo "print('World')" >> test.py
```

**📖 読み方:** `>>` = 追記リダイレクト

**💻 実行結果:**

```bash
$ cat test.py
print('Hello')
print('World')
```

**⚠️ 注意:**
- `>` = 上書き (元の内容が消える)
- `>>` = 追記 (元の内容に追加)

---

### 📊 リダイレクト記号まとめ

| 記号 | 意味 | 使い方 |
|------|------|--------|
| `>` | 上書き | `echo "text" > file.txt` |
| `>>` | 追記 | `echo "text" >> file.txt` |
| `<` | 入力 | `command < input.txt` |
| `\|` | パイプ | `ls \| grep "test"` |

---

## 🗑️ ファイル・フォルダを削除する

### ファイルを削除

```bash
$ rm test.py
```

**📖 読み方:** `rm` = アールエム (Remove)

**💻 実行結果:**

```bash
$ ls
test.py

$ rm test.py

$ ls
(何も表示されない)
```

**⚠️ 警告:** 削除したファイルは**ゴミ箱に入らない!** 完全に消える!

---

### 複数ファイルを削除

```bash
$ rm file1.txt file2.txt file3.txt
```

---

### フォルダを削除

```bash
$ rm -r myfolder
```

**📖 読み方:** `-r` = アール (recursive、再帰的に全て削除)

**⚠️ 警告:** フォルダの中身も**全て消える!**

---

### 確認しながら削除

```bash
$ rm -i test.py
rm: remove regular file 'test.py'? y
```

**📖 読み方:** `-i` = アイ (interactive、対話的)

**操作方法:**
- `y` = Yes (削除する)
- `n` = No (削除しない)

---

### 🚨 安全な削除のベストプラクティス

```bash
# ❌ 危険! いきなり削除
$ rm -rf *

# ✅ 安全! まず確認
$ ls
file1.txt  file2.txt

# ✅ 安全! 削除前にバックアップ
$ cp important.txt important.txt.backup

# ✅ 安全! 確認しながら削除
$ rm -i important.txt
```

---

## 📋 ファイル・フォルダ操作まとめ

### コピー

```bash
$ cp source.txt destination.txt
```

**📖 読み方:** `cp` = シー・ピー (Copy)

**💻 例:**

```bash
# ファイルをコピー
$ cp app.py app_backup.py

# フォルダをコピー
$ cp -r myfolder myfolder_backup
```

---

### 移動・リネーム

```bash
$ mv old.txt new.txt
```

**📖 読み方:** `mv` = エム・ブイ (Move)

**💻 例:**

```bash
# リネーム
$ mv old_name.py new_name.py

# 移動
$ mv file.txt /c/projects/

# 移動+リネーム
$ mv old.txt /c/projects/new.txt
```

---

## 📊 基本コマンド完全一覧表

| コマンド | 読み方 | 意味 | 例 |
|---------|-------|------|-----|
| `pwd` | ピー・ダブリュー・ディー | 現在地表示 | `pwd` |
| `cd` | シー・ディー | フォルダ移動 | `cd /c/projects` |
| `ls` | エル・エス | 一覧表示 | `ls -la` |
| `mkdir` | エムケー・ディーアイアール | フォルダ作成 | `mkdir test` |
| `touch` | タッチ | ファイル作成 | `touch app.py` |
| `rm` | アールエム | 削除 | `rm file.txt` |
| `cp` | シー・ピー | コピー | `cp a.txt b.txt` |
| `mv` | エム・ブイ | 移動/リネーム | `mv old.txt new.txt` |
| `cat` | キャット | ファイル表示 | `cat app.py` |
| `echo` | エコー | 文字列表示 | `echo "test"` |
| `clear` | クリア | 画面クリア | `clear` |

---

## 🔧 Git初期設定 {#git初期設定}

### ステップ1: Gitがインストールされているか確認

```bash
$ git --version
```

**💻 実行結果:**

```bash
$ git --version
git version 2.42.0.windows.1
```

**✅ 成功:** バージョン番号が表示される  
**❌ 失敗:** `command not found` → Gitをインストール

**📥 Gitインストール方法:**
1. https://git-scm.com/download/win にアクセス
2. 64-bit版をダウンロード
3. インストーラーを実行(全てデフォルトでOK)
4. GitBashを再起動

---

### ステップ2: ユーザー名とメールアドレスを設定

```bash
$ git config --global user.name "Yamada Taro"
```

**📖 読み方:**
- `git config` = ギット・コンフィグ (設定)
- `--global` = グローバル (全体に適用)
- `user.name` = ユーザー名

**💻 コピペ用:**

```bash
# 名前を設定(GitHubのユーザー名でもOK)
git config --global user.name "Yamada Taro"

# メールアドレスを設定(GitHubで使っているメール)
git config --global user.email "yamada@example.com"

# 確認
git config --list
```

**✅ 成功時の表示:**

```bash
$ git config --list
user.name=Yamada Taro
user.email=yamada@example.com
...
```

---

### ステップ3: デフォルトブランチ名を設定

```bash
$ git config --global init.defaultBranch main
```

**💡 理由:** 最近のGitHubはデフォルトが`main`になった

---

### ステップ4: 改行コード設定(Windows)

```bash
$ git config --global core.autocrlf true
```

**📖 読み方:**
- `core.autocrlf` = コア・オート・シーアールエルエフ (自動改行変換)
- `true` = 有効

**💡 理由:** WindowsとMac/Linuxで改行コードが違うため

---

## 🔑 GitHub連携 {#github連携}

### ステップ1: SSH鍵を作成

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
```

**📖 読み方:**
- `ssh-keygen` = エスエスエイチ・キージェン (SSH鍵生成)
- `-t ed25519` = タイプ・イーディー25519 (暗号化方式)
- `-C` = コメント (識別用メールアドレス)

**💻 実行中の表示:**

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (/c/Users/YourName/.ssh/id_ed25519):
```

**🎯 操作:**
1. 何も入力せず **Enterキー**
2. `Enter passphrase:` → **Enterキー** (パスワード不要なら)
3. `Enter same passphrase again:` → **Enterキー**

**✅ 成功時の表示:**

```bash
Your identification has been saved in /c/Users/YourName/.ssh/id_ed25519
Your public key has been saved in /c/Users/YourName/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yamada@example.com
```

**📊 作成されたファイル:**

```
/c/Users/YourName/.ssh/
  ├── id_ed25519     ← 秘密鍵(絶対に人に見せない!)
  └── id_ed25519.pub ← 公開鍵(GitHubに登録する)
```

---

### ステップ2: 公開鍵をコピー

```bash
$ cat ~/.ssh/id_ed25519.pub
```

**💻 実行結果:**

```bash
$ cat ~/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGx7h... yamada@example.com
```

**🎯 操作:**
1. 表示された**全文**をコピー
2. `ssh-ed25519` から `yamada@example.com` まで全て

---

### ステップ3: GitHubに公開鍵を登録

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上のアイコンをクリック → **Settings**
3. 左メニュー → **SSH and GPG keys**
4. **New SSH key** ボタンをクリック
5. 入力:
   - **Title:** `Windows PC` (わかりやすい名前)
   - **Key:** コピーした公開鍵を貼り付け
6. **Add SSH key** ボタンをクリック
7. パスワード確認 → 完了!

**📊 図解:**

```
[GitHub]
    ↑
    | SSH接続(暗号化)
    | 公開鍵で認証
    ↓
[あなたのPC]
  秘密鍵で証明
```

---

### ステップ4: 接続テスト

```bash
$ ssh -T git@github.com
```

**📖 読み方:** `ssh -T` = エスエスエイチ・テスト

**💻 初回実行時:**

```bash
$ ssh -T git@github.com
The authenticity of host 'github.com' can't be established.
ED25519 key fingerprint is SHA256:xxxxx...
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
```

**🎯 操作:** `yes` と入力して Enter

**✅ 成功時の表示:**

```bash
Hi YamadaTaro! You've successfully authenticated, but GitHub does not provide shell access.
```

**🎉 これで接続完了!**

---

## 📦 リポジトリ作成とGitHub連携 {#日常のgit作業}

### シナリオ: 新規プロジェクトを作成してGitHubにアップ

#### ステップ1: プロジェクトフォルダを作成

```bash
# projectsフォルダに移動
$ cd /c/projects

# プロジェクトフォルダを作成
$ mkdir myapp

# 移動
$ cd myapp

# 確認
$ pwd
/c/projects/myapp
```

---

#### ステップ2: Gitリポジトリを初期化

```bash
$ git init
```

**📖 読み方:** `git init` = ギット・イニット (初期化)

**💻 実行結果:**

```bash
$ git init
Initialized empty Git repository in /c/projects/myapp/.git/
```

**✅ 成功の証拠:**
- `Initialized empty Git repository` と表示
- `.git` フォルダが作成される

**確認:**

```bash
$ ls -la
total 0
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121 0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .git  ← これが作成された!
```

---

#### ステップ3: ファイルを作成

```bash
# メインファイルを作成
$ touch app.py

# READMEを作成
$ echo "# My App" > README.md

# 確認
$ ls
README.md  app.py
```

---

#### ステップ4: .gitignoreを作成

```bash
$ cat > .gitignore << EOF
__pycache__/
*.pyc
.env
venv/
EOF
```

**📖 意味:** 
- `.gitignore` = Gitで管理しないファイルを指定
- `__pycache__/` = Pythonのキャッシュ
- `*.pyc` = コンパイル済みPython
- `.env` = 環境変数(秘密情報)
- `venv/` = 仮想環境

**確認:**

```bash
$ cat .gitignore
__pycache__/
*.pyc
.env
venv/
```

---

#### ステップ5: ファイルをステージング

```bash
$ git add .
```

**📖 読み方:** 
- `git add` = ギット・アド (追加)
- `.` = ドット (全てのファイル)

**💻 実行結果:**

```bash
$ git add .
(何も表示されない = 成功)
```

**確認:**

```bash
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   README.md
        new file:   app.py
```

**✅ 成功の証拠:**
- `Changes to be committed` = コミット準備完了
- ファイル名が緑色

---

#### ステップ6: 初回コミット

```bash
$ git commit -m "Initial commit"
```

**📖 読み方:**
- `git commit` = ギット・コミット (記録)
- `-m` = メッセージ
- `"Initial commit"` = 初回コミットの定型文

**💻 実行結果:**

```bash
$ git commit -m "Initial commit"
[main (root-commit) a1b2c3d] Initial commit
 3 files changed, 5 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 README.md
 create mode 100644 app.py
```

**✅ 成功の証拠:**
- `[main a1b2c3d] Initial commit` = コミット成功
- `3 files changed` = 3ファイルが記録された

---

#### ステップ7: GitHubにリポジトリを作成

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上の **+** アイコン → **New repository**
3. 入力:
   - **Repository name:** `myapp`
   - **Description:** プロジェクトの説明(任意)
   - **Public** または **Private** を選択
   - ⚠️ **Initialize this repository with:** **全てチェックなし!**
4. **Create repository** ボタンをクリック

**📊 作成後の画面:**

```
…or push an existing repository from the command line

git remote add origin git@github.com:YourName/myapp.git
git branch -M main
git push -u origin main
```

**これをコピーして使います!**

---

#### ステップ8: リモートリポジトリを登録

```bash
$ git remote add origin git@github.com:YourName/myapp.git
```

**📖 読み方:**
- `git remote add` = ギット・リモート・アド (リモート追加)
- `origin` = オリジン (リモートの名前、慣例)
- `git@github.com:YourName/myapp.git` = GitHubのSSH URL

**💻 実行結果:**

```bash
$ git remote add origin git@github.com:YourName/myapp.git
(何も表示されない = 成功)
```

**確認:**

```bash
$ git remote -v
origin  git@github.com:YourName/myapp.git (fetch)
origin  git@github.com:YourName/myapp.git (push)
```

---

#### ステップ9: GitHubにプッシュ

```bash
$ git push -u origin main
```

**📖 読み方:**
- `git push` = ギット・プッシュ (送信)
- `-u` = ユー (upstream、上流を設定)
- `origin main` = originのmainブランチへ

**💻 実行結果:**

```bash
$ git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 456 bytes | 456.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:YourName/myapp.git
 * [new branch]      main -> main
Branch 'main' set up to track remote branch 'main' from 'origin'.
```

**✅ 成功の証拠:**
- `done.` が表示される
- `[new branch] main -> main` = 新しいブランチが作成された
- エラーメッセージが無い

---

## 🔄 日常のGit作業フロー

### 📊 全体の流れ図

```
1. コード編集
   ↓
2. git status (確認)
   ↓
3. git add . (ステージング)
   ↓
4. git commit -m "message" (コミット)
   ↓
5. git push (GitHubに送信)
```

---

### ステップバイステップ

#### 1. ファイルを編集

```bash
$ code app.py
# または
$ vim app.py
# または
$ notepad app.py
```

---

#### 2. 状態を確認

```bash
$ git status
```

**💻 実行結果:**

```bash
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   app.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        utils.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**📊 状態の読み方:**

| 表示 | 色 | 意味 |
|------|-----|------|
| `modified: app.py` | 赤 | 変更したがまだaddしていない |
| `Untracked files: utils.py` | 赤 | 新しいファイル、Gitが追跡していない |
| `Changes to be committed` | 緑 | addした、コミット準備完了 |
| `nothing to commit` | - | 全てクリーン、変更なし |

---

#### 3. ファイルをステージング

```bash
$ git add .
```

**または特定のファイルだけ:**

```bash
$ git add app.py utils.py
```

**確認:**

```bash
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   app.py
        new file:   utils.py
```

**✅ 成功:** ファイル名が緑色に変わった!

---

#### 4. コミット

```bash
$ git commit -m "ログイン機能を追加"
```

**💡 コミットメッセージのコツ:**

```bash
# ✅ 良い例
git commit -m "ログイン機能を追加"
git commit -m "バグ修正: パスワード検証エラー"
git commit -m "リファクタリング: コードを整理"

# ❌ 悪い例
git commit -m "修正"
git commit -m "aaa"
git commit -m "とりあえず"
```

**📋 コミットメッセージの型:**

```bash
# 機能追加
git commit -m "追加: ○○機能"

# バグ修正
git commit -m "修正: ○○のバグ"

# 更新
git commit -m "更新: ○○を改善"

# 削除
git commit -m "削除: 不要な○○"
```

**💻 実行結果:**

```bash
$ git commit -m "ログイン機能を追加"
[main b3c4d5e] ログイン機能を追加
 2 files changed, 25 insertions(+), 3 deletions(-)
 create mode 100644 utils.py
```

---

#### 5. GitHubにプッシュ

```bash
$ git push
```

**📖 読み方:** 初回設定済みなら `git push` だけでOK

**💻 実行結果:**

```bash
$ git push
Enumerating objects: 7, done.
Counting objects: 100% (7/7), done.
Delta compression using up to 8 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 567 bytes | 567.00 KiB/s, done.
Total 4 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 1 local object.
To github.com:YourName/myapp.git
   a1b2c3d..b3c4d5e  main -> main
```

**✅ 成功の証拠:**
- `done.` が複数回表示
- `a1b2c3d..b3c4d5e main -> main` = コミット範囲が更新
- エラーメッセージなし

---

## 🔄 既存プロジェクトをクローン

### GitHubからプロジェクトをダウンロード

```bash
# projectsフォルダに移動
$ cd /c/projects

# クローン
$ git clone git@github.com:YourName/myapp.git

# 移動
$ cd myapp

# 確認
$ ls
README.md  app.py  utils.py
```

**💻 実行結果:**

```bash
$ git clone git@github.com:YourName/myapp.git
Cloning into 'myapp'...
remote: Enumerating objects: 12, done.
remote: Counting objects: 100% (12/12), done.
remote: Compressing objects: 100% (8/8), done.
remote: Total 12 (delta 3), reused 9 (delta 2), pack-reused 0
Receiving objects: 100% (12/12), 1.23 KiB | 315.00 KiB/s, done.
Resolving deltas: 100% (3/3), done.
```

**✅ 成功の証拠:**
- `Cloning into 'myapp'...` = クローン中
- `done.` が表示
- フォルダが作成される

---

## 🌿 ブランチ操作

### ブランチとは?

**📊 図解:**

```
main        A --- B --- C --- D (本番用)
                      \
feature              E --- F (開発用)
```

**💡 ブランチを使う理由:**
- mainを壊さない
- 機能ごとに開発
- チームで並行作業

---

### ブランチ一覧を確認

```bash
$ git branch
```

**💻 実行結果:**

```bash
$ git branch
* main
```

**📖 見方:**
- `*` = 現在いるブランチ
- 緑色で表示される

---

### 新しいブランチを作成

```bash
$ git branch feature/login
```

**📖 読み方:** `feature/login` = 機能名/詳細

**💻 実行結果:**

```bash
$ git branch feature/login

$ git branch
  feature/login
* main
```

---

### ブランチを切り替え

```bash
$ git checkout feature/login
```

**💻 実行結果:**

```bash
$ git checkout feature/login
Switched to branch 'feature/login'

$ git branch
* feature/login
  main
```

**✅ 成功:** `*` が移動した!

---

### 作成と切り替えを同時に

```bash
$ git checkout -b feature/register
```

**📖 読み方:** `-b` = ブランチを作成して切り替え

**💻 実行結果:**

```bash
$ git checkout -b feature/register
Switched to a new branch 'feature/register'

$ git branch
  feature/login
* feature/register
  main
```

---

### ブランチをマージ

```bash
# mainに戻る
$ git checkout main

# feature/loginをmainにマージ
$ git merge feature/login
```

**💻 実行結果:**

```bash
$ git merge feature/login
Updating a1b2c3d..e5f6g7h
Fast-forward
 login.py | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
 create mode 100644 login.py
```

**✅ 成功の証拠:**
- `Fast-forward` = 高速マージ成功
- `Updating a1b2c3d..e5f6g7h` = コミット更新

---

### ブランチを削除

```bash
$ git branch -d feature/login
```

**📖 読み方:** `-d` = デリート (削除)

**💻 実行結果:**

```bash
$ git branch -d feature/login
Deleted branch feature/login (was e5f6g7h).
```

---

## 📝 記号の読み方完全版 {#記号の読み方}

### GitBash画面の構造

```bash
User@PC MINGW64 /c/projects/myapp (main)
$ git status
```

**📊 分解:**

```
User@PC              ← ユーザー名とPC名
MINGW64              ← GitBashの環境
/c/projects/myapp    ← 現在のパス
(main)               ← 現在のブランチ
$                    ← プロンプト(入力待ち)
git status           ← 実際のコマンド
```

---

### 入力する/しない記号一覧

| 記号 | 名前 | 入力する? | 意味 |
|------|------|----------|------|
| `# 🚀 Git/GitBash/Windows 完全ガイド【図解付き】

## 📚 目次

1. [GitBash基本操作](#gitbash基本操作)
   - 階層移動(フォルダ移動)
   - フォルダ作成
   - ファイル作成
   - ファイル・フォルダ操作
2. [Git初期設定](#git初期設定)
3. [GitHub連携](#github連携)
4. [日常のGit作業](#日常のgit作業)
5. [記号の読み方](#記号の読み方)
6. [チートシート](#チートシート)

---

## 🖥️ GitBash基本操作 {#gitbash基本操作}

### 🌟 まず知っておくべき重要なこと

```bash
# ❌ これは入力しない!
$  ← プロンプト(目印)

# ✅ これだけ入力する!
git status  ← コマンド本体
```

**重要:** `$` 記号は**入力しません!** これは「ここに入力してね」という目印です。

---

## 📂 階層移動(フォルダ移動)

### 現在地を確認する

```bash
$ pwd
```

**📖 読み方:** `pwd` = ピー・ダブリュー・ディー (Print Working Directory)

**💻 実行結果:**

```bash
$ pwd
/c/Users/YourName
```

**📊 意味:**
- `/c/` = Cドライブ
- `/Users/YourName` = ユーザーフォルダ
- 現在、`C:\Users\YourName` にいる

---

### 📁 Windows パスとGitBash パスの対応表

| Windows表記 | GitBash表記 | 意味 |
|------------|------------|------|
| `C:\` | `/c/` | Cドライブ |
| `D:\` | `/d/` | Dドライブ |
| `C:\Users` | `/c/Users` | ユーザーフォルダ |
| `C:\projects\myapp` | `/c/projects/myapp` | プロジェクトフォルダ |
| `C:\Program Files` | `/c/Program Files` | プログラムファイル |

**⚠️ 注意:**
- Windows: バックスラッシュ `\`
- GitBash: スラッシュ `/`

---

### フォルダを移動する

#### パターン1: 絶対パスで移動

```bash
$ cd /c/projects
```

**📖 読み方:** `cd` = シー・ディー (Change Directory)

**💻 実行結果:**

```bash
$ cd /c/projects

$ pwd
/c/projects
```

**✅ 成功の証拠:** エラーが出ない、`pwd`で確認できる

---

#### パターン2: 相対パスで移動

```bash
# 現在地
$ pwd
/c/Users/YourName

# Desktopフォルダに移動
$ cd Desktop

$ pwd
/c/Users/YourName/Desktop
```

**📊 図解:**

```
現在地: /c/Users/YourName
         ↓ cd Desktop
移動先:  /c/Users/YourName/Desktop
```

---

#### パターン3: 親フォルダ(一つ上)に移動

```bash
# 現在地
$ pwd
/c/Users/YourName/Desktop

# 一つ上に移動
$ cd ..

$ pwd
/c/Users/YourName
```

**📖 読み方:** `..` = ドット・ドット (親フォルダ)

**📊 図解:**

```
/c/Users/YourName/Desktop  ← 現在地
         ↑ cd ..
/c/Users/YourName          ← 移動先
```

---

#### パターン4: ホームディレクトリに移動

```bash
$ cd ~

$ pwd
/c/Users/YourName
```

**📖 読み方:** `~` = チルダ (ホームディレクトリ)

---

#### パターン5: 複数階層を一気に移動

```bash
# 2つ上に移動
$ cd ../..

# 3つ上に移動
$ cd ../../..

# 特定のフォルダに一気に移動
$ cd /c/projects/myapp/src/components
```

---

### 📋 移動のまとめ表

| コマンド | 意味 | 例 |
|---------|------|-----|
| `cd /c/projects` | 絶対パスで移動 | Cドライブのprojectsへ |
| `cd Desktop` | 相対パスで移動 | 現在地からDesktopへ |
| `cd ..` | 一つ上に移動 | 親フォルダへ |
| `cd ~` | ホームに移動 | C:\Users\YourName へ |
| `cd -` | 直前の場所に戻る | 行き来する |

---

## 📂 フォルダ・ファイルを見る

### フォルダの中身を確認

```bash
$ ls
```

**📖 読み方:** `ls` = エル・エス (List)

**💻 実行結果:**

```bash
$ ls
Desktop  Documents  Downloads  Pictures
```

---

### 詳細表示

```bash
$ ls -la
```

**📖 読み方:** `ls -la` = エル・エス・オプション・エル・エー

**💻 実行結果:**

```bash
$ ls -la
total 8
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121    0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Desktop
drwxr-xr-x 1 User 197121    0 Oct  8 10:00 Documents
-rw-r--r-- 1 User 197121  156 Oct  8 10:00 .bashrc
```

**📊 見方:**

```
drwxr-xr-x  ← フォルダ
-rw-r--r--  ← ファイル
.bashrc     ← .で始まる = 隠しファイル
```

**オプション解説:**
- `-l` = 詳細表示 (long format)
- `-a` = 隠しファイルも表示 (all)
- `-la` = 両方

---

### 📊 lsオプション一覧

| コマンド | 意味 | よく使う? |
|---------|------|----------|
| `ls` | 基本表示 | ⭐⭐⭐ |
| `ls -l` | 詳細表示 | ⭐⭐⭐ |
| `ls -a` | 隠しファイルも | ⭐⭐ |
| `ls -la` | 全て詳細表示 | ⭐⭐⭐ |
| `ls -lh` | サイズを読みやすく | ⭐⭐ |

---

## 🆕 フォルダを作成する

### 基本のフォルダ作成

```bash
$ mkdir myproject
```

**📖 読み方:** `mkdir` = エムケー・ディーアイアール (Make Directory)

**💻 実行結果:**

```bash
$ mkdir myproject

$ ls
myproject

$ cd myproject

$ pwd
/c/Users/YourName/myproject
```

**✅ 成功の証拠:** エラーが出ない、`ls`で確認できる

---

### 複数階層を一気に作成

```bash
$ mkdir -p myproject/src/components
```

**📖 読み方:** `-p` = ピー (parents、親フォルダも作成)

**📊 図解:**

```
Before:
/c/Users/YourName
  (何もない)

After:
/c/Users/YourName
  └── myproject
       └── src
            └── components
```

**💻 確認:**

```bash
$ ls -R myproject
myproject:
src

myproject/src:
components

myproject/src/components:
```

---

### 複数のフォルダを同時に作成

```bash
$ mkdir folder1 folder2 folder3
```

**💻 実行結果:**

```bash
$ mkdir folder1 folder2 folder3

$ ls
folder1  folder2  folder3
```

---

## 📝 ファイルを作成する

### 空ファイルを作成

```bash
$ touch app.py
```

**📖 読み方:** `touch` = タッチ

**💻 実行結果:**

```bash
$ touch app.py

$ ls
app.py

$ ls -l app.py
-rw-r--r-- 1 User 197121 0 Oct  8 10:00 app.py
                         ↑ サイズ0バイト = 空ファイル
```

---

### 複数ファイルを同時に作成

```bash
$ touch main.py utils.py config.py
```

**💻 実行結果:**

```bash
$ touch main.py utils.py config.py

$ ls
config.py  main.py  utils.py
```

---

### テキストファイルに内容を書き込む

#### パターン1: echoで一行書き込み

```bash
$ echo "print('Hello')" > test.py
```

**📖 読み方:** 
- `echo` = エコー (表示)
- `>` = リダイレクト (ファイルに書き込む)

**💻 実行結果:**

```bash
$ echo "print('Hello')" > test.py

$ cat test.py
print('Hello')
```

**📖 読み方:** `cat` = キャット (ファイル内容表示)

---

#### パターン2: 追記する

```bash
$ echo "print('World')" >> test.py
```

**📖 読み方:** `>>` = 追記リダイレクト

**💻 実行結果:**

```bash
$ cat test.py
print('Hello')
print('World')
```

**⚠️ 注意:**
- `>` = 上書き (元の内容が消える)
- `>>` = 追記 (元の内容に追加)

---

### 📊 リダイレクト記号まとめ

| 記号 | 意味 | 使い方 |
|------|------|--------|
| `>` | 上書き | `echo "text" > file.txt` |
| `>>` | 追記 | `echo "text" >> file.txt` |
| `<` | 入力 | `command < input.txt` |
| `\|` | パイプ | `ls \| grep "test"` |

---

## 🗑️ ファイル・フォルダを削除する

### ファイルを削除

```bash
$ rm test.py
```

**📖 読み方:** `rm` = アールエム (Remove)

**💻 実行結果:**

```bash
$ ls
test.py

$ rm test.py

$ ls
(何も表示されない)
```

**⚠️ 警告:** 削除したファイルは**ゴミ箱に入らない!** 完全に消える!

---

### 複数ファイルを削除

```bash
$ rm file1.txt file2.txt file3.txt
```

---

### フォルダを削除

```bash
$ rm -r myfolder
```

**📖 読み方:** `-r` = アール (recursive、再帰的に全て削除)

**⚠️ 警告:** フォルダの中身も**全て消える!**

---

### 確認しながら削除

```bash
$ rm -i test.py
rm: remove regular file 'test.py'? y
```

**📖 読み方:** `-i` = アイ (interactive、対話的)

**操作方法:**
- `y` = Yes (削除する)
- `n` = No (削除しない)

---

### 🚨 安全な削除のベストプラクティス

```bash
# ❌ 危険! いきなり削除
$ rm -rf *

# ✅ 安全! まず確認
$ ls
file1.txt  file2.txt

# ✅ 安全! 削除前にバックアップ
$ cp important.txt important.txt.backup

# ✅ 安全! 確認しながら削除
$ rm -i important.txt
```

---

## 📋 ファイル・フォルダ操作まとめ

### コピー

```bash
$ cp source.txt destination.txt
```

**📖 読み方:** `cp` = シー・ピー (Copy)

**💻 例:**

```bash
# ファイルをコピー
$ cp app.py app_backup.py

# フォルダをコピー
$ cp -r myfolder myfolder_backup
```

---

### 移動・リネーム

```bash
$ mv old.txt new.txt
```

**📖 読み方:** `mv` = エム・ブイ (Move)

**💻 例:**

```bash
# リネーム
$ mv old_name.py new_name.py

# 移動
$ mv file.txt /c/projects/

# 移動+リネーム
$ mv old.txt /c/projects/new.txt
```

---

## 📊 基本コマンド完全一覧表

| コマンド | 読み方 | 意味 | 例 |
|---------|-------|------|-----|
| `pwd` | ピー・ダブリュー・ディー | 現在地表示 | `pwd` |
| `cd` | シー・ディー | フォルダ移動 | `cd /c/projects` |
| `ls` | エル・エス | 一覧表示 | `ls -la` |
| `mkdir` | エムケー・ディーアイアール | フォルダ作成 | `mkdir test` |
| `touch` | タッチ | ファイル作成 | `touch app.py` |
| `rm` | アールエム | 削除 | `rm file.txt` |
| `cp` | シー・ピー | コピー | `cp a.txt b.txt` |
| `mv` | エム・ブイ | 移動/リネーム | `mv old.txt new.txt` |
| `cat` | キャット | ファイル表示 | `cat app.py` |
| `echo` | エコー | 文字列表示 | `echo "test"` |
| `clear` | クリア | 画面クリア | `clear` |

---

## 🔧 Git初期設定 {#git初期設定}

### ステップ1: Gitがインストールされているか確認

```bash
$ git --version
```

**💻 実行結果:**

```bash
$ git --version
git version 2.42.0.windows.1
```

**✅ 成功:** バージョン番号が表示される  
**❌ 失敗:** `command not found` → Gitをインストール

**📥 Gitインストール方法:**
1. https://git-scm.com/download/win にアクセス
2. 64-bit版をダウンロード
3. インストーラーを実行(全てデフォルトでOK)
4. GitBashを再起動

---

### ステップ2: ユーザー名とメールアドレスを設定

```bash
$ git config --global user.name "Yamada Taro"
```

**📖 読み方:**
- `git config` = ギット・コンフィグ (設定)
- `--global` = グローバル (全体に適用)
- `user.name` = ユーザー名

**💻 コピペ用:**

```bash
# 名前を設定(GitHubのユーザー名でもOK)
git config --global user.name "Yamada Taro"

# メールアドレスを設定(GitHubで使っているメール)
git config --global user.email "yamada@example.com"

# 確認
git config --list
```

**✅ 成功時の表示:**

```bash
$ git config --list
user.name=Yamada Taro
user.email=yamada@example.com
...
```

---

### ステップ3: デフォルトブランチ名を設定

```bash
$ git config --global init.defaultBranch main
```

**💡 理由:** 最近のGitHubはデフォルトが`main`になった

---

### ステップ4: 改行コード設定(Windows)

```bash
$ git config --global core.autocrlf true
```

**📖 読み方:**
- `core.autocrlf` = コア・オート・シーアールエルエフ (自動改行変換)
- `true` = 有効

**💡 理由:** WindowsとMac/Linuxで改行コードが違うため

---

## 🔑 GitHub連携 {#github連携}

### ステップ1: SSH鍵を作成

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
```

**📖 読み方:**
- `ssh-keygen` = エスエスエイチ・キージェン (SSH鍵生成)
- `-t ed25519` = タイプ・イーディー25519 (暗号化方式)
- `-C` = コメント (識別用メールアドレス)

**💻 実行中の表示:**

```bash
$ ssh-keygen -t ed25519 -C "yamada@example.com"
Generating public/private ed25519 key pair.
Enter file in which to save the key (/c/Users/YourName/.ssh/id_ed25519):
```

**🎯 操作:**
1. 何も入力せず **Enterキー**
2. `Enter passphrase:` → **Enterキー** (パスワード不要なら)
3. `Enter same passphrase again:` → **Enterキー**

**✅ 成功時の表示:**

```bash
Your identification has been saved in /c/Users/YourName/.ssh/id_ed25519
Your public key has been saved in /c/Users/YourName/.ssh/id_ed25519.pub
The key fingerprint is:
SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yamada@example.com
```

**📊 作成されたファイル:**

```
/c/Users/YourName/.ssh/
  ├── id_ed25519     ← 秘密鍵(絶対に人に見せない!)
  └── id_ed25519.pub ← 公開鍵(GitHubに登録する)
```

---

### ステップ2: 公開鍵をコピー

```bash
$ cat ~/.ssh/id_ed25519.pub
```

**💻 実行結果:**

```bash
$ cat ~/.ssh/id_ed25519.pub
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGx7h... yamada@example.com
```

**🎯 操作:**
1. 表示された**全文**をコピー
2. `ssh-ed25519` から `yamada@example.com` まで全て

---

### ステップ3: GitHubに公開鍵を登録

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上のアイコンをクリック → **Settings**
3. 左メニュー → **SSH and GPG keys**
4. **New SSH key** ボタンをクリック
5. 入力:
   - **Title:** `Windows PC` (わかりやすい名前)
   - **Key:** コピーした公開鍵を貼り付け
6. **Add SSH key** ボタンをクリック
7. パスワード確認 → 完了!

**📊 図解:**

```
[GitHub]
    ↑
    | SSH接続(暗号化)
    | 公開鍵で認証
    ↓
[あなたのPC]
  秘密鍵で証明
```

---

### ステップ4: 接続テスト

```bash
$ ssh -T git@github.com
```

**📖 読み方:** `ssh -T` = エスエスエイチ・テスト

**💻 初回実行時:**

```bash
$ ssh -T git@github.com
The authenticity of host 'github.com' can't be established.
ED25519 key fingerprint is SHA256:xxxxx...
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
```

**🎯 操作:** `yes` と入力して Enter

**✅ 成功時の表示:**

```bash
Hi YamadaTaro! You've successfully authenticated, but GitHub does not provide shell access.
```

**🎉 これで接続完了!**

---

## 📦 リポジトリ作成とGitHub連携 {#日常のgit作業}

### シナリオ: 新規プロジェクトを作成してGitHubにアップ

#### ステップ1: プロジェクトフォルダを作成

```bash
# projectsフォルダに移動
$ cd /c/projects

# プロジェクトフォルダを作成
$ mkdir myapp

# 移動
$ cd myapp

# 確認
$ pwd
/c/projects/myapp
```

---

#### ステップ2: Gitリポジトリを初期化

```bash
$ git init
```

**📖 読み方:** `git init` = ギット・イニット (初期化)

**💻 実行結果:**

```bash
$ git init
Initialized empty Git repository in /c/projects/myapp/.git/
```

**✅ 成功の証拠:**
- `Initialized empty Git repository` と表示
- `.git` フォルダが作成される

**確認:**

```bash
$ ls -la
total 0
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .
drwxr-xr-x 1 User 197121 0 Oct  8 09:00 ..
drwxr-xr-x 1 User 197121 0 Oct  8 10:00 .git  ← これが作成された!
```

---

#### ステップ3: ファイルを作成

```bash
# メインファイルを作成
$ touch app.py

# READMEを作成
$ echo "# My App" > README.md

# 確認
$ ls
README.md  app.py
```

---

#### ステップ4: .gitignoreを作成

```bash
$ cat > .gitignore << EOF
__pycache__/
*.pyc
.env
venv/
EOF
```

**📖 意味:** 
- `.gitignore` = Gitで管理しないファイルを指定
- `__pycache__/` = Pythonのキャッシュ
- `*.pyc` = コンパイル済みPython
- `.env` = 環境変数(秘密情報)
- `venv/` = 仮想環境

**確認:**

```bash
$ cat .gitignore
__pycache__/
*.pyc
.env
venv/
```

---

#### ステップ5: ファイルをステージング

```bash
$ git add .
```

**📖 読み方:** 
- `git add` = ギット・アド (追加)
- `.` = ドット (全てのファイル)

**💻 実行結果:**

```bash
$ git add .
(何も表示されない = 成功)
```

**確認:**

```bash
$ git status
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   .gitignore
        new file:   README.md
        new file:   app.py
```

**✅ 成功の証拠:**
- `Changes to be committed` = コミット準備完了
- ファイル名が緑色

---

#### ステップ6: 初回コミット

```bash
$ git commit -m "Initial commit"
```

**📖 読み方:**
- `git commit` = ギット・コミット (記録)
- `-m` = メッセージ
- `"Initial commit"` = 初回コミットの定型文

**💻 実行結果:**

```bash
$ git commit -m "Initial commit"
[main (root-commit) a1b2c3d] Initial commit
 3 files changed, 5 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 README.md
 create mode 100644 app.py
```

**✅ 成功の証拠:**
- `[main a1b2c3d] Initial commit` = コミット成功
- `3 files changed` = 3ファイルが記録された

---

#### ステップ7: GitHubにリポジトリを作成

**🌐 ブラウザで操作:**

1. **GitHub.com にログイン**
2. 右上の **+** アイコン → **New repository**
3. 入力:
   - **Repository name:** `myapp`
   - **Description:** プロジェクトの説明(任意)
   - **Public** または **Private** を選択
   - ⚠️ **Initialize this repository with:** **全てチェックなし!**
4. **Create repository** ボタンをクリック

**📊 作成後の画面:**

```
…or push an existing repository from the command line

git remote add origin git@github.com:YourName/myapp.git
git branch -M main
git push -u origin main
```

**これをコピーして使います!**

---

#### ステップ8: リモートリポジトリを登録

```bash
$ git remote add origin git@github.com:YourName/myapp.git
```

**📖 読み方:**
- `git remote add` = ギット・リモート・アド (リモート追加)
- `origin` = オリジン (リモートの名前、慣例)
- `git@github.com:YourName/myapp.git` = GitHubのSSH URL

**💻 実行結果:**

```bash
$ git remote add origin git@github.com:YourName/myapp.git
(何も表示されない = 成功)
```

**確認:**

```bash
$ git remote -v
origin  git@github.com:YourName/myapp.git (fetch)
origin  git@github.com:YourName/myapp.git (push)
```

---

#### ステップ9: GitHubにプッシュ

```bash
$ git push -u origin main
```

**📖 読み方:**
- `git push` = ギット・プッシュ (送信)
- `-u` = ユー (upstream、上流を設定)
- `origin main` = originのmainブランチへ

**💻 実行結果:**

```bash
$ git push -u origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (5/5), 456 bytes | 456.00 KiB/s, done.
Total 5 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:YourName/myapp.git
 * [new branch]      main -> main
Branch 'main' set up to track remote branch 'main' from 'origin'.
```

**✅ 成功の証拠:**
- `done.` が表示される
- `[new branch] main -> main` = 新しいブランチが作成された
- エラーメッセージが無い

---

## 🔄 日常のGit作業フロー

### 📊 全体の流れ図

```
1. コード編集
   ↓
2. git status (確認)
   ↓
3. git add . (ステージング)
   ↓
4. git commit -m "message" (コミット)
   ↓
5. git push (GitHubに送信)
```

---

### ステップバイステップ

#### 1. ファイルを編集

```bash
$ code app.py
# または
$ vim app.py
# または
$ notepad app.py
```

---

#### 2. 状態を確認

```bash
$ git status
```

 | ドルマーク | ❌ NO | GitBashプロンプト |
| `>>>` | 大なり3つ | ❌ NO | Pythonプロンプト |
| `...` | ドット3つ | ❌ NO | Python続き |
| `#` | シャープ | ❌ NO | コメント |
| `(main)` | ブランチ表示 | ❌ NO | 現在のブランチ |
| `/c/` | パス | ❌ NO | 現在地表示 |

**✅ 入力するのは:**
- コマンド本体だけ!
- 例: `git status`
- 例: `cd /c/projects`

---

### コマンドの色の意味

```bash
$ git status
On branch main
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   app.py    ← 緑色

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   utils.py  ← 赤色

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        test.py               ← 赤色
```

**📊 色の意味:**

| 色 | 状態 | やること |
|----|------|---------|
| **緑色** | ステージング済み | `git commit` |
| **赤色** | 未ステージング | `git add` |
| 白色 | コミット済み | 何もしない |

---

## 🎯 よくあるエラーと解決方法

### エラー1: permission denied

```bash
$ git push
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.
```

**📖 意味:** SSH鍵の認証エラー

**✅ 解決方法:**

```bash
# SSH鍵が存在するか確認
$ ls -la ~/.ssh/
id_ed25519  id_ed25519.pub

# 接続テスト
$ ssh -T git@github.com

# ダメなら鍵を再作成
$ ssh-keygen -t ed25519 -C "your.email@example.com"
# 公開鍵をGitHubに再登録
```

---

### エラー2: Your branch is behind

```bash
$ git push
To github.com:YourName/myapp.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'github.com:YourName/myapp.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
```

**📖 意味:** リモートが進んでいる、先にpullが必要

**✅ 解決方法:**

```bash
# 最新を取得
$ git pull origin main

# コンフリクトがあれば解決

# 再度プッシュ
$ git push
```

---

### エラー3: コンフリクト発生

```bash
$ git pull
Auto-merging app.py
CONFLICT (content): Merge conflict in app.py
Automatic merge failed; fix conflicts and then commit the result.
```

**📖 意味:** 同じ箇所を変更して衝突

**✅ 解決方法:**

```bash
# 1. ファイルを開く
$ code app.py

# 2. 衝突箇所を修正
<<<<<<< HEAD
    # 自分の変更
    return "Hello"
=======
    # 他の人の変更
    return "Hi"
>>>>>>> abc1234

# ↓ 修正後
    return "Hello"

# 3. マーカーを削除して保存

# 4. add
$ git add app.py

# 5. commit
$ git commit -m "コンフリクト解決"

# 6. push
$ git push
```

---

### エラー4: Please commit your changes

```bash
$ git pull
error: Your local changes to the following files would be overwritten by merge:
        app.py
Please commit your changes or stash them before you merge.
Aborting
```

**📖 意味:** 未コミットの変更がある

**✅ 解決方法A: コミット**

```bash
$ git add .
$ git commit -m "作業中の変更"
$ git pull
```

**✅ 解決方法B: 一時退避**

```bash
$ git stash
$ git pull
$ git stash pop
```

---

## 📊 完全チートシート {#チートシート}

### 基本操作

```bash
# === ナビゲーション ===
pwd                      # 現在地確認
cd /c/projects           # 絶対パスで移動
cd myapp                 # 相対パスで移動
cd ..                    # 一つ上へ
cd ~                     # ホームへ
cd -                     # 直前の場所へ

# === ファイル・フォルダ ===
ls                       # 一覧表示
ls -la                   # 詳細表示
mkdir myapp              # フォルダ作成
mkdir -p a/b/c           # 階層作成
touch app.py             # ファイル作成
rm file.txt              # ファイル削除
rm -r folder             # フォルダ削除
rm -i file.txt           # 確認して削除
cp a.txt b.txt           # コピー
mv old.txt new.txt       # 移動/リネーム
cat file.txt             # 内容表示
echo "text" > file.txt   # 上書き
echo "text" >> file.txt  # 追記

# === 便利コマンド ===
clear                    # 画面クリア
history                  # コマンド履歴
exit                     # GitBash終了
```

---

### Git基本操作

```bash
# === 初期設定 ===
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
git config --list        # 設定確認

# === リポジトリ作成 ===
git init                 # 初期化
git clone <URL>          # クローン

# === 日常作業 ===
git status               # 状態確認
git add .                # 全て追加
git add file.txt         # 特定ファイル追加
git commit -m "message"  # コミット
git push                 # プッシュ
git pull                 # プル

# === ブランチ ===
git branch               # 一覧
git branch feature/test  # 作成
git checkout main        # 切り替え
git checkout -b test     # 作成+切り替え
git merge feature/test   # マージ
git branch -d test       # 削除

# === 確認 ===
git log                  # 履歴
git log --oneline        # 簡易履歴
git diff                 # 差分確認
git remote -v            # リモート確認

# === 取り消し ===
git restore file.txt     # 変更を破棄
git restore --staged .   # addを取り消し
git reset --soft HEAD~1  # コミットを取り消し
```

---

### GitHub連携

```bash
# === SSH鍵 ===
ssh-keygen -t ed25519 -C "email@example.com"  # 鍵作成
cat ~/.ssh/id_ed25519.pub                      # 公開鍵表示
ssh -T git@github.com                          # 接続テスト

# === リモート操作 ===
git remote add origin <URL>                    # リモート追加
git remote -v                                  # リモート確認
git push -u origin main                        # 初回プッシュ
git push                                       # 以降のプッシュ
git pull origin main                           # プル
```

---

### よく使うパターン

```bash
# === 新規プロジェクト ===
mkdir myapp
cd myapp
git init
touch README.md
git add .
git commit -m "Initial commit"
git remote add origin git@github.com:user/myapp.git
git push -u origin main

# === 既存をクローン ===
git clone git@github.com:user/myapp.git
cd myapp

# === 日常作業 ===
git pull                          # 最新取得
git checkout -b feature/new       # ブランチ作成
# ... コーディング ...
git add .
git commit -m "新機能追加"
git push -u origin feature/new    # プッシュ
# ... GitHubでPR作成 ...

# === コンフリクト解決 ===
git pull
# CONFLICT発生
# ファイルを編集
git add .
git commit -m "コンフリクト解決"
git push

# === 緊急退避 ===
git stash                         # 一時保存
git checkout main
# ... 緊急作業 ...
git checkout -
git stash pop                     # 復元
```

---

## 🎨 図解: Git の仕組み

### 3つのエリア

```
┌─────────────┐  git add   ┌─────────────┐  git commit  ┌─────────────┐
│ Working     │  ───────>  │ Staging     │  ─────────>  │ Repository  │
│ Directory   │            │ Area        │              │ (.git)      │
│ (作業中)     │  <───────  │ (準備中)     │  <─────────  │ (記録済み)   │
└─────────────┘  restore   └─────────────┘   reset      └─────────────┘
                                                               │
                                                               │ git push
                                                               ↓
                                                        ┌─────────────┐
                                                        │   GitHub    │
                                                        │  (Remote)   │
                                                        └─────────────┘
```

---

### ファイルの状態遷移

```
Untracked (未追跡)
    │
    │ git add
    ↓
Staged (ステージング済み)
    │
    │ git commit
    ↓
Committed (コミット済み)
    │
    │ 編集
    ↓
Modified (変更あり)
    │
    │ git add
    ↓
Staged
```

---

### ブランチの動き

```
main       A --- B --- C --- D
                     \
feature               E --- F --- G
                                   \
                                    \ git merge
                                     ↓
main       A --- B --- C --- D --- H (マージコミット)
```

---

## 🎓 実践演習

### 演習1: 新規プロジェクト作成

```bash
# 1. フォルダ作成
cd /c/projects
mkdir todo-app
cd todo-app

# 2. Git初期化
git init

# 3. ファイル作成
touch app.py README.md
echo "# Todo App" > README.md
echo "print('Todo App')" > app.py

# 4. .gitignore作成
cat > .gitignore << EOF
__pycache__/
*.pyc
.env
EOF

# 5. コミット
git add .
git commit -m "Initial commit"

# 6. GitHub連携(GitHubでリポジトリ作成後)
git remote add origin git@github.com:YourName/todo-app.git
git push -u origin main
```

---

### 演習2: ブランチで機能開発

```bash
# 1. 最新を取得
git pull

# 2. ブランチ作成
git checkout -b feature/add-task

# 3. コーディング
echo "def add_task():" >> app.py
echo "    pass" >> app.py

# 4. コミット
git add app.py
git commit -m "タスク追加機能を実装"

# 5. プッシュ
git push -u origin feature/add-task

# 6. GitHubでプルリクエスト作成

# 7. マージ後、ブランチ削除
git checkout main
git pull
git branch -d feature/add-task
```

---

### 演習3: コンフリクト解決

```bash
# 1. ブランチ作成
git checkout -b feature/test

# 2. ファイル編集
echo "line1" > test.txt
git add test.txt
git commit -m "line1追加"

# 3. mainに戻って同じ箇所を編集
git checkout main
echo "lineA" > test.txt
git add test.txt
git commit -m "lineA追加"

# 4. マージしてコンフリクト発生
git merge feature/test
# CONFLICT!

# 5. ファイルを開いて修正
cat test.txt
# <<<<<<< HEAD
# lineA
# =======
# line1
# >>>>>>> feature/test

# 6. 修正
echo "line1とlineAを統合" > test.txt

# 7. コミット
git add test.txt
git commit -m "コンフリクト解決"
```

---

## 📚 さらに学ぶために

### おすすめリソース

**📖 公式ドキュメント:**
- [Git公式サイト](https://git-scm.com/book/ja/v2)
- [GitHub Docs](https://docs.github.com/ja)

**🎮 インタラクティブ学習:**
- [Learn Git Branching](https://learngitbranching.js.org/?locale=ja)
- ゲーム感覚でGitを学べる!

**📝 チートシート:**
- [GitHub Git Cheat Sheet](https://education.github.com/git-cheat-sheet-education.pdf)

---

## 🎉 まとめ

### 覚えるべき基本コマンド TOP10

```bash
1.  pwd              # 現在地確認
2.  cd <path>        # 移動
3.  ls -la           # 一覧表示
4.  git status       # 状態確認
5.  git add .        # ステージング
6.  git commit -m    # コミット
7.  git push         # プッシュ
8.  git pull         # プル
9.  git checkout -b  # ブランチ作成
10. git log          # 履歴確認
```

---

### 困ったときの対処法

```bash
# 1. まず状態確認
git status

# 2. 履歴確認
git log --oneline -5

# 3. 差分確認
git diff

# 4. リモート確認
git remote -v

# 5. それでもダメなら
# エラーメッセージをコピーして
# Google検索 or 先輩に相談!
```

---

### 🚨 やってはいけないこと

```bash
# ❌ 絶対NG!
git push --force                    # 強制プッシュ(チームに迷惑)
rm -rf .git                         # Git履歴削除
git reset --hard origin/main        # ローカルの変更全削除
git commit -am "aaa"                # 適当なメッセージ

# ✅ 代わりにこれ!
git push --force-with-lease         # 安全な強制プッシュ
git stash                           # 一時退避
git reset --soft HEAD~1             # 優しい取り消し
git commit -m "明確なメッセージ"      # わかりやすく
```

---

## 🎯 次のステップ

1. **基本操作をマスター** (この記事の内容)
2. **ブランチ戦略を学ぶ** (Git Flow等)
3. **プルリクエストの作法**
4. **コードレビューの受け方**
5. **CI/CD連携**

---

**作成者:** Git/GitBash/Windows専門家  
**対象読者:** プログラミング初心者〜中級者  
**最終更新:** 2025年10月9日

**Happy Coding! 🚀**
