すばらしい質問です🌸
ここでは、**Git Bashを初めて使う新人エンジニアさん向けに**、
📘「フォルダ操作」＋🐍「Pythonファイル実行」までを、
**読み方・意味付きでやさしくステップバイステップ解説**します🐰✨

---

# 🧭 目次

1. Git Bashとは？（読み方・特徴）
2. カレントディレクトリとは
3. 基本コマンド一覧（読み方つき）
4. フォルダ作成・移動ステップ
5. Pythonファイルの実行方法
6. トラブル時の対処法

---

## 1️⃣ Git Bashとは？

| 項目   | 内容                                 |
| ---- | ---------------------------------- |
| 読み方  | ギット・バッシュ                           |
| 意味   | Linux風のコマンドをWindowsで使えるターミナル（黒い画面） |
| 主な役割 | Git操作・ファイル操作・Python実行などを行う         |

Git Bashは、**Windowsのコマンドプロンプトよりも高機能**で、
開発者がよく使う **「Linux風の操作コマンド」** が使えます。

---

## 2️⃣ カレントディレクトリとは？

📁「いま自分が立っているフォルダ（作業場所）」のことです。

確認コマンド👇

```bash
pwd
```

**読み方**：「ピー・ダブリュー・ディー」＝ *print working directory*
➡ 今いるフォルダの場所を表示します。

---

## 3️⃣ 基本コマンド一覧（読み方つき）

| コマンド              | 読み方           | 意味・動作           |
| ----------------- | ------------- | --------------- |
| `ls`              | エルエス          | フォルダ内のファイル一覧を表示 |
| `cd フォルダ名`        | シー・ディー        | 指定フォルダに移動       |
| `cd ..`           | シー・ディー・ドットドット | 1つ上の階層に戻る       |
| `pwd`             | ピーダブリューディー    | 現在のフォルダ（パス）を表示  |
| `mkdir フォルダ名`     | メイク・ディア       | 新しいフォルダを作る      |
| `rm ファイル名`        | アールエム         | ファイルを削除（⚠注意）    |
| `clear`           | クリア           | 画面をきれいに消す       |
| `python ファイル名.py` | パイソン          | Pythonファイルを実行する |

---

## 4️⃣ フォルダ作成・移動ステップ

### 🧩 ステップ1：デスクトップに移動

```bash
cd ~/Desktop
```

📘 読み方：「シーディー チルダ スラッシュ デスクトップ」
➡ `~` は「ホームフォルダ」、`Desktop` はデスクトップ。

---

### 🧩 ステップ2：新しいフォルダを作成

```bash
mkdir python_test
```

📘 読み方：「メイク・ディア パイソン・テスト」
➡ デスクトップ上に「python_test」フォルダが作成されます。

---

### 🧩 ステップ3：作ったフォルダに移動

```bash
cd python_test
```

📘 読み方：「シー・ディー パイソン・テスト」
➡ そのフォルダに入ります。

---

### 🧩 ステップ4：ファイルを確認

```bash
ls
```

📘 読み方：「エル・エス」
➡ 中身を一覧表示（まだ何もない状態です）。

---

## 5️⃣ Pythonファイルの実行方法

### 🧩 ステップ1：Pythonファイルを作成

エディタ（VSCodeやメモ帳など）で、次の内容を保存します。
例：`hello.py`

```python
print("こんにちは！Git BashからPythonを実行しました🐍")
```

保存場所：さきほど作った `python_test` フォルダ内。

---

### 🧩 ステップ2：ファイルを確認

```bash
ls
```

➡ `hello.py` が見えたらOK。

---

### 🧩 ステップ3：Pythonを実行

```bash
python hello.py
```

出力：

```
こんにちは！Git BashからPythonを実行しました🐍
```

📘 読み方：「パイソン・ヘロー・ドット・ピー・ワイ」

---

## 6️⃣ トラブル発生時の対応 🩺

| 状況                            | 原因                      | 対処法                            |
| ----------------------------- | ----------------------- | ------------------------------ |
| ❌ `python: command not found` | Python未インストールまたはPATH未設定 | Pythonを再インストールして「PATHに追加」にチェック |
| ❌ `No such file or directory` | フォルダやファイルの場所が違う         | `pwd`で現在地を確認し、`cd`で移動し直す       |
| ❌ `Permission denied`         | ファイルにアクセス権がない           | `chmod 755 ファイル名.py`（※通常不要）    |
| ❌ 文字化け                        | 日本語出力の文字コード問題           | PythonファイルをUTF-8で保存            |

---

## 🌷 よく使うGit Bashコマンドまとめ

| 操作内容       | コマンド              | 意味            |
| ---------- | ----------------- | ------------- |
| カレントフォルダ確認 | `pwd`             | 今どこにいる？       |
| ファイル一覧表示   | `ls`              | 何がある？         |
| フォルダ作成     | `mkdir フォルダ名`     | 新しいフォルダを作る    |
| フォルダ移動     | `cd フォルダ名`        | 指定フォルダへ移動     |
| 1つ上に戻る     | `cd ..`           | 上の階層へ         |
| Python実行   | `python ファイル名.py` | Pythonプログラム実行 |

---

## 🧠 まとめ

* Git Bashは **Linux風のコマンドで操作できる黒い画面**。
* `cd`で移動、`mkdir`でフォルダ作成、`python`で実行。
* `pwd`と`ls`で「今どこ？」と「中身なに？」を確認。
* エラー時は**パスとPython環境**をまずチェック！

---

もし次のステップとして、
🔹「Git BashでPython仮想環境を作る方法（venv編）」
🔹「Git BashでGit操作（add／commit／push）練習」
のどちらかに進みたい場合、どちらをやりたいですか？
