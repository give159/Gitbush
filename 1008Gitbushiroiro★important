# Git初心者が1人でチーム開発できる完全ガイド

## 📋 目次(MECE構造)

```
1. 事前準備(インストール・初期設定)
2. プロジェクト開始(クローン・初回セットアップ)
3. 日常開発(ブランチ作成→コード変更→コミット→プッシュ)
4. チーム連携(プル・マージ・コンフリクト解決)
5. トラブルシューティング(よくあるエラーと対処)
```

---

## 🎯 第1章: 事前準備(初日のみ)

### Step 1-1: Git のインストール確認

```bash
# Git Bashを開く
# デスクトップで右クリック → "Git Bash Here"

# バージョン確認
git --version
```

**表示例:**
```
git version 2.42.0.windows.1
```

**もし表示されない場合:**
→ https://git-scm.com/ からダウンロード&インストール

---

### Step 1-2: 初期設定(名前とメールアドレス)

```bash
# あなたの名前を設定(コミットに表示される)
git config --global user.name "Yamada Taro"

# あなたのメールアドレスを設定(GitHubと同じものを推奨)
git config --global user.email "yamada@example.com"

# 設定確認
git config --global --list
```

**表示例:**
```
user.name=Yamada Taro
user.email=yamada@example.com
```

---

### Step 1-3: 日本語文字化け防止

```bash
# 日本語ファイル名が文字化けしないように
git config --global core.quotepath false

# 改行コードの自動変換設定(Windows)
git config --global core.autocrlf true

# デフォルトブランチ名をmainに設定
git config --global init.defaultBranch main
```

---

### Step 1-4: エディタ設定(VSCode推奨)

```bash
# VSCodeをデフォルトエディタに
git config --global core.editor "code --wait"

# 確認
git config --global core.editor
```

---

### Step 1-5: SSH鍵の作成(GitHub用)

```bash
# SSHディレクトリの確認
ls -la ~/.ssh/

# 鍵が無い場合は作成
ssh-keygen -t ed25519 -C "yamada@example.com"

# 質問が出たらすべてEnterでOK(パスフレーズは空でも可)
```

**表示:**
```
Enter file in which to save the key (/c/Users/YourName/.ssh/id_ed25519): 
→ Enter

Enter passphrase (empty for no passphrase): 
→ Enter(または任意のパスワード)

Enter same passphrase again: 
→ Enter(または同じパスワード)
```

---

### Step 1-6: 公開鍵をGitHubに登録

```bash
# 公開鍵の内容を表示(全部コピーする)
cat ~/.ssh/id_ed25519.pub
```

**表示例:**
```
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yamada@example.com
```

**GitHubでの設定:**
```
1. GitHub にログイン
2. 右上のアイコン → Settings
3. 左メニュー → SSH and GPG keys
4. "New SSH key" をクリック
5. Title: 任意の名前(例: My-Laptop)
6. Key: コピーした公開鍵を貼り付け
7. "Add SSH key" をクリック
```

**接続テスト:**
```bash
ssh -T git@github.com
```

**成功時の表示:**
```
Hi YourName! You've successfully authenticated, but GitHub does not provide shell access.
```

---

## 📥 第2章: プロジェクト開始(初回のみ)

### Step 2-1: 作業フォルダの準備

```bash
# Cドライブにprojectsフォルダを作成
mkdir -p /c/projects

# 移動
cd /c/projects

# 現在地確認
pwd
```

**表示:**
```
/c/projects
```

---

### Step 2-2: GitHubからプロジェクトをクローン

**GitHubでSSH URLを取得:**
```
1. プロジェクトのGitHubページを開く
2. 緑色の "Code" ボタンをクリック
3. "SSH" を選択
4. URLをコピー(例: git@github.com:company/project.git)
```

```bash
# プロジェクトをクローン
git clone git@github.com:company/project.git

# プロジェクトフォルダに移動
cd project

# 確認
ls -la
```

**表示例:**
```
.git/
README.md
src/
requirements.txt
```

---

### Step 2-3: Python仮想環境のセットアップ

```bash
# Pythonバージョン確認
python --version

# 仮想環境作成
python -m venv venv

# 仮想環境有効化(Git Bash)
source venv/Scripts/activate

# 有効化の確認(プロンプトに(venv)が表示される)
```

**表示:**
```
(venv) user@PC MINGW64 /c/projects/project
$
```

```bash
# 依存パッケージのインストール
pip install -r requirements.txt

# インストール確認
pip list
```

---

### Step 2-4: プロジェクト構造の確認

```bash
# ツリー表示(全体像を把握)
ls -R

# または
find . -type f -name "*.py"
```

**表示例:**
```
./src/main.py
./src/models/user.py
./src/utils/helper.py
./tests/test_main.py
```

---

## 💻 第3章: 日常開発フロー(毎日使う)

### 【朝の作業開始】

#### Step 3-1: プロジェクトフォルダへ移動

```bash
# フォルダで右クリック → "Git Bash Here"
# または

cd /c/projects/project

# 仮想環境有効化
source venv/Scripts/activate
```

#### Step 3-2: 最新のコードを取得

```bash
# 現在のブランチを確認
git branch

# mainブランチにいることを確認
# もしいなければ
git checkout main

# 最新のコードを取得
git pull origin main
```

**表示例:**
```
From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```

---

### 【新しいタスク開始】

#### Step 3-3: 作業用ブランチを作成

```bash
# ブランチ名の命名規則(チームに確認)
# 例: feature/機能名, fix/バグ名, update/更新内容

# 新しいブランチ作成と切り替え
git checkout -b feature/add-login-function

# 確認
git branch
```

**表示:**
```
  main
* feature/add-login-function
```

---

### 【コード編集】

#### Step 3-4: Pythonファイルの作成・編集

```bash
# 新しいファイル作成
touch src/login.py

# VSCodeで開く
code src/login.py

# またはVimで編集
vim src/login.py
```

**login.py の例:**
```python
def login(username, password):
    """ログイン処理"""
    if username and password:
        return True
    return False

if __name__ == "__main__":
    result = login("user", "pass")
    print(f"ログイン結果: {result}")
```

---

### 【変更の確認とコミット】

#### Step 3-5: 変更されたファイルを確認

```bash
# 状態確認(最も重要なコマンド!)
git status
```

**表示例:**
```
On branch feature/add-login-function
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        src/login.py

nothing added to commit but untracked files present
```

#### Step 3-6: 差分を確認

```bash
# 変更内容を確認
git diff

# 新規ファイルは表示されないので
cat src/login.py
```

#### Step 3-7: ファイルをステージング

```bash
# 特定のファイルを追加
git add src/login.py

# または全ての変更を追加
git add .

# 確認
git status
```

**表示:**
```
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
```

#### Step 3-8: コミット

```bash
# コミットメッセージは日本語でOK
git commit -m "ログイン機能を追加"

# または詳細なメッセージ
git commit -m "ログイン機能を追加

- username と password を受け取る
- 両方が存在する場合のみTrueを返す
- テストケースは後で追加予定"
```

**表示:**
```
[feature/add-login-function abc1234] ログイン機能を追加
 1 file changed, 10 insertions(+)
 create mode 100644 src/login.py
```

---

### 【GitHubにプッシュ】

#### Step 3-9: リモートにプッシュ

```bash
# 初回プッシュ(ブランチを作成してプッシュ)
git push -u origin feature/add-login-function

# 2回目以降は
git push
```

**表示:**
```
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 456 bytes | 456.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
To github.com:company/project.git
 * [new branch]      feature/add-login-function -> feature/add-login-function
```

---

### 【複数回コミットする場合】

```bash
# ファイル編集
code src/login.py

# 確認
git status
git diff

# 追加
git add src/login.py

# コミット
git commit -m "ログイン時のエラーハンドリングを追加"

# プッシュ
git push
```

---

## 🤝 第4章: チーム連携

### 【他の人の変更を取り込む】

#### Step 4-1: リモートの最新情報を取得

```bash
# 情報だけ取得(まだマージしない)
git fetch origin

# 確認
git status
```

**表示例:**
```
Your branch is behind 'origin/main' by 3 commits
```

#### Step 4-2: 変更を取り込む

```bash
# mainブランチに切り替え
git checkout main

# 最新を取得してマージ
git pull origin main

# 自分のブランチに戻る
git checkout feature/add-login-function

# mainの変更を自分のブランチに取り込む
git merge main
```

**成功時:**
```
Already up to date.
```

---

### 【コンフリクトが発生した場合】

#### Step 4-3: コンフリクトの確認

```bash
# マージ時にコンフリクト発生
git merge main
```

**表示:**
```
Auto-merging src/login.py
CONFLICT (content): Merge conflict in src/login.py
Automatic merge failed; fix conflicts and then commit the result.
```

```bash
# コンフリクトファイルを確認
git status
```

**表示:**
```
Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   src/login.py
```

#### Step 4-4: コンフリクトの解決

```bash
# ファイルを開く
code src/login.py
```

**ファイルの中身:**
```python
def login(username, password):
<<<<<<< HEAD
    # あなたの変更
    if not username or not password:
        raise ValueError("入力が空です")
    return authenticate(username, password)
=======
    # 他の人の変更
    if username and password:
        return verify_user(username, password)
    return False
>>>>>>> main
```

**修正後(両方の良いところを取る):**
```python
def login(username, password):
    # 入力チェック
    if not username or not password:
        raise ValueError("入力が空です")
    
    # 認証処理
    return verify_user(username, password)
```

#### Step 4-5: コンフリクト解決後

```bash
# マーカー(<<<<, ====, >>>>)を全削除したか確認
cat src/login.py

# ファイルを追加
git add src/login.py

# 状態確認
git status

# コミット
git commit -m "コンフリクトを解決: ログイン機能をマージ"

# プッシュ
git push
```

---

## 🆘 第5章: トラブルシューティング

### トラブル1: git pullできない

**エラー:**
```
error: Your local changes to the following files would be overwritten by merge:
        src/login.py
```

**原因:** 未コミットの変更がある

**解決:**
```bash
# 方法1: 変更をコミットしてからpull
git add .
git commit -m "作業中の変更を保存"
git pull origin main

# 方法2: 一時的に変更を退避
git stash
git pull origin main
git stash pop
```

---

### トラブル2: 間違えてコミットした

**シナリオ:** コミットメッセージを間違えた

```bash
# 直前のコミットメッセージを修正
git commit --amend -m "正しいメッセージ"

# まだpushしていない場合のみ!
```

**シナリオ:** ファイルを追加し忘れた

```bash
# ファイルを追加
git add 忘れたファイル.py

# 直前のコミットに追加
git commit --amend --no-edit
```

---

### トラブル3: pushできない

**エラー:**
```
To github.com:company/project.git
 ! [rejected]        feature/my-work -> feature/my-work (fetch first)
```

**原因:** リモートに新しいコミットがある

**解決:**
```bash
# 最新を取得
git pull origin feature/my-work

# コンフリクトがなければ自動マージ
# コンフリクトがあれば解決後

# 再度プッシュ
git push
```

---

### トラブル4: ブランチを間違えた

**シナリオ:** mainブランチで直接作業してしまった

```bash
# 現在のブランチを確認
git branch
# * main  ← まずい!

# 新しいブランチを作成(今の変更を持っていく)
git checkout -b feature/my-work

# これでmainには変更が残らない
```

**シナリオ:** コミット前

```bash
# 変更を一時退避
git stash

# 正しいブランチに切り替え
git checkout 正しいブランチ名

# 変更を戻す
git stash pop
```

---

### トラブル5: ファイルを削除してしまった

**シナリオ:** まだコミットしていない

```bash
# 特定ファイルを復元
git checkout -- ファイル名.py

# 全ファイルを復元
git checkout -- .
```

**シナリオ:** コミット済み

```bash
# 直前のコミットを取り消す(変更は残る)
git reset --soft HEAD^

# ファイルを復元
git checkout -- ファイル名.py
```

---

### トラブル6: リモートURLが間違っている

```bash
# 現在のURL確認
git remote -v

# 変更
git remote set-url origin git@github.com:正しいユーザー名/正しいリポジトリ名.git

# 確認
git remote -v
```

---

### トラブル7: SSH接続できない

**エラー:**
```
Permission denied (publickey).
```

**解決手順:**

```bash
# Step 1: SSH鍵の確認
ls -la ~/.ssh/

# id_ed25519 と id_ed25519.pub があるか確認

# Step 2: SSH Agentに鍵を登録
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

# Step 3: 接続テスト
ssh -T git@github.com

# Step 4: それでもダメなら公開鍵を再登録
cat ~/.ssh/id_ed25519.pub
# 出力をコピーしてGitHubに再登録
```

---

### トラブル8: .gitignoreが効かない

**問題:** 既にコミットしたファイルは無視されない

```bash
# キャッシュから削除(ファイル自体は残る)
git rm --cached ファイル名.py

# または全ファイル
git rm -r --cached .

# .gitignoreを追加
echo "venv/" >> .gitignore
echo "*.pyc" >> .gitignore
echo "__pycache__/" >> .gitignore

# 再度追加
git add .

# コミット
git commit -m ".gitignoreを適用"
```

---

### トラブル9: マージを中止したい

```bash
# マージ中止
git merge --abort

# rebase中止
git rebase --abort

# 元の状態に戻る
git checkout main
```

---

### トラブル10: すべてをリセットしたい

**⚠️ 注意: 全ての変更が消えます**

```bash
# ローカルの変更を全て破棄
git reset --hard HEAD

# リモートと完全に同期
git fetch origin
git reset --hard origin/main
```

---

## 📝 第6章: 完全チートシート(コピペ用)

### 【毎日使う基本コマンド】

```bash
# 1. プロジェクトへ移動
cd /c/projects/project

# 2. 仮想環境有効化
source venv/Scripts/activate

# 3. 状態確認
git status

# 4. 最新取得
git pull origin main

# 5. ブランチ作成
git checkout -b feature/新機能名

# 6. コード編集後、確認
git status
git diff

# 7. 追加
git add .

# 8. コミット
git commit -m "コミットメッセージ"

# 9. プッシュ
git push -u origin feature/新機能名

# 10. 2回目以降
git push
```

---

### 【.gitignore テンプレート(Python)】

```bash
# .gitignoreファイル作成
cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/
*.egg-info/
dist/
build/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Environment
.env
.env.local

# Logs
*.log

# Database
*.db
*.sqlite3
EOF

# 確認
cat .gitignore
```

---

### 【よく使うGit Bashコマンド】

```bash
# フォルダ操作
pwd                    # 現在地表示
ls                     # ファイル一覧
ls -la                 # 詳細一覧(隠しファイル含む)
cd フォルダ名           # 移動
cd ..                  # 1つ上へ
cd ~                   # ホームへ
mkdir フォルダ名        # フォルダ作成

# ファイル操作
touch ファイル名.py     # 空ファイル作成
cat ファイル名.py       # 内容表示
code ファイル名.py      # VSCodeで開く
rm ファイル名.py        # 削除

# Git操作
git status             # 状態確認
git log --oneline -10  # 履歴表示
git branch             # ブランチ一覧
git diff               # 差分表示
```

---

## 🎯 第7章: 1日の完全フロー(実践例)

### 朝(9:00)

```bash
# Git Bash起動(プロジェクトフォルダで右クリック)

# 仮想環境有効化
source venv/Scripts/activate

# mainブランチへ
git checkout main

# 最新取得
git pull origin main

# 確認
git log --oneline -5
```

---

### タスク開始(9:30)

```bash
# タスク: issue #123 ユーザー登録機能

# ブランチ作成
git checkout -b feature/issue-123-user-registration

# 確認
git branch
```

---

### 開発(10:00-11:30)

```bash
# ファイル作成
touch src/registration.py

# 編集
code src/registration.py

# 【registration.py の内容】
"""
def register_user(username, email, password):
    '''新規ユーザー登録'''
    if not all([username, email, password]):
        raise ValueError("全ての項目を入力してください")
    
    # データベース保存処理(後で実装)
    return {"username": username, "email": email}
"""

# 動作確認
python src/registration.py

# テスト作成
code tests/test_registration.py

# テスト実行
pytest tests/test_registration.py
```

---

### 昼休み前にコミット(11:45)

```bash
# 状態確認
git status

# 差分確認
git diff

# 追加
git add src/registration.py tests/test_registration.py

# コミット
git commit -m "ユーザー登録機能の基本実装

- registration.py を追加
- 入力バリデーション実装
- テストケース追加"

# プッシュ
git push -u origin feature/issue-123-user-registration
```

---

### 午後、機能追加(13:00-15:00)

```bash
# ファイル編集
code src/registration.py

# 追加機能を実装...

# 確認
git status
git diff

# コミット
git add src/registration.py
git commit -m "メール重複チェック機能を追加"
git push
```

---

### 他の人の変更を取り込む(15:30)

```bash
# mainに新しい変更があるか確認
git fetch origin

# mainの変更を取り込む
git checkout main
git pull origin main

# 自分のブランチに戻る
git checkout feature/issue-123-user-registration

# mainの変更をマージ
git merge main

# コンフリクトがあれば解決
# なければ
git push
```

---

### 完成、プルリクエスト作成(16:00)

```bash
# 最終確認
git status
git log --oneline -5

# GitHub でプルリクエスト作成
# 1. GitHubのプロジェクトページを開く
# 2. "Pull requests" タブ
# 3. "New pull request"
# 4. base: main ← compare: feature/issue-123-user-registration
# 5. タイトルと説明を記入
# 6. "Create pull request"
```

---

### 終業前(17:30)

```bash
# 作業中の変更を一時保存
git stash

# mainに戻る
git checkout main

# 最新を取得
git pull origin main

# 翌日の準備
# (翌朝 git stash pop で作業再開)
```

---

## 🔍 第8章: requirements.txt の管理

### 新しいパッケージをインストールした時

```bash
# パッケージインストール
pip install requests

# requirements.txt を更新
pip freeze > requirements.txt

# Gitに追加
git add requirements.txt
git commit -m "requestsパッケージを追加"
git push
```

### 他の人が追加したパッケージをインストール

```bash
# 最新のコードを取得
git pull origin main

# パッケージをインストール
pip install -r requirements.txt
```

---

## 📚 第9章: コミットメッセージのベストプラクティス

### 良いメッセージの例

```bash
# ✅ 明確で具体的
git commit -m "ログイン時のエラーハンドリングを追加"

# ✅ 何をしたか + なぜしたか
git commit -m "パスワード検証を強化

- 最低8文字以上を必須に
- 数字と記号を1文字以上含むように
- セキュリティ要件(issue #45)に対応"

# ✅ プレフィックスを使う
git commit -m "feat: ユーザー登録機能を追加"
git commit -m "fix: ログインバグを修正"
git commit -m "docs: READMEを更新"
git commit -m "test: ログインテストを追加"
```

### 悪いメッセージの例

```bash
# ❌ 抽象的すぎ
git commit -m "修正"
git commit -m "更新"
git commit -m "変更"

# ❌ 意味不明
git commit -m "aaa"
git commit -m "テスト"
git commit -m "とりあえず"
```

---

## 🎓 第10章: 覚えておくべき重要ポイント

### 1. コミット前の確認

```bash
# 必ず実行!
git status    # 何が変わったか
git diff      # どう変わったか
```

### 2. こまめなコミット

```bash
# ❌ 1日の終わりに1回だけ
# ✅ 機能単位で小まめに(1-2時間おき)
```

### 3. mainブランチで直接作業しない

```bash
# ❌ 
git checkout main
# コード編集...

# ✅
git checkout -b feature/my-work
# コード編集...
```

### 4. プッシュ前に最新を取得

```bash
git fetch origin
git merge main
git push
```

### 5. わからなくなったら

```bash
# 1. 現状確認
git status

# 2. ログ確認
git log --oneline -10

# 3. 先輩に相談(画面を見せる)
```

---

## 🆘 困ったときのコマンド集

```bash
# 全てを元に戻す(⚠️変更は全て消える)
git reset --hard HEAD
git clean -fd

# コミットを取り消す(変更は残る)
git reset --soft HEAD^

# 直前の操作を取り消す
git reflog
git reset --hard HEAD@{1}

# ブランチを削除
git branch -d ブランチ名

# 強制削除
git branch -D ブランチ名

# リモートブランチを削除
git push origin --delete ブランチ名

# 別のブランチのファイルを取得
git checkout 他のブランチ名 -- ファイル名.py
```

---

これで、チーム開発でPythonファイルをコミットするまでの全ての手順が完了です!

**次のステップ:**
1. まずこのガイドを見ながら1回通してやってみる
2. 毎日の開発フローを3日間繰り返す
3. わからないことは都度このガイドを見返す
4. 慣れてきたら先輩に質問してチーム独自のルールを学ぶ


いいですね — めちゃくちゃ実用的なリクエスト！🎯
以下は **Git Bash（Windows）で新人エンジニアが最初に覚えるべき操作** を、図解（ASCII）＋そのままコピペできるコマンドでまとめた超実践ガイドです。
まずは「開く → 移動 → 作る → 編集 → 確認 → 消す」までを手を動かしながら習得しましょう。

# 開始（Git Bash を開く）

* スタートメニュー → 「Git Bash」をクリック で起動。
* 起動後に表示される黒い画面がターミナル（ここでコマンドを打ちます）。

---

# 1) 現在位置の確認 / 階層移動（基本）

```bash
pwd            # Print Working Directory : 今いる場所（パス）を表示
ls             # 現在のフォルダの中身を一覧表示
ls -la         # 隠しファイルも含めて詳しく表示
cd ディレクトリ名   # そのディレクトリへ移動
cd ..          # 一つ上の階層へ移動
cd ~           # ホームディレクトリへ移動
cd /c/Users     # Cドライブ配下を参照（Windowsでは C: -> /c/）
```

**例（コピペで実行）**

```bash
# ホームに移動して確認
cd ~
pwd
ls -la
```

**ヒント**

* Tabキーで補完できます（ディレクトリ名を途中まで入力して Tab → 自動補完）。便利！

---

# 2) ディレクトリ作成・階層の見た目（図解）

ASCIIでフォルダ構成イメージ：

```
myproject/
├── README.md
├── src/
│   └── app.py
└── tests/
    └── test_app.py
```

**作るコマンド**

```bash
mkdir myproject                # myproject フォルダを作る
cd myproject
mkdir src tests                # src と tests を同時に作る
touch README.md src/app.py     # 空ファイルを作る (touch が使える環境)
```

---

# 3) ファイルの作成（3パターン — 好きな方法で）

### A) 空ファイルを作る (最も簡単)

```bash
touch hello.py
```

### B) 中身を一行だけ作る（echo）

```bash
echo 'print("Hello, world!")' > hello.py   # 新規作成（上書き）
echo '# 追記行' >> hello.py               # 追記（末尾に追加）
```

### C) 複数行を一括で作る（ヒアドキュメント）

```bash
cat > src/app.py <<'EOF'
def hello():
    print("Hello, Git Bash!")

if __name__ == "__main__":
    hello()
EOF
```

（`Ctrl+C` は不要。EOF の行が終われば自動で保存終了）

---

# 4) ファイル編集（ターミナル内・外部エディタ）

### ターミナル内で編集：`nano`（初心者向け）

```bash
nano src/app.py
# nano の保存方法: Ctrl + O → Enter、終了: Ctrl + X
```

> nano は直感的。`Ctrl+O`で保存、`Ctrl+X`で終了。

### 高機能エディタを使う（VSCode）

```bash
code .    # ※VSCodeがインストールされ、'code'がPATHに登録されている場合
```

* `code .` はプロジェクト全体をVSCodeで開くコマンド。
* もし `code` が使えなければ、VSCode 内の「ファイル → フォルダを開く」で開いてOK。

---

# 5) ファイルの中身を見る（確認系）

```bash
cat src/app.py        # ファイルの中身を出力（全部）
less src/app.py       # ページ送りで見る（qで終了）
head -n 20 src/app.py # 上から20行だけ見る
tail -n 20 src/app.py # 下から20行だけ見る
```

---

# 6) 実行して動作確認（Pythonファイルの場合）

```bash
python src/app.py    # Windows環境では 'python' で動くことが多い
# または
python3 src/app.py
```

> エラーが出たら編集して修正 → 再度実行。

---

# 7) 名前変更・コピー・削除

```bash
mv oldname.py newname.py   # ファイル名変更（移動）
cp src/app.py src/app.bak  # コピー
rm file_to_delete.py       # 削除（注意！）
rm -rf folder_to_delete    # フォルダごと削除（危険。よく確認）
```

---

# 8) よく使う便利コマンド（作業効率UP）

```bash
ls -lh            # サイズ付きで一覧（人が読みやすい単位）
tree              # デフォルトでは入っていないことが多い（代替: ls -R）
find . -maxdepth 2 -type f   # ファイルを検索（深さ指定）
touch .gitkeep     # 空ディレクトリを git 管理したいとき
```

---

# 9) 実践ワークフロー（サンプル：簡単なプロジェクト作成）

そのままコピペで試せる一連の流れ：

```bash
# 1. プロジェクト作成
cd ~
mkdir myproject
cd myproject

# 2. ディレクトリとファイルを作る
mkdir src tests
cat > src/app.py <<'PY'
def hello():
    print("Hello from myproject!")

if __name__ == "__main__":
    hello()
PY

# 3. 中身を確認・実行
ls -la
cat src/app.py
python src/app.py

# 4. (オプション) Git 管理を始める
git init
git add .
git commit -m "初期コミット: myproject 作成"
```

---

# 10) トラブル＆Tips（新人がハマりやすいポイント）

* **ファイルが見つからない** → `pwd`で今の場所を確認してから `ls` で中身を確認。
* **日本語ファイル名やスペース** → ファイル名にスペースがある場合は `"my file.py"` のようにクオートする。
* **編集したのに反映されない** → 保存していないだけ（エディタで Ctrl+S）。
* **Windowsのドライブ** → `C:\` は Git Bash では `/c/`。例: `cd /c/Users/あなたのユーザー名/Desktop`
* **権限の問題** → Windowsではあまり気にしないが、実行許可が必要なスクリプトは `chmod +x script.sh`。

---

# まとめ（コピペ用「最小限セット」）

```bash
# よく使う：移動・一覧・作る・編集・実行
pwd
ls -la
cd path/to/folder
mkdir myproject && cd myproject
touch hello.py
nano hello.py              # 保存: Ctrl+O → Enter、終了: Ctrl+X
cat > hello.py <<'EOF'
print("hello")
EOF
python hello.py
mv hello.py main.py
cp main.py main.bak
rm main.bak
```

---

必要なら次を作ります：

* ✅ VSCode での具体的な設定（`code` コマンドを使えるようにする方法）
* ✅ Git と組み合わせたワークフロー（`git add` → `commit` → `push` の実演）
* ✅ コンフリクトが起きたときに Git Bash 上でどう解決するか（実例）

どれを先に見たい？（迷わず選んでOK — そのまま次を出します）


いいですね — めちゃくちゃ実用的なリクエスト！🎯
以下は **Git Bash（Windows）で新人エンジニアが最初に覚えるべき操作** を、図解（ASCII）＋そのままコピペできるコマンドでまとめた超実践ガイドです。
まずは「開く → 移動 → 作る → 編集 → 確認 → 消す」までを手を動かしながら習得しましょう。

# 開始（Git Bash を開く）

* スタートメニュー → 「Git Bash」をクリック で起動。
* 起動後に表示される黒い画面がターミナル（ここでコマンドを打ちます）。

---

# 1) 現在位置の確認 / 階層移動（基本）

```bash
pwd            # Print Working Directory : 今いる場所（パス）を表示
ls             # 現在のフォルダの中身を一覧表示
ls -la         # 隠しファイルも含めて詳しく表示
cd ディレクトリ名   # そのディレクトリへ移動
cd ..          # 一つ上の階層へ移動
cd ~           # ホームディレクトリへ移動
cd /c/Users     # Cドライブ配下を参照（Windowsでは C: -> /c/）
```

**例（コピペで実行）**

```bash
# ホームに移動して確認
cd ~
pwd
ls -la
```

**ヒント**

* Tabキーで補完できます（ディレクトリ名を途中まで入力して Tab → 自動補完）。便利！

---

# 2) ディレクトリ作成・階層の見た目（図解）

ASCIIでフォルダ構成イメージ：

```
myproject/
├── README.md
├── src/
│   └── app.py
└── tests/
    └── test_app.py
```

**作るコマンド**

```bash
mkdir myproject                # myproject フォルダを作る
cd myproject
mkdir src tests                # src と tests を同時に作る
touch README.md src/app.py     # 空ファイルを作る (touch が使える環境)
```

---

# 3) ファイルの作成（3パターン — 好きな方法で）

### A) 空ファイルを作る (最も簡単)

```bash
touch hello.py
```

### B) 中身を一行だけ作る（echo）

```bash
echo 'print("Hello, world!")' > hello.py   # 新規作成（上書き）
echo '# 追記行' >> hello.py               # 追記（末尾に追加）
```

### C) 複数行を一括で作る（ヒアドキュメント）

```bash
cat > src/app.py <<'EOF'
def hello():
    print("Hello, Git Bash!")

if __name__ == "__main__":
    hello()
EOF
```

（`Ctrl+C` は不要。EOF の行が終われば自動で保存終了）

---

# 4) ファイル編集（ターミナル内・外部エディタ）

### ターミナル内で編集：`nano`（初心者向け）

```bash
nano src/app.py
# nano の保存方法: Ctrl + O → Enter、終了: Ctrl + X
```

> nano は直感的。`Ctrl+O`で保存、`Ctrl+X`で終了。

### 高機能エディタを使う（VSCode）

```bash
code .    # ※VSCodeがインストールされ、'code'がPATHに登録されている場合
```

* `code .` はプロジェクト全体をVSCodeで開くコマンド。
* もし `code` が使えなければ、VSCode 内の「ファイル → フォルダを開く」で開いてOK。

---

# 5) ファイルの中身を見る（確認系）

```bash
cat src/app.py        # ファイルの中身を出力（全部）
less src/app.py       # ページ送りで見る（qで終了）
head -n 20 src/app.py # 上から20行だけ見る
tail -n 20 src/app.py # 下から20行だけ見る
```

---

# 6) 実行して動作確認（Pythonファイルの場合）

```bash
python src/app.py    # Windows環境では 'python' で動くことが多い
# または
python3 src/app.py
```

> エラーが出たら編集して修正 → 再度実行。

---

# 7) 名前変更・コピー・削除

```bash
mv oldname.py newname.py   # ファイル名変更（移動）
cp src/app.py src/app.bak  # コピー
rm file_to_delete.py       # 削除（注意！）
rm -rf folder_to_delete    # フォルダごと削除（危険。よく確認）
```

---

# 8) よく使う便利コマンド（作業効率UP）

```bash
ls -lh            # サイズ付きで一覧（人が読みやすい単位）
tree              # デフォルトでは入っていないことが多い（代替: ls -R）
find . -maxdepth 2 -type f   # ファイルを検索（深さ指定）
touch .gitkeep     # 空ディレクトリを git 管理したいとき
```

---

# 9) 実践ワークフロー（サンプル：簡単なプロジェクト作成）

そのままコピペで試せる一連の流れ：

```bash
# 1. プロジェクト作成
cd ~
mkdir myproject
cd myproject

# 2. ディレクトリとファイルを作る
mkdir src tests
cat > src/app.py <<'PY'
def hello():
    print("Hello from myproject!")

if __name__ == "__main__":
    hello()
PY

# 3. 中身を確認・実行
ls -la
cat src/app.py
python src/app.py

# 4. (オプション) Git 管理を始める
git init
git add .
git commit -m "初期コミット: myproject 作成"
```

---

# 10) トラブル＆Tips（新人がハマりやすいポイント）

* **ファイルが見つからない** → `pwd`で今の場所を確認してから `ls` で中身を確認。
* **日本語ファイル名やスペース** → ファイル名にスペースがある場合は `"my file.py"` のようにクオートする。
* **編集したのに反映されない** → 保存していないだけ（エディタで Ctrl+S）。
* **Windowsのドライブ** → `C:\` は Git Bash では `/c/`。例: `cd /c/Users/あなたのユーザー名/Desktop`
* **権限の問題** → Windowsではあまり気にしないが、実行許可が必要なスクリプトは `chmod +x script.sh`。

---

# まとめ（コピペ用「最小限セット」）

```bash
# よく使う：移動・一覧・作る・編集・実行
pwd
ls -la
cd path/to/folder
mkdir myproject && cd myproject
touch hello.py
nano hello.py              # 保存: Ctrl+O → Enter、終了: Ctrl+X
cat > hello.py <<'EOF'
print("hello")
EOF
python hello.py
mv hello.py main.py
cp main.py main.bak
rm main.bak
```

---

必要なら次を作ります：

* ✅ VSCode での具体的な設定（`code` コマンドを使えるようにする方法）
* ✅ Git と組み合わせたワークフロー（`git add` → `commit` → `push` の実演）
* ✅ コンフリクトが起きたときに Git Bash 上でどう解決するか（実例）

どれを先に見たい？（迷わず選んでOK — そのまま次を出します）
# Git初心者が1人でチーム開発できる完全ガイド

## 📋 目次(MECE構造)

```
1. 事前準備(インストール・初期設定)
2. プロジェクト開始(クローン・初回セットアップ)
3. 日常開発(ブランチ作成→コード変更→コミット→プッシュ)
4. チーム連携(プル・マージ・コンフリクト解決)
5. トラブルシューティング(よくあるエラーと対処)
```

---

## 🎯 第1章: 事前準備(初日のみ)

### Step 1-1: Git のインストール確認

```bash
# Git Bashを開く
# デスクトップで右クリック → "Git Bash Here"

# バージョン確認
git --version
```

**表示例:**
```
git version 2.42.0.windows.1
```

**もし表示されない場合:**
→ https://git-scm.com/ からダウンロード&インストール

---

### Step 1-2: 初期設定(名前とメールアドレス)

```bash
# あなたの名前を設定(コミットに表示される)
git config --global user.name "Yamada Taro"

# あなたのメールアドレスを設定(GitHubと同じものを推奨)
git config --global user.email "yamada@example.com"

# 設定確認
git config --global --list
```

**表示例:**
```
user.name=Yamada Taro
user.email=yamada@example.com
```

---

### Step 1-3: 日本語文字化け防止

```bash
# 日本語ファイル名が文字化けしないように
git config --global core.quotepath false

# 改行コードの自動変換設定(Windows)
git config --global core.autocrlf true

# デフォルトブランチ名をmainに設定
git config --global init.defaultBranch main
```

---

### Step 1-4: エディタ設定(VSCode推奨)

```bash
# VSCodeをデフォルトエディタに
git config --global core.editor "code --wait"

# 確認
git config --global core.editor
```

---

### Step 1-5: SSH鍵の作成(GitHub用)

```bash
# SSHディレクトリの確認
ls -la ~/.ssh/

# 鍵が無い場合は作成
ssh-keygen -t ed25519 -C "yamada@example.com"

# 質問が出たらすべてEnterでOK(パスフレーズは空でも可)
```

**表示:**
```
Enter file in which to save the key (/c/Users/YourName/.ssh/id_ed25519): 
→ Enter

Enter passphrase (empty for no passphrase): 
→ Enter(または任意のパスワード)

Enter same passphrase again: 
→ Enter(または同じパスワード)
```

---

### Step 1-6: 公開鍵をGitHubに登録

```bash
# 公開鍵の内容を表示(全部コピーする)
cat ~/.ssh/id_ed25519.pub
```

**表示例:**
```
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yamada@example.com
```

**GitHubでの設定:**
```
1. GitHub にログイン
2. 右上のアイコン → Settings
3. 左メニュー → SSH and GPG keys
4. "New SSH key" をクリック
5. Title: 任意の名前(例: My-Laptop)
6. Key: コピーした公開鍵を貼り付け
7. "Add SSH key" をクリック
```

**接続テスト:**
```bash
ssh -T git@github.com
```

**成功時の表示:**
```
Hi YourName! You've successfully authenticated, but GitHub does not provide shell access.
```

---

## 📥 第2章: プロジェクト開始(初回のみ)

### Step 2-1: 作業フォルダの準備

```bash
# Cドライブにprojectsフォルダを作成
mkdir -p /c/projects

# 移動
cd /c/projects

# 現在地確認
pwd
```

**表示:**
```
/c/projects
```

---

### Step 2-2: GitHubからプロジェクトをクローン

**GitHubでSSH URLを取得:**
```
1. プロジェクトのGitHubページを開く
2. 緑色の "Code" ボタンをクリック
3. "SSH" を選択
4. URLをコピー(例: git@github.com:company/project.git)
```

```bash
# プロジェクトをクローン
git clone git@github.com:company/project.git

# プロジェクトフォルダに移動
cd project

# 確認
ls -la
```

**表示例:**
```
.git/
README.md
src/
requirements.txt
```

---

### Step 2-3: Python仮想環境のセットアップ

```bash
# Pythonバージョン確認
python --version

# 仮想環境作成
python -m venv venv

# 仮想環境有効化(Git Bash)
source venv/Scripts/activate

# 有効化の確認(プロンプトに(venv)が表示される)
```

**表示:**
```
(venv) user@PC MINGW64 /c/projects/project
$
```

```bash
# 依存パッケージのインストール
pip install -r requirements.txt

# インストール確認
pip list
```

---

### Step 2-4: プロジェクト構造の確認

```bash
# ツリー表示(全体像を把握)
ls -R

# または
find . -type f -name "*.py"
```

**表示例:**
```
./src/main.py
./src/models/user.py
./src/utils/helper.py
./tests/test_main.py
```

---

## 💻 第3章: 日常開発フロー(毎日使う)

### 【朝の作業開始】

#### Step 3-1: プロジェクトフォルダへ移動

```bash
# フォルダで右クリック → "Git Bash Here"
# または

cd /c/projects/project

# 仮想環境有効化
source venv/Scripts/activate
```

#### Step 3-2: 最新のコードを取得

```bash
# 現在のブランチを確認
git branch

# mainブランチにいることを確認
# もしいなければ
git checkout main

# 最新のコードを取得
git pull origin main
```

**表示例:**
```
From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```

---

### 【新しいタスク開始】

#### Step 3-3: 作業用ブランチを作成

```bash
# ブランチ名の命名規則(チームに確認)
# 例: feature/機能名, fix/バグ名, update/更新内容

# 新しいブランチ作成と切り替え
git checkout -b feature/add-login-function

# 確認
git branch
```

**表示:**
```
  main
* feature/add-login-function
```

---

### 【コード編集】

#### Step 3-4: Pythonファイルの作成・編集

```bash
# 新しいファイル作成
touch src/login.py

# VSCodeで開く
code src/login.py

# またはVimで編集
vim src/login.py
```

**login.py の例:**
```python
def login(username, password):
    """ログイン処理"""
    if username and password:
        return True
    return False

if __name__ == "__main__":
    result = login("user", "pass")
    print(f"ログイン結果: {result}")
```

---

### 【変更の確認とコミット】

#### Step 3-5: 変更されたファイルを確認

```bash
# 状態確認(最も重要なコマンド!)
git status
```

**表示例:**
```
On branch feature/add-login-function
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        src/login.py

nothing added to commit but untracked files present
```

#### Step 3-6: 差分を確認

```bash
# 変更内容を確認
git diff

# 新規ファイルは表示されないので
cat src/login.py
```

#### Step 3-7: ファイルをステージング

```bash
# 特定のファイルを追加
git add src/login.py

# または全ての変更を追加
git add .

# 確認
git status
```

**表示:**
```
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
```

#### Step 3-8: コミット

```bash
# コミットメッセージは日本語でOK
git commit -m "ログイン機能を追加"

# または詳細なメッセージ
git commit -m "ログイン機能を追加

- username と password を受け取る
- 両方が存在する場合のみTrueを返す
- テストケースは後で追加予定"
```

**表示:**
```
[feature/add-login-function abc1234] ログイン機能を追加
 1 file changed, 10 insertions(+)
 create mode 100644 src/login.py
```

---

### 【GitHubにプッシュ】

#### Step 3-9: リモートにプッシュ

```bash
# 初回プッシュ(ブランチを作成してプッシュ)
git push -u origin feature/add-login-function

# 2回目以降は
git push
```

**表示:**
```
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 456 bytes | 456.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
To github.com:company/project.git
 * [new branch]      feature/add-login-function -> feature/add-login-function
```

---

### 【複数回コミットする場合】

```bash
# ファイル編集
code src/login.py

# 確認
git status
git diff

# 追加
git add src/login.py

# コミット
git commit -m "ログイン時のエラーハンドリングを追加"

# プッシュ
git push
```

---

## 🤝 第4章: チーム連携

### 【他の人の変更を取り込む】

#### Step 4-1: リモートの最新情報を取得

```bash
# 情報だけ取得(まだマージしない)
git fetch origin

# 確認
git status
```

**表示例:**
```
Your branch is behind 'origin/main' by 3 commits
```

#### Step 4-2: 変更を取り込む

```bash
# mainブランチに切り替え
git checkout main

# 最新を取得してマージ
git pull origin main

# 自分のブランチに戻る
git checkout feature/add-login-function

# mainの変更を自分のブランチに取り込む
git merge main
```

**成功時:**
```
Already up to date.
```

---

### 【コンフリクトが発生した場合】

#### Step 4-3: コンフリクトの確認

```bash
# マージ時にコンフリクト発生
git merge main
```

**表示:**
```
Auto-merging src/login.py
CONFLICT (content): Merge conflict in src/login.py
Automatic merge failed; fix conflicts and then commit the result.
```

```bash
# コンフリクトファイルを確認
git status
```

**表示:**
```
Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   src/login.py
```

#### Step 4-4: コンフリクトの解決

```bash
# ファイルを開く
code src/login.py
```

**ファイルの中身:**
```python
def login(username, password):
<<<<<<< HEAD
    # あなたの変更
    if not username or not password:
        raise ValueError("入力が空です")
    return authenticate(username, password)
=======
    # 他の人の変更
    if username and password:
        return verify_user(username, password)
    return False
>>>>>>> main
```

**修正後(両方の良いところを取る):**
```python
def login(username, password):
    # 入力チェック
    if not username or not password:
        raise ValueError("入力が空です")
    
    # 認証処理
    return verify_user(username, password)
```

#### Step 4-5: コンフリクト解決後

```bash
# マーカー(<<<<, ====, >>>>)を全削除したか確認
cat src/login.py

# ファイルを追加
git add src/login.py

# 状態確認
git status

# コミット
git commit -m "コンフリクトを解決: ログイン機能をマージ"

# プッシュ
git push
```

---

## 🆘 第5章: トラブルシューティング

### トラブル1: git pullできない

**エラー:**
```
error: Your local changes to the following files would be overwritten by merge:
        src/login.py
```

**原因:** 未コミットの変更がある

**解決:**
```bash
# 方法1: 変更をコミットしてからpull
git add .
git commit -m "作業中の変更を保存"
git pull origin main

# 方法2: 一時的に変更を退避
git stash
git pull origin main
git stash pop
```

---

### トラブル2: 間違えてコミットした

**シナリオ:** コミットメッセージを間違えた

```bash
# 直前のコミットメッセージを修正
git commit --amend -m "正しいメッセージ"

# まだpushしていない場合のみ!
```

**シナリオ:** ファイルを追加し忘れた

```bash
# ファイルを追加
git add 忘れたファイル.py

# 直前のコミットに追加
git commit --amend --no-edit
```

---

### トラブル3: pushできない

**エラー:**
```
To github.com:company/project.git
 ! [rejected]        feature/my-work -> feature/my-work (fetch first)
```

**原因:** リモートに新しいコミットがある

**解決:**
```bash
# 最新を取得
git pull origin feature/my-work

# コンフリクトがなければ自動マージ
# コンフリクトがあれば解決後

# 再度プッシュ
git push
```

---

### トラブル4: ブランチを間違えた

**シナリオ:** mainブランチで直接作業してしまった

```bash
# 現在のブランチを確認
git branch
# * main  ← まずい!

# 新しいブランチを作成(今の変更を持っていく)
git checkout -b feature/my-work

# これでmainには変更が残らない
```

**シナリオ:** コミット前

```bash
# 変更を一時退避
git stash

# 正しいブランチに切り替え
git checkout 正しいブランチ名

# 変更を戻す
git stash pop
```

---

### トラブル5: ファイルを削除してしまった

**シナリオ:** まだコミットしていない

```bash
# 特定ファイルを復元
git checkout -- ファイル名.py

# 全ファイルを復元
git checkout -- .
```

**シナリオ:** コミット済み

```bash
# 直前のコミットを取り消す(変更は残る)
git reset --soft HEAD^

# ファイルを復元
git checkout -- ファイル名.py
```

---

### トラブル6: リモートURLが間違っている

```bash
# 現在のURL確認
git remote -v

# 変更
git remote set-url origin git@github.com:正しいユーザー名/正しいリポジトリ名.git

# 確認
git remote -v
```

---

### トラブル7: SSH接続できない

**エラー:**
```
Permission denied (publickey).
```

**解決手順:**

```bash
# Step 1: SSH鍵の確認
ls -la ~/.ssh/

# id_ed25519 と id_ed25519.pub があるか確認

# Step 2: SSH Agentに鍵を登録
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

# Step 3: 接続テスト
ssh -T git@github.com

# Step 4: それでもダメなら公開鍵を再登録
cat ~/.ssh/id_ed25519.pub
# 出力をコピーしてGitHubに再登録
```

---

### トラブル8: .gitignoreが効かない

**問題:** 既にコミットしたファイルは無視されない

```bash
# キャッシュから削除(ファイル自体は残る)
git rm --cached ファイル名.py

# または全ファイル
git rm -r --cached .

# .gitignoreを追加
echo "venv/" >> .gitignore
echo "*.pyc" >> .gitignore
echo "__pycache__/" >> .gitignore

# 再度追加
git add .

# コミット
git commit -m ".gitignoreを適用"
```

---

### トラブル9: マージを中止したい

```bash
# マージ中止
git merge --abort

# rebase中止
git rebase --abort

# 元の状態に戻る
git checkout main
```

---

### トラブル10: すべてをリセットしたい

**⚠️ 注意: 全ての変更が消えます**

```bash
# ローカルの変更を全て破棄
git reset --hard HEAD

# リモートと完全に同期
git fetch origin
git reset --hard origin/main
```

---

## 📝 第6章: 完全チートシート(コピペ用)

### 【毎日使う基本コマンド】

```bash
# 1. プロジェクトへ移動
cd /c/projects/project

# 2. 仮想環境有効化
source venv/Scripts/activate

# 3. 状態確認
git status

# 4. 最新取得
git pull origin main

# 5. ブランチ作成
git checkout -b feature/新機能名

# 6. コード編集後、確認
git status
git diff

# 7. 追加
git add .

# 8. コミット
git commit -m "コミットメッセージ"

# 9. プッシュ
git push -u origin feature/新機能名

# 10. 2回目以降
git push
```

---

### 【.gitignore テンプレート(Python)】

```bash
# .gitignoreファイル作成
cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/
*.egg-info/
dist/
build/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Environment
.env
.env.local

# Logs
*.log

# Database
*.db
*.sqlite3
EOF

# 確認
cat .gitignore
```

---

### 【よく使うGit Bashコマンド】

```bash
# フォルダ操作
pwd                    # 現在地表示
ls                     # ファイル一覧
ls -la                 # 詳細一覧(隠しファイル含む)
cd フォルダ名           # 移動
cd ..                  # 1つ上へ
cd ~                   # ホームへ
mkdir フォルダ名        # フォルダ作成

# ファイル操作
touch ファイル名.py     # 空ファイル作成
cat ファイル名.py       # 内容表示
code ファイル名.py      # VSCodeで開く
rm ファイル名.py        # 削除

# Git操作
git status             # 状態確認
git log --oneline -10  # 履歴表示
git branch             # ブランチ一覧
git diff               # 差分表示
```

---

## 🎯 第7章: 1日の完全フロー(実践例)

### 朝(9:00)

```bash
# Git Bash起動(プロジェクトフォルダで右クリック)

# 仮想環境有効化
source venv/Scripts/activate

# mainブランチへ
git checkout main

# 最新取得
git pull origin main

# 確認
git log --oneline -5
```

---

### タスク開始(9:30)

```bash
# タスク: issue #123 ユーザー登録機能

# ブランチ作成
git checkout -b feature/issue-123-user-registration

# 確認
git branch
```

---

### 開発(10:00-11:30)

```bash
# ファイル作成
touch src/registration.py

# 編集
code src/registration.py

# 【registration.py の内容】
"""
def register_user(username, email, password):
    '''新規ユーザー登録'''
    if not all([username, email, password]):
        raise ValueError("全ての項目を入力してください")
    
    # データベース保存処理(後で実装)
    return {"username": username, "email": email}
"""

# 動作確認
python src/registration.py

# テスト作成
code tests/test_registration.py

# テスト実行
pytest tests/test_registration.py
```

---

### 昼休み前にコミット(11:45)

```bash
# 状態確認
git status

# 差分確認
git diff

# 追加
git add src/registration.py tests/test_registration.py

# コミット
git commit -m "ユーザー登録機能の基本実装

- registration.py を追加
- 入力バリデーション実装
- テストケース追加"

# プッシュ
git push -u origin feature/issue-123-user-registration
```

---

### 午後、機能追加(13:00-15:00)

```bash
# ファイル編集
code src/registration.py

# 追加機能を実装...

# 確認
git status
git diff

# コミット
git add src/registration.py
git commit -m "メール重複チェック機能を追加"
git push
```

---

### 他の人の変更を取り込む(15:30)

```bash
# mainに新しい変更があるか確認
git fetch origin

# mainの変更を取り込む
git checkout main
git pull origin main

# 自分のブランチに戻る
git checkout feature/issue-123-user-registration

# mainの変更をマージ
git merge main

# コンフリクトがあれば解決
# なければ
git push
```

---

### 完成、プルリクエスト作成(16:00)

```bash
# 最終確認
git status
git log --oneline -5

# GitHub でプルリクエスト作成
# 1. GitHubのプロジェクトページを開く
# 2. "Pull requests" タブ
# 3. "New pull request"
# 4. base: main ← compare: feature/issue-123-user-registration
# 5. タイトルと説明を記入
# 6. "Create pull request"
```

---

### 終業前(17:30)

```bash
# 作業中の変更を一時保存
git stash

# mainに戻る
git checkout main

# 最新を取得
git pull origin main

# 翌日の準備
# (翌朝 git stash pop で作業再開)
```

---

## 🔍 第8章: requirements.txt の管理

### 新しいパッケージをインストールした時

```bash
# パッケージインストール
pip install requests

# requirements.txt を更新
pip freeze > requirements.txt

# Gitに追加
git add requirements.txt
git commit -m "requestsパッケージを追加"
git push
```

### 他の人が追加したパッケージをインストール

```bash
# 最新のコードを取得
git pull origin main

# パッケージをインストール
pip install -r requirements.txt
```

---

## 📚 第9章: コミットメッセージのベストプラクティス

### 良いメッセージの例

```bash
# ✅ 明確で具体的
git commit -m "ログイン時のエラーハンドリングを追加"

# ✅ 何をしたか + なぜしたか
git commit -m "パスワード検証を強化

- 最低8文字以上を必須に
- 数字と記号を1文字以上含むように
- セキュリティ要件(issue #45)に対応"

# ✅ プレフィックスを使う
git commit -m "feat: ユーザー登録機能を追加"
git commit -m "fix: ログインバグを修正"
git commit -m "docs: READMEを更新"
git commit -m "test: ログインテストを追加"
```

### 悪いメッセージの例

```bash
# ❌ 抽象的すぎ
git commit -m "修正"
git commit -m "更新"
git commit -m "変更"

# ❌ 意味不明
git commit -m "aaa"
git commit -m "テスト"
git commit -m "とりあえず"
```

---

## 🎓 第10章: 覚えておくべき重要ポイント

### 1. コミット前の確認

```bash
# 必ず実行!
git status    # 何が変わったか
git diff      # どう変わったか
```

### 2. こまめなコミット

```bash
# ❌ 1日の終わりに1回だけ
# ✅ 機能単位で小まめに(1-2時間おき)
```

### 3. mainブランチで直接作業しない

```bash
# ❌ 
git checkout main
# コード編集...

# ✅
git checkout -b feature/my-work
# コード編集...
```

### 4. プッシュ前に最新を取得

```bash
git fetch origin
git merge main
git push
```

### 5. わからなくなったら

```bash
# 1. 現状確認
git status

# 2. ログ確認
git log --oneline -10

# 3. 先輩に相談(画面を見せる)
```

---

## 🆘 困ったときのコマンド集

```bash
# 全てを元に戻す(⚠️変更は全て消える)
git reset --hard HEAD
git clean -fd

# コミットを取り消す(変更は残る)
git reset --soft HEAD^

# 直前の操作を取り消す
git reflog
git reset --hard HEAD@{1}

# ブランチを削除
git branch -d ブランチ名

# 強制削除
git branch -D ブランチ名

# リモートブランチを削除
git push origin --delete ブランチ名

# 別のブランチのファイルを取得
git checkout 他のブランチ名 -- ファイル名.py
```

---

これで、チーム開発でPythonファイルをコミットするまでの全ての手順が完了です!

**次のステップ:**
1. まずこのガイドを見ながら1回通してやってみる
2. 毎日の開発フローを3日間繰り返す
3. わからないことは都度このガイドを見返す
4. 慣れてきたら先輩に質問してチーム独自のルールを学ぶ

何か具体的に困っていることや、もっと詳しく知りたいことはありますか?

# Git Bash 画面の読み方完全ガイド(結果の見方)

## 🖥️ 第1章: Git Bash の基本画面構成

### 起動直後の画面

```bash
User@DESKTOP-ABC123 MINGW64 ~
$
```

**各部分の意味:**
```
User              = あなたのWindowsユーザー名
@                 = アット(at)
DESKTOP-ABC123    = コンピューター名
MINGW64           = Git Bashの環境(64bit版)
~                 = ホームディレクトリ(現在いる場所)
$                 = コマンド入力待ち(プロンプト)
```

### プロジェクトフォルダに移動後

```bash
User@DESKTOP-ABC123 MINGW64 /c/projects/myproject (main)
$
```

**追加された情報:**
```
/c/projects/myproject  = 現在のフォルダパス
(main)                 = 現在のブランチ名(Gitリポジトリ内)
```

### 仮想環境有効化後

```bash
(venv) User@DESKTOP-ABC123 MINGW64 /c/projects/myproject (main)
$
```

**追加された情報:**
```
(venv)  = Python仮想環境が有効
```

---

## ✅ 第2章: 正常な結果の見方

### 【git status】正常パターン

#### パターン1: 変更なし(クリーンな状態)

```bash
$ git status

On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
```

**読み方:**
- `On branch main` = mainブランチにいます
- `up to date` = リモートと同期しています
- `nothing to commit` = コミットする変更はありません
- `working tree clean` = 作業ディレクトリはきれいです

**状態:** ✅ 完璧! そのまま作業開始できます

---

#### パターン2: 新しいファイルがある

```bash
$ git status

On branch feature/add-login
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        src/login.py

nothing added to commit but untracked files present (use "git add" to track)
```

**読み方:**
- `Untracked files` = Gitが追跡していないファイル(新規作成)
- 赤色で表示 = まだステージングされていない
- `src/login.py` = 対象のファイル

**次にやること:** `git add src/login.py`

---

#### パターン3: ファイルを変更した

```bash
$ git status

On branch feature/add-login
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/login.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**読み方:**
- `Changes not staged for commit` = ステージングされていない変更
- `modified:` = 既存ファイルが変更された
- 赤色 = まだaddしていない

**次にやること:** `git add src/login.py`

---

#### パターン4: addした後(ステージング済み)

```bash
$ git status

On branch feature/add-login
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
        modified:   src/auth.py
```

**読み方:**
- `Changes to be committed` = コミット準備完了
- 緑色で表示 = ステージング済み
- `new file:` = 新規ファイル
- `modified:` = 変更されたファイル

**次にやること:** `git commit -m "メッセージ"`

---

### 【git add】正常パターン

```bash
$ git add src/login.py
$
```

**表示:** 何も表示されない = 正常!

**確認方法:**
```bash
$ git status

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
```

緑色で表示されればOK!

---

### 【git commit】正常パターン

```bash
$ git commit -m "ログイン機能を追加"

[feature/add-login abc1234] ログイン機能を追加
 1 file changed, 15 insertions(+)
 create mode 100644 src/login.py
```

**読み方:**
```
[feature/add-login abc1234]
 ↑ブランチ名        ↑コミットID(短縮版)

ログイン機能を追加
 ↑コミットメッセージ

1 file changed
 ↑1個のファイルが変更された

15 insertions(+)
 ↑15行追加された

create mode 100644 src/login.py
 ↑新しいファイルを作成(100644=通常のファイル権限)
```

**状態:** ✅ コミット成功!

---

### 【git push】正常パターン

#### 初回プッシュ

```bash
$ git push -u origin feature/add-login

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 456 bytes | 456.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), done.
To github.com:company/project.git
 * [new branch]      feature/add-login -> feature/add-login
Branch 'feature/add-login' set up to track remote branch 'feature/add-login' from 'origin'.
```

**読み方:**
```
Enumerating objects: 5, done.
 ↑オブジェクトを数えています(5個)

Counting objects: 100% (5/5), done.
 ↑100%完了

Delta compression using up to 8 threads
 ↑圧縮中(8スレッド使用)

Compressing objects: 100% (3/3), done.
 ↑圧縮完了(3個のオブジェクト)

Writing objects: 100% (3/3), 456 bytes
 ↑書き込み中(456バイト)

Total 3 (delta 1), reused 0 (delta 0)
 ↑合計3個、差分1個、再利用0個

remote: Resolving deltas: 100% (1/1), done.
 ↑リモート側で処理完了

To github.com:company/project.git
 ↑プッシュ先のURL

* [new branch]      feature/add-login -> feature/add-login
 ↑新しいブランチを作成してプッシュ

Branch 'feature/add-login' set up to track...
 ↑追跡設定完了(次回からgit pushだけでOK)
```

**状態:** ✅ プッシュ成功!

---

#### 2回目以降のプッシュ

```bash
$ git push

Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (2/2), 234 bytes | 234.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:company/project.git
   abc1234..def5678  feature/add-login -> feature/add-login
```

**読み方:**
```
abc1234..def5678
 ↑古いコミット→新しいコミット

feature/add-login -> feature/add-login
 ↑ローカル           ↑リモート
```

**状態:** ✅ プッシュ成功!

---

### 【git pull】正常パターン

#### パターン1: 新しい変更がある

```bash
$ git pull origin main

remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 678 bytes | 67.00 KiB/s, done.
From github.com:company/project
 * branch            main       -> FETCH_HEAD
   abc1234..def5678  main       -> origin/main
Updating abc1234..def5678
Fast-forward
 src/auth.py | 5 +++--
 README.md   | 2 ++
 2 files changed, 5 insertions(+), 2 deletions(-)
```

**読み方:**
```
remote: Enumerating objects...
 ↑リモートから取得中

Unpacking objects: 100% (3/3), done.
 ↑展開完了

From github.com:company/project
 ↑取得元

* branch            main       -> FETCH_HEAD
 ↑mainブランチを取得

abc1234..def5678  main       -> origin/main
 ↑コミットIDが更新された

Updating abc1234..def5678
Fast-forward
 ↑高速マージ(コンフリクトなし)

src/auth.py | 5 +++--
 ↑変更されたファイル(5行変更)

2 files changed, 5 insertions(+), 2 deletions(-)
 ↑2ファイル変更、5行追加、2行削除
```

**状態:** ✅ プル成功! マージも完了!

---

#### パターン2: 既に最新

```bash
$ git pull origin main

From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```

**読み方:**
- `Already up to date.` = 既に最新です

**状態:** ✅ 変更なし、そのまま作業続行

---

### 【git clone】正常パターン

```bash
$ git clone git@github.com:company/project.git

Cloning into 'project'...
remote: Enumerating objects: 123, done.
remote: Counting objects: 100% (123/123), done.
remote: Compressing objects: 100% (87/87), done.
remote: Total 123 (delta 45), reused 98 (delta 32), pack-reused 0
Receiving objects: 100% (123/123), 45.67 KiB | 1.23 MiB/s, done.
Resolving deltas: 100% (45/45), done.
```

**読み方:**
```
Cloning into 'project'...
 ↑projectフォルダにクローン中

Receiving objects: 100% (123/123)
 ↑123個のオブジェクトを受信(100%完了)

45.67 KiB | 1.23 MiB/s
 ↑ダウンロード容量と速度

done.
 ↑完了!
```

**状態:** ✅ クローン成功!

---

## ❌ 第3章: 異常・エラーの見方

### 【エラー1: コミットする変更がない】

```bash
$ git commit -m "メッセージ"

On branch feature/add-login
nothing to commit, working tree clean
```

**原因:** `git add` を忘れている

**解決:**
```bash
# 1. ファイルを確認
git status

# 2. ファイルを追加
git add ファイル名.py

# 3. 再度コミット
git commit -m "メッセージ"
```

---

### 【エラー2: プッシュできない(rejected)】

```bash
$ git push

To github.com:company/project.git
 ! [rejected]        feature/add-login -> feature/add-login (fetch first)
error: failed to push some refs to 'github.com:company/project.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```

**読み方:**
```
! [rejected]
 ↑拒否されました!

error: failed to push
 ↑プッシュ失敗

hint: Updates were rejected because the remote contains work...
 ↑ヒント: リモートに新しい変更があります

hint: This is usually caused by another repository pushing...
 ↑他の誰かがプッシュしました

hint: You may want to first integrate the remote changes
 ↑先にリモートの変更を取り込んでください
```

**原因:** 他の人が先にプッシュした

**解決:**
```bash
# 1. リモートの変更を取得
git pull origin feature/add-login

# 2. コンフリクトがなければ自動マージ
# 3. 再度プッシュ
git push
```

---

### 【エラー3: プルできない(ローカルに変更がある)】

```bash
$ git pull origin main

error: Your local changes to the following files would be overwritten by merge:
        src/login.py
Please commit your changes or stash them before you merge.
Aborting
```

**読み方:**
```
error: Your local changes to the following files would be overwritten
 ↑エラー: ローカルの変更が上書きされます

src/login.py
 ↑このファイルに未コミットの変更

Please commit your changes or stash them
 ↑変更をコミットするか退避してください

Aborting
 ↑中止しました
```

**原因:** 未コミットの変更がある

**解決方法1: コミットしてからプル**
```bash
git add .
git commit -m "作業中の変更を保存"
git pull origin main
```

**解決方法2: 一時退避**
```bash
git stash
git pull origin main
git stash pop
```

---

### 【エラー4: コンフリクト発生】

```bash
$ git pull origin main

Auto-merging src/login.py
CONFLICT (content): Merge conflict in src/login.py
Automatic merge failed; fix conflicts and then commit the result.
```

**読み方:**
```
Auto-merging src/login.py
 ↑自動マージを試みています

CONFLICT (content): Merge conflict in src/login.py
 ↑コンフリクト(衝突): src/login.pyで内容が衝突

Automatic merge failed
 ↑自動マージ失敗

fix conflicts and then commit
 ↑コンフリクトを解決してからコミットしてください
```

**状態確認:**
```bash
$ git status

On branch feature/add-login
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   src/login.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**読み方:**
```
You have unmerged paths.
 ↑マージされていないパスがあります

Unmerged paths:
 ↑マージされていないファイル一覧

both modified:   src/login.py
 ↑両方が変更しました(赤色で表示)
```

**解決手順:**
```bash
# 1. ファイルを開いて編集
code src/login.py

# 2. <<<<, ====, >>>> を削除して修正

# 3. 解決したファイルをadd
git add src/login.py

# 4. コミット
git commit -m "コンフリクトを解決"

# 5. プッシュ
git push
```

---

### 【エラー5: SSH接続エラー】

```bash
$ git push

git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
```

**読み方:**
```
Permission denied (publickey)
 ↑権限拒否(公開鍵認証失敗)

Could not read from remote repository
 ↑リモートリポジトリから読み取れません

correct access rights
 ↑正しいアクセス権限を確認してください

repository exists
 ↑リポジトリが存在するか確認してください
```

**原因:** SSH鍵が登録されていない

**解決:**
```bash
# 1. SSH鍵の確認
ls -la ~/.ssh/

# 2. 公開鍵の表示
cat ~/.ssh/id_ed25519.pub

# 3. GitHubに登録(再登録)
# 4. 接続テスト
ssh -T git@github.com

# 成功時の表示:
Hi YourName! You've successfully authenticated...
```

---

### 【エラー6: ブランチが存在しない】

```bash
$ git checkout non-existent-branch

error: pathspec 'non-existent-branch' did not match any file(s) known to git
```

**読み方:**
```
error: pathspec 'non-existent-branch' did not match...
 ↑エラー: 'non-existent-branch'に一致するものがありません
```

**原因:** ブランチ名が間違っている

**解決:**
```bash
# 1. ブランチ一覧を確認
git branch -a

# 2. 正しいブランチ名で再実行
git checkout 正しいブランチ名
```

---

### 【エラー7: コミットメッセージが空】

```bash
$ git commit -m ""

Aborting commit due to empty commit message.
```

**読み方:**
```
Aborting commit due to empty commit message
 ↑空のコミットメッセージのため中止しました
```

**解決:**
```bash
# メッセージを付けて再実行
git commit -m "適切なメッセージ"
```

---

### 【エラー8: リモートURLが間違っている】

```bash
$ git push

fatal: repository 'https://github.com/wrong-user/wrong-repo.git/' not found
```

**読み方:**
```
fatal: repository '...' not found
 ↑致命的エラー: リポジトリが見つかりません
```

**原因:** URLが間違っている

**解決:**
```bash
# 1. 現在のURLを確認
git remote -v

# 2. 正しいURLに変更
git remote set-url origin git@github.com:正しいユーザー名/正しいリポジトリ.git

# 3. 確認
git remote -v

# 4. 再度プッシュ
git push
```

---

## 🎨 第4章: 画面の色の意味

### Git Status の色

```bash
$ git status

On branch main
Changes not staged for commit:
        modified:   file1.py     # 赤色

Changes to be committed:
        modified:   file2.py     # 緑色

Untracked files:
        file3.py                 # 赤色
```

**色の意味:**
- **赤色** = まだaddしていない(作業中)
- **緑色** = addした(ステージング済み)

---

### Git Diff の色

```bash
$ git diff

diff --git a/login.py b/login.py
index 1234567..abcdefg 100644
--- a/login.py
+++ b/login.py
@@ -5,7 +5,7 @@ def login(username, password):
     user = User.find(username)
     
-    return user.check_password(password)     # 赤色(削除)
+    return user.authenticate(password)       # 緑色(追加)
```

**色の意味:**
- **赤色(-)** = 削除された行
- **緑色(+)** = 追加された行

---

### Git Log の表示

```bash
$ git log --oneline --graph

* abc1234 (HEAD -> feature/add-login) 最新のコミット    # 黄色
* def5678 1つ前のコミット                              # 黄色
* ghi9012 (origin/main, main) mainブランチ             # 緑色
```

**色の意味:**
- **黄色** = コミットID
- **緑色** = ブランチ名
- **青色** = HEAD(現在地)

---

## 📊 第5章: プログレスバーの見方

### プッシュ中のプログレス

```bash
$ git push

Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
                 ↑進捗(パーセント)

Delta compression using up to 8 threads
Compressing objects:  50% (5/10)
                      ↑現在50%(5個/10個)

Writing objects:  80% (8/10), 1.23 MiB | 456.00 KiB/s
                  ↑80%完了、転送速度も表示

Total 10 (delta 3), reused 0 (delta 0), pack-reused 0
```

**読み方:**
- `100%` = 完了
- `(5/10)` = 5個/全10個
- `1.23 MiB | 456.00 KiB/s` = 容量とスピード

---

## 🔍 第6章: よく見る警告メッセージ

### 【警告1: 改行コードの変換】

```bash
$ git add file.py

warning: LF will be replaced by CRLF in file.py.
The file will have its original line endings in your working directory
```

**読み方:**
```
warning: LF will be replaced by CRLF
 ↑警告: LF(Unix)がCRLF(Windows)に変換されます
```

**状態:** ⚠️ 警告ですが問題なし(Windowsでは正常)

---

### 【警告2: デタッチドHEAD】

```bash
$ git checkout abc1234

Note: switching to 'abc1234'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
```

**読み方:**
```
detached HEAD state
 ↑HEADが分離された状態(ブランチに属していない)
```

**状態:** ⚠️ 特殊な状態、通常はブランチに戻る

```bash
# ブランチに戻る
git checkout main
```

---

## 📋 第7章: チートシート(画面の読み方)

### 成功のサイン

```bash
✅ done.                          # 完了
✅ Already up to date.            # 既に最新
✅ Fast-forward                   # 高速マージ成功
✅ working tree clean             # 変更なし
✅ [ブランチ名 コミットID] メッセージ  # コミット成功
✅ Branch '...' set up to track   # 追跡設定完了
✅ Hi YourName! You've successfully authenticated  # SSH接続成功
```

### エラー/注意のサイン

```bash
❌ error:                         # エラー
❌ fatal:                         # 致命的エラー
❌ CONFLICT                       # コンフリクト
❌ rejected                       # 拒否された
❌ Permission denied              # 権限拒否
❌ Aborting                       # 中止
⚠️ warning:                       # 警告(通常は問題なし)
⚠️ hint:                          # ヒント(対処法の提案)
```

---

## 🎯 第8章: 実践的な画面確認フロー

### 毎回確認すべき画面の流れ

```bash
# 1. 状態確認
$ git status
# ✅ 赤色ファイル確認 → add が必要
# ✅ 緑色ファイル確認 → commit 準備OK

# 2. 差分確認
$ git diff
# ✅ 赤い行(-) = 削除
# ✅ 緑の行(+) = 追加

# 3. 追加
$ git add .
# ✅ 何も表示されない = 正常

# 4. 再確認
$ git status
# ✅ 緑色になった = OK

# 5. コミット
$ git commit -m "メッセージ"
# ✅ [ブランチ コミットID] メッセージ = 成功

# 6. プッシュ
$ git push
# ✅ done. = 成功
# ❌ rejected = エラー → pull してから再push
```

---

これで Git Bash の画面の読み方は完璧です!

**覚えておくポイント:**
1. **緑色** = 良い状態(準備OK)
2. **赤色** = 作業中(まだ処理が必要)
3. **error/fatal** = エラー(対処が必要)
4. **warning/hint** = 警告・ヒント(参考情報)
5. **done** = 成功!

画面を見て意味がわからない時は、このガイドを見返してくださいね!

他に具体的なエラーメッセージや画面について質問はありますか?

# Git Bash 画面の読み方完全ガイド(結果の見方)

## 🖥️ 第1章: Git Bash の基本画面構成

### 起動直後の画面

```bash
User@DESKTOP-ABC123 MINGW64 ~
$
```

**各部分の意味:**
```
User              = あなたのWindowsユーザー名
@                 = アット(at)
DESKTOP-ABC123    = コンピューター名
MINGW64           = Git Bashの環境(64bit版)
~                 = ホームディレクトリ(現在いる場所)
$                 = コマンド入力待ち(プロンプト)
```

### プロジェクトフォルダに移動後

```bash
User@DESKTOP-ABC123 MINGW64 /c/projects/myproject (main)
$
```

**追加された情報:**
```
/c/projects/myproject  = 現在のフォルダパス
(main)                 = 現在のブランチ名(Gitリポジトリ内)
```

### 仮想環境有効化後

```bash
(venv) User@DESKTOP-ABC123 MINGW64 /c/projects/myproject (main)
$
```

**追加された情報:**
```
(venv)  = Python仮想環境が有効
```

---

## ✅ 第2章: 正常な結果の見方

### 【git status】正常パターン

#### パターン1: 変更なし(クリーンな状態)

```bash
$ git status

On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
```

**読み方:**
- `On branch main` = mainブランチにいます
- `up to date` = リモートと同期しています
- `nothing to commit` = コミットする変更はありません
- `working tree clean` = 作業ディレクトリはきれいです

**状態:** ✅ 完璧! そのまま作業開始できます

---

#### パターン2: 新しいファイルがある

```bash
$ git status

On branch feature/add-login
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        src/login.py

nothing added to commit but untracked files present (use "git add" to track)
```

**読み方:**
- `Untracked files` = Gitが追跡していないファイル(新規作成)
- 赤色で表示 = まだステージングされていない
- `src/login.py` = 対象のファイル

**次にやること:** `git add src/login.py`

---

#### パターン3: ファイルを変更した

```bash
$ git status

On branch feature/add-login
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/login.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**読み方:**
- `Changes not staged for commit` = ステージングされていない変更
- `modified:` = 既存ファイルが変更された
- 赤色 = まだaddしていない

**次にやること:** `git add src/login.py`

---

#### パターン4: addした後(ステージング済み)

```bash
$ git status

On branch feature/add-login
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
        modified:   src/auth.py
```

**読み方:**
- `Changes to be committed` = コミット準備完了
- 緑色で表示 = ステージング済み
- `new file:` = 新規ファイル
- `modified:` = 変更されたファイル

**次にやること:** `git commit -m "メッセージ"`

---

### 【git add】正常パターン

```bash
$ git add src/login.py
$
```

**表示:** 何も表示されない = 正常!

**確認方法:**
```bash
$ git status

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
```

緑色で表示されればOK!

---

### 【git commit】正常パターン

```bash
$ git commit -m "ログイン機能を追加"

[feature/add-login abc1234] ログイン機能を追加
 1 file changed, 15 insertions(+)
 create mode 100644 src/login.py
```

**読み方:**
```
[feature/add-login abc1234]
 ↑ブランチ名        ↑コミットID(短縮版)

ログイン機能を追加
 ↑コミットメッセージ

1 file changed
 ↑1個のファイルが変更された

15 insertions(+)
 ↑15行追加された

create mode 100644 src/login.py
 ↑新しいファイルを作成(100644=通常のファイル権限)
```

**状態:** ✅ コミット成功!

---

### 【git push】正常パターン

#### 初回プッシュ

```bash
$ git push -u origin feature/add-login

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 456 bytes | 456.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), done.
To github.com:company/project.git
 * [new branch]      feature/add-login -> feature/add-login
Branch 'feature/add-login' set up to track remote branch 'feature/add-login' from 'origin'.
```

**読み方:**
```
Enumerating objects: 5, done.
 ↑オブジェクトを数えています(5個)

Counting objects: 100% (5/5), done.
 ↑100%完了

Delta compression using up to 8 threads
 ↑圧縮中(8スレッド使用)

Compressing objects: 100% (3/3), done.
 ↑圧縮完了(3個のオブジェクト)

Writing objects: 100% (3/3), 456 bytes
 ↑書き込み中(456バイト)

Total 3 (delta 1), reused 0 (delta 0)
 ↑合計3個、差分1個、再利用0個

remote: Resolving deltas: 100% (1/1), done.
 ↑リモート側で処理完了

To github.com:company/project.git
 ↑プッシュ先のURL

* [new branch]      feature/add-login -> feature/add-login
 ↑新しいブランチを作成してプッシュ

Branch 'feature/add-login' set up to track...
 ↑追跡設定完了(次回からgit pushだけでOK)
```

**状態:** ✅ プッシュ成功!

---

#### 2回目以降のプッシュ

```bash
$ git push

Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (2/2), 234 bytes | 234.00 KiB/s, done.
Total 2 (delta 0), reused 0 (delta 0), pack-reused 0
To github.com:company/project.git
   abc1234..def5678  feature/add-login -> feature/add-login
```

**読み方:**
```
abc1234..def5678
 ↑古いコミット→新しいコミット

feature/add-login -> feature/add-login
 ↑ローカル           ↑リモート
```

**状態:** ✅ プッシュ成功!

---

### 【git pull】正常パターン

#### パターン1: 新しい変更がある

```bash
$ git pull origin main

remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 678 bytes | 67.00 KiB/s, done.
From github.com:company/project
 * branch            main       -> FETCH_HEAD
   abc1234..def5678  main       -> origin/main
Updating abc1234..def5678
Fast-forward
 src/auth.py | 5 +++--
 README.md   | 2 ++
 2 files changed, 5 insertions(+), 2 deletions(-)
```

**読み方:**
```
remote: Enumerating objects...
 ↑リモートから取得中

Unpacking objects: 100% (3/3), done.
 ↑展開完了

From github.com:company/project
 ↑取得元

* branch            main       -> FETCH_HEAD
 ↑mainブランチを取得

abc1234..def5678  main       -> origin/main
 ↑コミットIDが更新された

Updating abc1234..def5678
Fast-forward
 ↑高速マージ(コンフリクトなし)

src/auth.py | 5 +++--
 ↑変更されたファイル(5行変更)

2 files changed, 5 insertions(+), 2 deletions(-)
 ↑2ファイル変更、5行追加、2行削除
```

**状態:** ✅ プル成功! マージも完了!

---

#### パターン2: 既に最新

```bash
$ git pull origin main

From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```

**読み方:**
- `Already up to date.` = 既に最新です

**状態:** ✅ 変更なし、そのまま作業続行

---

### 【git clone】正常パターン

```bash
$ git clone git@github.com:company/project.git

Cloning into 'project'...
remote: Enumerating objects: 123, done.
remote: Counting objects: 100% (123/123), done.
remote: Compressing objects: 100% (87/87), done.
remote: Total 123 (delta 45), reused 98 (delta 32), pack-reused 0
Receiving objects: 100% (123/123), 45.67 KiB | 1.23 MiB/s, done.
Resolving deltas: 100% (45/45), done.
```

**読み方:**
```
Cloning into 'project'...
 ↑projectフォルダにクローン中

Receiving objects: 100% (123/123)
 ↑123個のオブジェクトを受信(100%完了)

45.67 KiB | 1.23 MiB/s
 ↑ダウンロード容量と速度

done.
 ↑完了!
```

**状態:** ✅ クローン成功!

---

## ❌ 第3章: 異常・エラーの見方

### 【エラー1: コミットする変更がない】

```bash
$ git commit -m "メッセージ"

On branch feature/add-login
nothing to commit, working tree clean
```

**原因:** `git add` を忘れている

**解決:**
```bash
# 1. ファイルを確認
git status

# 2. ファイルを追加
git add ファイル名.py

# 3. 再度コミット
git commit -m "メッセージ"
```

---

### 【エラー2: プッシュできない(rejected)】

```bash
$ git push

To github.com:company/project.git
 ! [rejected]        feature/add-login -> feature/add-login (fetch first)
error: failed to push some refs to 'github.com:company/project.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```

**読み方:**
```
! [rejected]
 ↑拒否されました!

error: failed to push
 ↑プッシュ失敗

hint: Updates were rejected because the remote contains work...
 ↑ヒント: リモートに新しい変更があります

hint: This is usually caused by another repository pushing...
 ↑他の誰かがプッシュしました

hint: You may want to first integrate the remote changes
 ↑先にリモートの変更を取り込んでください
```

**原因:** 他の人が先にプッシュした

**解決:**
```bash
# 1. リモートの変更を取得
git pull origin feature/add-login

# 2. コンフリクトがなければ自動マージ
# 3. 再度プッシュ
git push
```

---

### 【エラー3: プルできない(ローカルに変更がある)】

```bash
$ git pull origin main

error: Your local changes to the following files would be overwritten by merge:
        src/login.py
Please commit your changes or stash them before you merge.
Aborting
```

**読み方:**
```
error: Your local changes to the following files would be overwritten
 ↑エラー: ローカルの変更が上書きされます

src/login.py
 ↑このファイルに未コミットの変更

Please commit your changes or stash them
 ↑変更をコミットするか退避してください

Aborting
 ↑中止しました
```

**原因:** 未コミットの変更がある

**解決方法1: コミットしてからプル**
```bash
git add .
git commit -m "作業中の変更を保存"
git pull origin main
```

**解決方法2: 一時退避**
```bash
git stash
git pull origin main
git stash pop
```

---

### 【エラー4: コンフリクト発生】

```bash
$ git pull origin main

Auto-merging src/login.py
CONFLICT (content): Merge conflict in src/login.py
Automatic merge failed; fix conflicts and then commit the result.
```

**読み方:**
```
Auto-merging src/login.py
 ↑自動マージを試みています

CONFLICT (content): Merge conflict in src/login.py
 ↑コンフリクト(衝突): src/login.pyで内容が衝突

Automatic merge failed
 ↑自動マージ失敗

fix conflicts and then commit
 ↑コンフリクトを解決してからコミットしてください
```

**状態確認:**
```bash
$ git status

On branch feature/add-login
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   src/login.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**読み方:**
```
You have unmerged paths.
 ↑マージされていないパスがあります

Unmerged paths:
 ↑マージされていないファイル一覧

both modified:   src/login.py
 ↑両方が変更しました(赤色で表示)
```

**解決手順:**
```bash
# 1. ファイルを開いて編集
code src/login.py

# 2. <<<<, ====, >>>> を削除して修正

# 3. 解決したファイルをadd
git add src/login.py

# 4. コミット
git commit -m "コンフリクトを解決"

# 5. プッシュ
git push
```

---

### 【エラー5: SSH接続エラー】

```bash
$ git push

git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
```

**読み方:**
```
Permission denied (publickey)
 ↑権限拒否(公開鍵認証失敗)

Could not read from remote repository
 ↑リモートリポジトリから読み取れません

correct access rights
 ↑正しいアクセス権限を確認してください

repository exists
 ↑リポジトリが存在するか確認してください
```

**原因:** SSH鍵が登録されていない

**解決:**
```bash
# 1. SSH鍵の確認
ls -la ~/.ssh/

# 2. 公開鍵の表示
cat ~/.ssh/id_ed25519.pub

# 3. GitHubに登録(再登録)
# 4. 接続テスト
ssh -T git@github.com

# 成功時の表示:
Hi YourName! You've successfully authenticated...
```

---

### 【エラー6: ブランチが存在しない】

```bash
$ git checkout non-existent-branch

error: pathspec 'non-existent-branch' did not match any file(s) known to git
```

**読み方:**
```
error: pathspec 'non-existent-branch' did not match...
 ↑エラー: 'non-existent-branch'に一致するものがありません
```

**原因:** ブランチ名が間違っている

**解決:**
```bash
# 1. ブランチ一覧を確認
git branch -a

# 2. 正しいブランチ名で再実行
git checkout 正しいブランチ名
```

---

### 【エラー7: コミットメッセージが空】

```bash
$ git commit -m ""

Aborting commit due to empty commit message.
```

**読み方:**
```
Aborting commit due to empty commit message
 ↑空のコミットメッセージのため中止しました
```

**解決:**
```bash
# メッセージを付けて再実行
git commit -m "適切なメッセージ"
```

---

### 【エラー8: リモートURLが間違っている】

```bash
$ git push

fatal: repository 'https://github.com/wrong-user/wrong-repo.git/' not found
```

**読み方:**
```
fatal: repository '...' not found
 ↑致命的エラー: リポジトリが見つかりません
```

**原因:** URLが間違っている

**解決:**
```bash
# 1. 現在のURLを確認
git remote -v

# 2. 正しいURLに変更
git remote set-url origin git@github.com:正しいユーザー名/正しいリポジトリ.git

# 3. 確認
git remote -v

# 4. 再度プッシュ
git push
```

---

## 🎨 第4章: 画面の色の意味

### Git Status の色

```bash
$ git status

On branch main
Changes not staged for commit:
        modified:   file1.py     # 赤色

Changes to be committed:
        modified:   file2.py     # 緑色

Untracked files:
        file3.py                 # 赤色
```

**色の意味:**
- **赤色** = まだaddしていない(作業中)
- **緑色** = addした(ステージング済み)

---

### Git Diff の色

```bash
$ git diff

diff --git a/login.py b/login.py
index 1234567..abcdefg 100644
--- a/login.py
+++ b/login.py
@@ -5,7 +5,7 @@ def login(username, password):
     user = User.find(username)
     
-    return user.check_password(password)     # 赤色(削除)
+    return user.authenticate(password)       # 緑色(追加)
```

**色の意味:**
- **赤色(-)** = 削除された行
- **緑色(+)** = 追加された行

---

### Git Log の表示

```bash
$ git log --oneline --graph

* abc1234 (HEAD -> feature/add-login) 最新のコミット    # 黄色
* def5678 1つ前のコミット                              # 黄色
* ghi9012 (origin/main, main) mainブランチ             # 緑色
```

**色の意味:**
- **黄色** = コミットID
- **緑色** = ブランチ名
- **青色** = HEAD(現在地)

---

## 📊 第5章: プログレスバーの見方

### プッシュ中のプログレス

```bash
$ git push

Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
                 ↑進捗(パーセント)

Delta compression using up to 8 threads
Compressing objects:  50% (5/10)
                      ↑現在50%(5個/10個)

Writing objects:  80% (8/10), 1.23 MiB | 456.00 KiB/s
                  ↑80%完了、転送速度も表示

Total 10 (delta 3), reused 0 (delta 0), pack-reused 0
```

**読み方:**
- `100%` = 完了
- `(5/10)` = 5個/全10個
- `1.23 MiB | 456.00 KiB/s` = 容量とスピード

---

## 🔍 第6章: よく見る警告メッセージ

### 【警告1: 改行コードの変換】

```bash
$ git add file.py

warning: LF will be replaced by CRLF in file.py.
The file will have its original line endings in your working directory
```

**読み方:**
```
warning: LF will be replaced by CRLF
 ↑警告: LF(Unix)がCRLF(Windows)に変換されます
```

**状態:** ⚠️ 警告ですが問題なし(Windowsでは正常)

---

### 【警告2: デタッチドHEAD】

```bash
$ git checkout abc1234

Note: switching to 'abc1234'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
```

**読み方:**
```
detached HEAD state
 ↑HEADが分離された状態(ブランチに属していない)
```

**状態:** ⚠️ 特殊な状態、通常はブランチに戻る

```bash
# ブランチに戻る
git checkout main
```

---

## 📋 第7章: チートシート(画面の読み方)

### 成功のサイン

```bash
✅ done.                          # 完了
✅ Already up to date.            # 既に最新
✅ Fast-forward                   # 高速マージ成功
✅ working tree clean             # 変更なし
✅ [ブランチ名 コミットID] メッセージ  # コミット成功
✅ Branch '...' set up to track   # 追跡設定完了
✅ Hi YourName! You've successfully authenticated  # SSH接続成功
```

### エラー/注意のサイン

```bash
❌ error:                         # エラー
❌ fatal:                         # 致命的エラー
❌ CONFLICT                       # コンフリクト
❌ rejected                       # 拒否された
❌ Permission denied              # 権限拒否
❌ Aborting                       # 中止
⚠️ warning:                       # 警告(通常は問題なし)
⚠️ hint:                          # ヒント(対処法の提案)
```

---

## 🎯 第8章: 実践的な画面確認フロー

### 毎回確認すべき画面の流れ

```bash
# 1. 状態確認
$ git status
# ✅ 赤色ファイル確認 → add が必要
# ✅ 緑色ファイル確認 → commit 準備OK

# 2. 差分確認
$ git diff
# ✅ 赤い行(-) = 削除
# ✅ 緑の行(+) = 追加

# 3. 追加
$ git add .
# ✅ 何も表示されない = 正常

# 4. 再確認
$ git status
# ✅ 緑色になった = OK

# 5. コミット
$ git commit -m "メッセージ"
# ✅ [ブランチ コミットID] メッセージ = 成功

# 6. プッシュ
$ git push
# ✅ done. = 成功
# ❌ rejected = エラー → pull してから再push
```

---

これで Git Bash の画面の読み方は完璧です!

**覚えておくポイント:**
1. **緑色** = 良い状態(準備OK)
2. **赤色** = 作業中(まだ処理が必要)
3. **error/fatal** = エラー(対処が必要)
4. **warning/hint** = 警告・ヒント(参考情報)
5. **done** = 成功!

画面を見て意味がわからない時は、このガイドを見返してくださいね!

他に具体的なエラーメッセージや画面について質問はありますか?

いいですね！✨
では **Git Bash が初めての新人エンジニア向け** に、PC上で「階層移動 → ファイル作成 → 編集 → git add → commit → push → PR → Merge → Revert / Rebase / Cherry-pick → コンフリクト解決」までを **ゼロから丁寧に図解＋コピペ可能なコマンド** で説明します。
長めですが、そのまま手を動かして試せるように書きました。まずは落ち着いて順番にやってみてください 🙂

---

# はじめに（前提）

* OS：Windows（Git Bash を使う想定）
* Git と Git Bash（Git for Windows）がインストールされていること。
* GitHub アカウントがあること。
* （推奨）VSCode を使うと楽です。

必要なら最初にこのコマンドで確認・設定をしておいてください：

```bash
git --version
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
```

---

# 目次（クリックしてジャンプしたい気分で）

1. リポジトリ取得（clone / init）
2. ブランチ作成・移動
3. 階層移動とファイル作成（Hello World）
4. ファイル編集と保存（nano / echo / cat）
5. git add → commit → push（PR 作成まで）
6. PR をマージする流れ（GitHub UI と CLI）
7. 変更を取り消す：revert / reset の違い
8. rebase（基本と衝突時の対応）
9. cherry-pick（特定コミットを適用）
10. コンフリクトの出し方・確認・解決（手順）
11. よくあるトラブルと対処（まとめ）
12. 最後に：チートシート（コピペ集）

---

# 1) リポジトリを取得する（clone） or 新規作成（init）

既に GitHub にあるリポジトリを作業PCにコピー（推奨）：

```bash
# 例: HTTPS の場合
git clone https://github.com/<あなたのユーザー名>/<リポ名>.git
cd <リポ名>
```

もしローカルで新しく作る場合：

```bash
mkdir myrepo
cd myrepo
git init
# まだ GitHub リモートが無い場合は作って繋ぐ:
git remote add origin https://github.com/<user>/<repo>.git
```

---

# 2) ブランチ作成と移動（安全に作業するため）

本番（main）を直接編集しないで、自分専用ブランチで作業します：

```bash
# main を最新にしておく（リモートがある場合）
git checkout main
git pull origin main

# 新しいブランチ作成して移動
git checkout -b feature/hello-world
# ブランチ名は "feature/目的" など分かりやすく
```

図（簡単）

```
main ──●────
          \
 feature/hello-world ──●
```

---

# 3) 階層移動とファイル作成（Hello World を作る）

基本の階層操作（Git Bash）：

```bash
pwd        # 今いる場所を確認
ls -la     # フォルダ中のファイル一覧（隠し含む）
cd path/to/folder  # 移動
cd ..      # 一つ上へ
```

ファイルを作る（いくつか方法）：

A) 単純に1行書く（コピペ用）

```bash
echo 'print("Hello, world!")' > hello.py
```

B) 複数行を一気に書く（ヒアドキュメント）

```bash
cat > src/hello.py <<'PY'
def main():
    print("Hello, world!")

if __name__ == "__main__":
    main()
PY
```

C) 空ファイルを作る（あとで編集）

```bash
touch src/__init__.py
touch src/hello.py
```

確認：

```bash
ls -R      # 再帰的に一覧
cat src/hello.py  # 中身の確認
```

---

# 4) ファイルの編集（ターミナル内 or エディタ）

**nano**（ターミナル内で使える簡単なエディタ）：

```bash
nano src/hello.py
# 保存: Ctrl + O → Enter
# 終了: Ctrl + X
```

**VSCode** で開く（便利）：

```bash
code .
# VSCode でファイルを編集して Ctrl+S で保存
```

実行（動作確認）：

```bash
python src/hello.py
# → Hello, world! が表示されるはず
```

---

# 5) git add → commit → push（実際に GitHub に送る）

変更を Git に登録して GitHub に送ります。

```bash
# 変更を確認
git status

# 追加（ステージング）
git add src/hello.py

# もしくは全部まとめて
git add .

# コミット（メッセージは分かりやすく）
git commit -m "Add hello program: prints Hello, world"

# Push（初回は upstream を設定）
git push -u origin feature/hello-world
# 以後は git push origin feature/hello-world で OK
```

`-u` はローカルブランチとリモートブランチを紐付けます（以降 `git push` だけでOK）。

---

# 6) Pull Request（PR）作成＆マージ

* ブラウザで GitHub のリポジトリページを開くと「Compare & pull request」ボタンが出ます。
* タイトルと説明を書いて「Create pull request」。
* レビュー待ち → レビューで承認 → `Merge` ボタンでマージ（Squash/Merge / Create a merge commit / Rebase and merge）。

マージをローカルで取り込む場合（GitHubでマージした後）：

```bash
git checkout main
git pull origin main
```

ローカルで直接マージ（PR を使わない場合）：

```bash
# main に取り込む
git checkout main
git pull origin main
git merge --no-ff feature/hello-world
git push origin main
```

**注意**：チームでは PR を使ってレビュー→マージするワークフローが一般的です。

---

# 7) 変更を取り消す：revert と reset の違い（大事）

* `git revert <commit>`：指定コミットの変更を打ち消す「**逆向きの新しいコミット**」を作る（安全）。
* `git reset`：履歴を巻き戻す（**危険**、公開ブランチだと他人に迷惑）。

例：直前のコミットだけを取り消したい（履歴は残す）

```bash
# 直前コミットを取り消す（新しいコミットで打ち消す）
git revert HEAD
git push origin main
```

例：ローカルの未プッシュコミットを無かったことに（注意）

```bash
git reset --hard HEAD~1   # 直前のコミットを完全に削除（ファイルも戻る）
# 他の人と共有しているブランチでこれは使わない
```

---

# 8) rebase（履歴をきれいに） — 基本と注意点

`rebase` の用途は「自分のブランチのコミット履歴を最新の main の上に手早く並べ直す」こと。

基本コマンド：

```bash
# feature を main の先頭に追従させたいとき
git checkout feature/hello-world
git fetch origin
git rebase origin/main
# もしコンフリクトが出たら（後述の手順で解決）
git rebase --continue
# やめたいときは
git rebase --abort
```

対話的（コミットをまとめたり編集したり）：

```bash
git rebase -i HEAD~3   # 直近3コミットを対象に対話的リベース
# エディタが開くので pick -> squash 等を指定
```

**重要な注意**：

* **公開済み（他人が使っている）ブランチで rebase して強制プッシュすると履歴が書き換わり迷惑をかけます。**
* rebase 後は `git push --force-with-lease` を使う（`--force-with-lease` の方が安全）。

```bash
git push --force-with-lease origin feature/hello-world
```

---

# 9) cherry-pick（特定のコミットだけ別ブランチに持ってくる）

あるブランチの1コミットだけ main に取り込みたいときなどに使います。

手順：

```bash
# まずコミットハッシュを確認
git log --oneline

# main に切り替え
git checkout main
git pull origin main

# cherry-pick
git cherry-pick <コミットハッシュ>

# 反映を push
git push origin main
```

もしコンフリクトが出たら、解決して `git add` → `git cherry-pick --continue`。

---

# 10) コンフリクト（衝突） — 発生の仕組みと超具体的な解決手順

### 発生例（イメージ）

* あなたの feature ブランチで `login.py` の同じ行を編集
* 同僚が main で同じ行を既に編集して main にマージ
* あなたが `git pull origin main` したときに自動統合できない → コンフリクト

### 典型的な出力（例）

```bash
Auto-merging login.py
CONFLICT (content): Merge conflict in login.py
Automatic merge failed; fix conflicts and then commit the result.
```

### 解決までの手順（実践）

1. 状況確認

```bash
git status
# Unmerged paths として衝突ファイルが出る
```

2. 衝突ファイルの中身を見る（編集）

```python
# login.py の中
def login(...):
    ...
<<<<<<< HEAD
    # あなたの変更
    if user.authenticate(password):
        return True
=======
    # 相手の変更
    if user.verify_password(password):
        return True
>>>>>>> main
    ...
```

3. 手動で編集して「どちらを採用するか」または「合成」する

   * `<<<<<<<` `=======` `>>>>>>>` のマーカーを**全て削除**して、最終的なコードにする。

例（両方を組み合わせた解決）：

```python
def login(username, password):
    if user.verify_password(password):
        # こちらのメソッド名を使いつつ自分の処理も残す
        user.update_last_login()
        return True
    return False
```

4. 解決したらステージングしてコミット

```bash
git add login.py
git commit -m "Resolve merge conflict in login.py: use verify_password + update_last_login"
```

5. push（必要なら）

```bash
git push origin feature/your-branch
# もし main を直接マージした場合は main を push
```

### 便利コマンド（衝突時）

* マージ中止して最初に戻す：

```bash
git merge --abort   # merge の場合
git rebase --abort  # rebase の場合
```

* 自分の変更（ours）を採る：

```bash
git checkout --ours login.py
git add login.py
git commit -m "Accept ours for login.py"
```

* 相手（theirs）を採る：

```bash
git checkout --theirs login.py
git add login.py
git commit -m "Accept theirs for login.py"
```

> 注意：`--ours/--theirs` はファイル全体を丸ごと採るので、細かく手で編集した方が安全なことが多いです。

### GUI/VSCode でやる（おすすめ）

* VSCode でファイルを開くと「Accept Current / Incoming / Both / Compare」ボタンが出ます。クリックで簡単に解決できます。解決後は `git add` → `git commit`。

---

# 11) よくあるトラブルと対処（まとめ）

* `git push` が拒否される → 他者の更新が先に入っている：`git pull --rebase origin main` → 修正 → push
* 認証エラー（403, permission denied） → HTTPS なら PAT、SSH なら SSH key を確認
* 履歴を誤って書き換えた → `git reflog` で戻せることがある
* コンフリクト多発 → こまめに `git pull` して同期、機能ごとにブランチを分ける

---

# 12) 最後に：便利な「コピペ用」 チートシート

基本ワークフロー（コピペ）：

```bash
# clone
git clone https://github.com/<user>/<repo>.git
cd <repo>

# ブランチ作成
git checkout -b feature/hello-world

# 作業（例: ファイル作成）
mkdir -p src
cat > src/hello.py <<'PY'
def main():
    print("Hello, world!")
if __name__ == "__main__":
    main()
PY

# 確認・ステージ・コミット
git status
git add src/hello.py
git commit -m "Add hello program"

# プッシュ
git push -u origin feature/hello-world

# PR → GitHubで Create pull request → レビュー → Merge

# マージ後ローカル main を更新
git checkout main
git pull origin main

# ブランチ削除（不要なら）
git branch -d feature/hello-world
git push origin --delete feature/hello-world
```

Rebase（安全に）：

```bash
git checkout feature/hello-world
git fetch origin
git rebase origin/main
# コンフリクトが出たら解決して:
git rebase --continue
# 再プッシュ（履歴書き換えなので注意）
git push --force-with-lease origin feature/hello-world
```

Revert（公開済みを取り消す安全な方法）：

```bash
git log --oneline
git revert <commit-hash>
git push origin main
```

Cherry-pick（単一コミットを適用）：

```bash
git checkout main
git pull origin main
git cherry-pick <commit-hash>
git push origin main
```

コンフリクト中にやめたいとき：

```bash
git merge --abort    # merge の途中なら中止
git rebase --abort   # rebase の途中なら中止
```

---

# 最後に（学習のコツ）

* 最初は「clone → ブランチ → 編集 → add → commit → push → PR → merge」を何度も繰り返すこと。習うより慣れろ！
* コンフリクトは怖がらなくてOK。マーカー（`<<<<<<<`）は必ず消すこと。
* 履歴を書き換える操作（reset / rebase / force push）はチームと相談して使う。
* 困ったら `git status` と `git log --oneline` を素早く見て状況を把握する癖をつける。
* わからなければ先輩に「コンフリクトが起きたので一緒に見てもらえますか？」と相談するのが最速の学習法。

---

必要なら次に、**あなたの環境（例：今いるフォルダの `pwd` と `git status` の出力）を教えてくれれば**、実際にその状態を想定して「どう次のコマンドを打つか」を具体的に指示できます。
どこをもう少し掘り下げたいですか？（例：「rebase の実例」「コンフリクトの実例で手を動かしたい」「VSCode での解決手順」など）

完璧です👏
今回は「**Git Bashでのコンフリクト対応の実例いろいろ**」を、
実際のターミナル操作（コピペOK）＋説明付きでまとめます。

---

# 🧩 Gitコンフリクト対応まとめ（新人エンジニア向け）

## 🌱 目次

1. コンフリクトの基本構造
2. パターン①：自分の変更を採用（ours）
3. パターン②：相手の変更を採用（theirs）
4. パターン③：両方採用（手動編集）
5. パターン④：リベース中のコンフリクト
6. パターン⑤：コンフリクトをやめてやり直す
7. 状況確認とデバッグのコマンド
8. ミニまとめとコツ

---

## 🧠 1️⃣ コンフリクトの基本構造

マージ時に同じファイルを違うブランチで編集すると、
Gitはこういう状態を作ります👇

```python
<<<<<<< HEAD
print("Hello from main branch")
=======
print("Hello from feature branch")
>>>>>>> feature/change-hello
```

* `<<<<<<< HEAD`：今いるブランチ（main）の変更
* `=======`：区切り線
* `>>>>>>>`：マージ対象の変更

---

## 💪 2️⃣ パターン①：自分の変更を採用（ours）

### ▶ 状況

main と feature が同じ行を編集して衝突。

```bash
git merge feature/change-hello
```

### ▶ 対応手順

```bash
# 自分（HEAD）の変更を採用
git checkout --ours hello.py

# 変更をステージング
git add hello.py

# 解決をコミット
git commit -m "fix conflict: keep ours (main)"
```

### ✅ 結果

mainの内容が採用され、feature側の変更は破棄されます。

---

## 🤝 3️⃣ パターン②：相手の変更を採用（theirs）

### ▶ 状況

自分より相手（feature）の変更を優先したい場合。

```bash
git merge feature/change-hello
```

### ▶ 対応手順

```bash
# 相手の変更を採用
git checkout --theirs hello.py

# 変更をステージング
git add hello.py

# 解決をコミット
git commit -m "fix conflict: accept theirs (feature)"
```

### ✅ 結果

featureブランチの変更だけが残ります。

---

## 🧷 4️⃣ パターン③：両方採用（手動編集）

### ▶ 状況

両方のブランチのコードをマージして共存させたい場合。

```python
<<<<<<< HEAD
print("Hello from main branch")
=======
print("Hello from feature branch")
>>>>>>> feature/change-hello
```

### ▶ 対応方法

`hello.py` を手で開いて、こう修正：

```python
print("Hello from main branch")
print("Hello from feature branch")
```

### ▶ コマンド

```bash
git add hello.py
git commit -m "fix conflict: merge both changes"
```

---

## 🌀 5️⃣ パターン④：rebase中のコンフリクト

### ▶ 状況

リベース（`git rebase main`）中に同じファイルで衝突。

```bash
git rebase main
```

### ▶ 対応方法

```bash
# 状態確認
git status

# ファイルを修正（VSCodeやnanoで）
nano hello.py

# 修正後にステージング
git add hello.py

# リベース続行
git rebase --continue
```

### ▶ やめたい場合

```bash
git rebase --abort
```

---

## 🔙 6️⃣ パターン⑤：やり直したい（マージ中止）

「うまく直せない！もう一回やりたい！」というとき。

```bash
# マージ中止
git merge --abort

# or リベース中止
git rebase --abort
```

Gitがマージ前の状態に戻ります。

---

## 🧭 7️⃣ 状況確認とトラブル調査コマンド

| コマンド                        | 説明              |
| --------------------------- | --------------- |
| `git status`                | 現在の状況・衝突ファイルを確認 |
| `git diff`                  | 変更点を表示          |
| `git diff --base <file>`    | 共通の祖先との違いを見る    |
| `git log --oneline --graph` | ブランチ関係を視覚的に確認   |
| `git merge --abort`         | マージを中止          |
| `git rebase --abort`        | リベースを中止         |

---

## 🧩 8️⃣ ミニまとめとコツ

| 状況       | 対応コマンド                                      | 備考      |
| -------- | ------------------------------------------- | ------- |
| 自分の変更を採用 | `git checkout --ours <file>`                | HEADを優先 |
| 相手の変更を採用 | `git checkout --theirs <file>`              | マージ先を優先 |
| 両方採用     | 手動で編集＋`git add`                             | 柔軟な対応   |
| リベース中    | `git rebase --continue`                     | 続行      |
| 中止したい    | `git merge --abort` or `git rebase --abort` | やり直し    |

---

## 💡 コンフリクトを避けるコツ

1. **こまめに `git pull origin main`**
2. **小さい単位でコミット＆プッシュ**
3. **同じファイルを複数人で同時に編集しない**
4. **マージ前に `git fetch` + `git diff` で確認**
5. **PRを早めに出す！**

---

## 🎁 まとめ図（わかりやすいイメージ）

```
mainブランチ：print("A")
          ↓
          ↓
featureブランチ：print("B")
          ↓
          ↓
git merge feature
          ↓
💥 同じ行に違う文字！
          ↓
🧩 修正 → git add → git commit
```

---

ご希望があれば次に👇
💻 **図解入り「Gitコンフリクト対応チートシート（PDF版）」**
を作ります（Gitbashコマンド＋矢印図＋初心者向け用語解説つき）。

作って配布用にまとめましょうか？
最高です👏
ここでは新人エンジニア向けに **「Gitリベース（rebase）」と「リバート（revert）」** を
**Git Bash実行例＋図解＋コピペOKコマンド** で超やさしく解説します💪

---

# 🧩 Gitリベース & リバート完全ガイド

（新人エンジニア向け・Git Bash版）

---

## 🌱 まずざっくり違い

| 操作名        | 意味                      | よく使う場面         | 履歴    |
| ---------- | ----------------------- | -------------- | ----- |
| **rebase** | コミットの“並び順”をきれいにする       | mainに最新を反映したい時 | 変わる   |
| **revert** | コミットを“取り消す”（逆操作コミットを作る） | バグを戻したい時       | 変わらない |

---

# 🧭 第1章：リベース（rebase）

---

## 🧩 1️⃣ リベースとは？

リベースは「**自分のブランチの土台を最新に置き換える**」操作。

### 図で理解 👇

```
main:    A---B---C
feature:     └──D---E
```

「mainが進んだから、自分(feature)を最新に乗せたい！」

➡ リベースするとこうなる：

```
main:    A---B---C
feature:             └──D'---E'
```

見た目はきれいに一本線になります✨

---

## 🧮 2️⃣ 実行手順（Git Bash）

### ▶ 例：featureブランチをmainに合わせたい

```bash
# ブランチ確認
git branch

# featureブランチにいることを確認して
git rebase main
```

### ▶ もしコンフリクトが出たら

```bash
# 状況確認
git status

# ファイルを編集して保存
nano app.py  # or VSCodeで開く

# 修正をステージング
git add app.py

# リベース続行
git rebase --continue
```

### ▶ やり直したいとき

```bash
git rebase --abort
```

---

## 🧠 3️⃣ リベースとマージの違い

| 操作         | 履歴の見え方       | 使いどころ     |
| ---------- | ------------ | --------- |
| **merge**  | 履歴が枝分かれして残る  | チームでの統合   |
| **rebase** | 履歴が一本にきれいになる | 自分のブランチ整理 |

💡 **個人開発やプルリク提出前** にリベースするときれいな履歴にできます！

---

## 🧪 4️⃣ リベース実例（Git Bash）

```bash
# mainの更新を反映したい！
git checkout feature/login-ui
git fetch origin
git rebase origin/main

# コンフリクトした場合
git status
# 修正して
git add .
git rebase --continue
```

---

# 🔙 第2章：リバート（revert）

---

## 🧩 1️⃣ リバートとは？

💬 「コミットを削除する」ではなく
**“取り消すための逆コミットを作る”** 操作です。

### 図👇

```
A -- B -- C -- D(バグあり)
```

↓
`git revert D`

↓

```
A -- B -- C -- D -- E(← Dを打ち消す)
```

つまり、履歴は消さず「元に戻すだけ」！

---

## 🧮 2️⃣ 実行手順（Git Bash）

### ▶ 特定のコミットを打ち消す

```bash
git log --oneline
# 例）abcd123 Fix login bug

git revert abcd123
```

→ 自動でエディタが開くので、メッセージを保存して終了。
または以下でもOK👇

```bash
git revert -m "Revert: Fix login bug"
```

---

### ▶ 連続した複数コミットを戻したい

```bash
# 直近3つをまとめて取り消す
git revert HEAD~3..HEAD
```

---

### ▶ リバートでコンフリクトが出た場合

```bash
git status
# ファイルを修正して保存
git add <file>
git revert --continue
```

やめたい時👇

```bash
git revert --abort
```

---

## 💡 3️⃣ リバート vs リセット vs リベース

| 操作         | 意味          | 履歴消える？  | チーム開発で安全？ |
| ---------- | ----------- | ------- | --------- |
| **revert** | 逆コミット作って戻す  | ❌消えない   | ✅安全       |
| **reset**  | 履歴を戻す（巻き戻し） | ⚠️消える   | ❌危険       |
| **rebase** | 履歴を並び替える    | ⚠️書き換える | ⚠️要注意     |

---

# 🧰 実践例：リバートの流れ

### ✅ 例：mainに誤ったコードをコミットした

```bash
# 履歴を確認
git log --oneline

# 戻したいコミットをリバート
git revert 9f5a3b7
```

**結果：**

```bash
[main 0a7fcd1] Revert "Add wrong print"
 1 file changed, 1 deletion(-)
```

---

# ⚙️ よくあるトラブル対処

| 状況       | 解決方法                        |
| -------- | --------------------------- |
| リベース失敗   | `git rebase --abort`        |
| リバート中止   | `git revert --abort`        |
| 間違えて上書き  | `git reflog` で過去コミットを確認して戻す |
| コンフリクト多発 | まず `git status` で修正対象を特定    |

---

# 🎨 図解まとめ

```
📦 rebase：土台を並べ替える
 main: A---B---C
 feat:     └─D---E
 ↓ rebase
 main: A---B---C---D'---E'

📦 revert：戻すコミットを追加
 main: A---B---C---D(バグ)
 ↓ revert D
 main: A---B---C---D---E(取り消し)
```

---

# 🧩 最後にポイントまとめ

| 操作         | よく使う場面         | 安全度  | コマンド例                                       |
| ---------- | -------------- | ---- | ------------------------------------------- |
| **rebase** | mainの更新を取り込みたい | ⚠️注意 | `git rebase main`                           |
| **revert** | バグを戻したい        | ✅安全  | `git revert <commit>`                       |
| **abort**  | やり直したい         | ✅安全  | `git rebase --abort` / `git revert --abort` |

---

次のステップ👇
ご希望があれば次に作れます：

🎁 **「Rebase / Revert 図解チートシート（PDF版）」**

* Gitbashコマンド一覧
* 失敗した時のやり直し手順
* コンフリクト例つき

作成して配布用（印刷・研修用）にまとめましょうか？

# Git Bash 結果画面 完全解読ガイド(正常・異常・謎の全て)

## 🎯 目次

```
1. 正常な画面パターン(これが出たら成功!)
2. 異常な画面パターン(エラー・対処法)
3. よくわからない謎の表示(実は正常/要注意)
4. 画面の色・記号の完全解説
5. 実例で学ぶ判断方法
```

---

## ✅ 第1章: 正常な画面パターン

### 【パターン1】git status - 完璧な状態

```bash
$ git status

On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
```

**判定:** ✅ **完全に正常!**

**意味:**
- `On branch main` = mainブランチにいます
- `up to date` = リモートと同期しています
- `working tree clean` = 変更なし、何も作業していない

**色:** 全て白色(または緑色)

**次にできること:**
- 新しいブランチを作成
- コードを編集開始
- そのまま作業継続

---

### 【パターン2】git add - 無言は成功

```bash
$ git add src/login.py
$
```

**判定:** ✅ **正常!何も表示されない = 成功**

**重要:** Gitコマンドは**成功した時ほど何も言わない**

**確認方法:**
```bash
$ git status

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   src/login.py
```

**色:** 緑色 = 正常にステージングされた

---

### 【パターン3】git commit - 成功の証

```bash
$ git commit -m "ログイン機能を追加"

[feature/add-login abc1234] ログイン機能を追加
 1 file changed, 15 insertions(+)
 create mode 100644 src/login.py
```

**判定:** ✅ **正常!コミット成功**

**詳細解説:**
```
[feature/add-login abc1234]
 ↑ブランチ名      ↑コミットID(ハッシュ値の先頭7文字)

ログイン機能を追加
 ↑あなたが書いたコミットメッセージ

1 file changed
 ↑1個のファイルが変更された

15 insertions(+)
 ↑15行追加された
 ↑(+) = プラス、追加の意味

create mode 100644 src/login.py
 ↑新しいファイルを作成
 ↑100644 = 通常の読み書き可能なファイル
```

**色:** 全て白色

---

### 【パターン4】git push - 完全成功

```bash
$ git push

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 456 bytes | 456.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), done.
To github.com:company/project.git
   abc1234..def5678  feature/add-login -> feature/add-login
```

**判定:** ✅ **正常!プッシュ成功**

**詳細解説:**
```
Enumerating objects: 5, done.
 ↑オブジェクトを数えています(5個)
 ↑done. = 完了!

Counting objects: 100% (5/5), done.
 ↑100% = 全て完了

Compressing objects: 100% (3/3), done.
 ↑圧縮完了(データを小さくして送信)

Writing objects: 100% (3/3), 456 bytes
 ↑書き込み完了(456バイト送信)

456.00 KiB/s
 ↑転送速度(1秒あたり456キロバイト)

remote: Resolving deltas: 100% (1/1), done.
 ↑リモート(GitHub)側で処理完了

abc1234..def5678
 ↑古いコミットID → 新しいコミットID
 ↑この範囲がプッシュされた

feature/add-login -> feature/add-login
 ↑ローカル          ↑リモート
 ↑両方のブランチが同期された
```

**色:** 進捗バーは通常白色

---

### 【パターン5】git pull - 最新だった

```bash
$ git pull origin main

From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```

**判定:** ✅ **正常!既に最新**

**意味:**
- リモートから情報を取得
- でも、既に最新なので何もダウンロードしない
- 変更なし

**色:** 全て白色

---

### 【パターン6】git pull - 新しい変更を取得

```bash
$ git pull origin main

remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), 678 bytes | 67.00 KiB/s, done.
From github.com:company/project
 * branch            main       -> FETCH_HEAD
   abc1234..def5678  main       -> origin/main
Updating abc1234..def5678
Fast-forward
 src/auth.py | 5 +++--
 README.md   | 2 ++
 2 files changed, 5 insertions(+), 2 deletions(-)
```

**判定:** ✅ **正常!自動マージ成功**

**詳細解説:**
```
Fast-forward
 ↑ファスト・フォワード
 ↑意味: 高速マージ(コンフリクトなし!)
 ↑これが出たら安全にマージされた証拠

src/auth.py | 5 +++--
 ↑変更されたファイル
 ↑5行変更(3行追加、2行削除)

+++-- の意味:
 + = 追加行
 - = 削除行
```

**色:** 緑色(+) と 赤色(-)

---

## ❌ 第2章: 異常な画面パターン(エラー)

### 【エラー1】コミットできない

```bash
$ git commit -m "メッセージ"

On branch feature/add-login
nothing to commit, working tree clean
```

**判定:** ❌ **エラー(git add忘れ)**

**原因:** ファイルをステージングしていない

**対処:**
```bash
# 1. 何を変更したか確認
$ git status

# 2. ファイルを追加
$ git add ファイル名.py

# 3. 再度コミット
$ git commit -m "メッセージ"
```

**見分け方:**
- `nothing to commit` という言葉
- 色: 赤色はない(全て白)

---

### 【エラー2】プッシュ拒否

```bash
$ git push

To github.com:company/project.git
 ! [rejected]        feature/add-login -> feature/add-login (fetch first)
error: failed to push some refs to 'github.com:company/project.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
```

**判定:** ❌ **エラー(リモートが新しい)**

**詳細解説:**
```
! [rejected]
 ↑! = 警告マーク
 ↑[rejected] = 拒否されました

error: failed to push
 ↑error: = エラー発生
 ↑プッシュ失敗

hint: Updates were rejected because...
 ↑ヒント: リモートに新しい作業があります
 ↑hint: = ヒント(解決方法の提案)

hint: This is usually caused by another repository pushing...
 ↑他の誰かがプッシュしたのが原因

hint: You may want to first integrate the remote changes
 ↑先にリモートの変更を取り込んでください
```

**色:** 
- `error:` = 赤色
- `hint:` = 黄色または白色

**対処:**
```bash
# 1. リモートの変更を取得
$ git pull origin feature/add-login

# 2. コンフリクトがなければ自動マージ
# 3. 再度プッシュ
$ git push
```

---

### 【エラー3】プルできない(未コミット)

```bash
$ git pull origin main

error: Your local changes to the following files would be overwritten by merge:
        src/login.py
Please commit your changes or stash them before you merge.
Aborting
```

**判定:** ❌ **エラー(未保存の変更がある)**

**詳細解説:**
```
error: Your local changes to the following files...
 ↑エラー: ローカルの変更が上書きされます

src/login.py
 ↑このファイルに未コミットの変更

Please commit your changes or stash them
 ↑変更をコミットするか一時退避してください

Aborting
 ↑中止しました
```

**色:** `error:` = 赤色

**対処方法1: コミットしてからプル**
```bash
$ git add .
$ git commit -m "作業中の変更を保存"
$ git pull origin main
```

**対処方法2: 一時退避**
```bash
$ git stash
$ git pull origin main
$ git stash pop
```

---

### 【エラー4】SSH接続エラー

```bash
$ git push

git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
```

**判定:** ❌ **致命的エラー(SSH認証失敗)**

**詳細解説:**
```
Permission denied (publickey)
 ↑権限拒否(公開鍵認証が失敗)

fatal: Could not read from remote repository
 ↑fatal: = 致命的エラー
 ↑リモートリポジトリから読み取れません

correct access rights
 ↑正しいアクセス権限を確認してください
```

**色:** 
- `fatal:` = 赤色
- 全体的に赤い = 重大な問題

**対処:**
```bash
# 1. SSH鍵の確認
$ ls -la ~/.ssh/
# id_ed25519 と id_ed25519.pub があるか

# 2. 公開鍵を表示
$ cat ~/.ssh/id_ed25519.pub

# 3. GitHubに登録(再登録)

# 4. 接続テスト
$ ssh -T git@github.com

# 成功時:
Hi YourName! You've successfully authenticated...
```

---

### 【エラー5】コンフリクト発生

```bash
$ git merge main

Auto-merging src/login.py
CONFLICT (content): Merge conflict in src/login.py
Automatic merge failed; fix conflicts and then commit the result.
```

**判定:** ⚠️ **エラー(コンフリクト発生)**

**詳細解説:**
```
CONFLICT (content): Merge conflict
 ↑CONFLICT = コンフリクト(衝突)
 ↑content = 内容が衝突

Automatic merge failed
 ↑自動マージは失敗しました
 ↑人間が手動で解決する必要がある
```

**色:** `CONFLICT` = 赤色

**プロンプトの変化:**
```bash
# 通常
User@PC MINGW64 /c/projects/project (feature/my-work)

# コンフリクト中
User@PC MINGW64 /c/projects/project (feature/my-work|MERGING)
                                                    ↑この表示が追加
```

**対処:** (第2章のコンフリクト解決参照)

---

## 🤔 第3章: よくわからない謎の表示

### 【謎1】warning: LF will be replaced by CRLF

```bash
$ git add file.py

warning: LF will be replaced by CRLF in file.py.
The file will have its original line endings in your working directory
```

**判定:** ⚠️ **警告だが正常(Windowsでは普通)**

**詳細解説:**
```
warning: LF will be replaced by CRLF
 ↑警告: LF(改行コード)がCRLFに置き換えられます
 
LF = Unix/Mac の改行コード
CRLF = Windows の改行コード

The file will have its original line endings
 ↑ファイルは元の改行コードのまま
 ↑(リポジトリにはLFで保存される)
```

**色:** `warning:` = 黄色

**これは正常?異常?**
- ✅ **正常です!** Windowsでは自動変換される
- Git が自動で調整してくれている
- 無視してOK

**消したい場合:**
```bash
git config --global core.autocrlf true
```

---

### 【謎2】detached HEAD state

```bash
$ git checkout abc1234

Note: switching to 'abc1234'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

HEAD is now at abc1234 ログイン機能を追加
```

**判定:** ⚠️ **特殊な状態(危険ではない)**

**詳細解説:**
```
detached HEAD state
 ↑デタッチド・ヘッド・ステート
 ↑HEADが分離された状態

You can look around
 ↑見て回ることができます
 ↑過去のコードを見るだけなら問題なし

make experimental changes
 ↑実験的な変更もできます
 ↑ただし、ブランチに戻ると消える
```

**プロンプトの変化:**
```bash
# 通常
User@PC MINGW64 /c/projects/project (main)

# detached HEAD
User@PC MINGW64 /c/projects/project ((abc1234))
                                    ↑ブランチ名じゃなくコミットID
```

**これは正常?異常?**
- ⚠️ **特殊な状態**(過去のコードを見ている)
- 作業しない方が良い
- ブランチに戻るべき

**対処:**
```bash
# 元のブランチに戻る
$ git checkout main

# または
$ git switch main
```

---

### 【謎3】hint: 大量のメッセージ

```bash
$ git push

hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```

**判定:** ⚠️ **エラーだが、hintは単なる助言**

**詳細解説:**
```
hint: Updates were rejected...
 ↑ヒント: 更新が拒否されました
 ↑hint: = ヒント、助言

hint: Integrate the remote changes
 ↑リモートの変更を統合してください

hint: See the 'Note about fast-forwards'...
 ↑詳細はヘルプを見てください
```

**色:** `hint:` = 黄色または灰色

**これは正常?異常?**
- ❌ **エラーが起きている**
- hint: は解決方法を教えてくれている
- hint: 自体は怖くない(親切な情報)

**読み方のコツ:**
1. `error:` や `fatal:` を探す(本当の問題)
2. `hint:` は解決方法(読むと助かる)
3. `warning:` は注意(無視できる場合も)

---

### 【謎4】remote: Enumerating objects...

```bash
$ git pull origin main

remote: Enumerating objects: 100, done.
remote: Counting objects: 100% (100/100), done.
remote: Compressing objects: 100% (67/67), done.
remote: Total 78 (delta 45), reused 52 (delta 11), pack-reused 0
Receiving objects: 100% (78/78), 23.45 KiB | 1.23 MiB/s, done.
Resolving deltas: 100% (45/45), completed with 12 local objects.
```

**判定:** ✅ **完全に正常!進行中の表示**

**詳細解説:**
```
remote: Enumerating objects: 100
 ↑remote: = リモート(GitHub)からのメッセージ
 ↑オブジェクトを数えています(100個)

100% (100/100), done.
 ↑進捗100%、完了!
 ↑(100/100) = 100個中100個処理

Receiving objects: 100% (78/78)
 ↑オブジェクトを受信中
 ↑こちらはローカル側の処理

23.45 KiB | 1.23 MiB/s
 ↑ダウンロード容量 | 転送速度
 ↑KiB = キロバイト、MiB = メガバイト

done.
 ↑完了!
```

**色:** 通常は白色(進行中は動的に表示)

**これは正常?異常?**
- ✅ **完全に正常!**
- 処理が進んでいる証拠
- 最後に `done.` が出ればOK

---

### 【謎5】Unpacking objects の進捗バー

```bash
Unpacking objects:  50% (50/100)
Unpacking objects:  75% (75/100)
Unpacking objects: 100% (100/100), done.
```

**判定:** ✅ **正常!リアルタイム進捗**

**意味:**
- オブジェクトを展開中
- パーセンテージで進捗表示
- `done.` で完了

**これは正常?異常?**
- ✅ **正常!** 処理が進んでいる
- 途中で止まったらネットワーク問題の可能性

---

### 【謎6】* branch main -> FETCH_HEAD

```bash
$ git pull origin main

From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```

**判定:** ✅ **正常!**

**詳細解説:**
```
From github.com:company/project
 ↑取得元のURL

* branch            main       -> FETCH_HEAD
 ↑* = 成功マーク
 ↑branch = ブランチ
 ↑main = ブランチ名
 ↑FETCH_HEAD = 取得した内容を一時保存する場所
 ↑-> = 矢印(〜へ)

Already up to date.
 ↑既に最新です
```

**これは正常?異常?**
- ✅ **完全に正常!**
- リモートから情報を取得した
- でも変更はなかった

---

## 🎨 第4章: 画面の色・記号の完全解説

### 色の意味

| 色 | 意味 | 例 |
|---|---|---|
| **白色** | 通常の情報 | ファイル名、メッセージ |
| **緑色** | 成功・追加 | ステージング済み、追加行 |
| **赤色** | エラー・削除 | error:, fatal:, 削除行 |
| **黄色** | 警告 | warning:, コミットID |
| **青色** | ブランチ名 | (main), HEAD |
| **灰色** | ヒント | hint:, 参考情報 |

---

### 記号の意味

| 記号 | 読み方 | 意味 |
|---|---|---|
| `$` | ドル | コマンド入力待ち |
| `+` | プラス | 追加された行 |
| `-` | マイナス | 削除された行 |
| `*` | アスタリスク | 現在のブランチ、成功マーク |
| `!` | エクスクラメーション | 警告、拒否 |
| `~` | チルダ | ホームディレクトリ |
| `..` | ドット・ドット | コミット範囲(A..B) |
| `->` | 矢印 | 〜へ(変換、移動) |
| `|` | パイプ | マージ中などの状態表示 |

---

### 重要な単語

| 単語 | 読み方 | 意味 | 正常/異常 |
|---|---|---|---|
| `done` | ダン | 完了 | ✅ 正常 |
| `error` | エラー | エラー | ❌ 異常 |
| `fatal` | フェイタル | 致命的エラー | ❌ 重大異常 |
| `warning` | ワーニング | 警告 | ⚠️ 注意 |
| `hint` | ヒント | ヒント | ℹ️ 情報 |
| `rejected` | リジェクテッド | 拒否された | ❌ 異常 |
| `conflict` | コンフリクト | 衝突 | ⚠️ 要対処 |
| `failed` | フェイルド | 失敗 | ❌ 異常 |
| `success` | サクセス | 成功 | ✅ 正常 |
| `clean` | クリーン | きれい、問題なし | ✅ 正常 |
| `up to date` | アップ・トゥ・デート | 最新 | ✅ 正常 |
| `Fast-forward` | ファスト・フォワード | 高速マージ | ✅ 正常 |
| `Aborting` | アボーティング | 中止 | ⚠️ 中断 |

---

## 📊 第5章: 実例で学ぶ判断方法

### 【実例1】この画面は正常?異常?

```bash
$ git push

Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (2/2), 234 bytes, done.
Total 2 (delta 0), reused 0 (delta 0)
To github.com:company/project.git
   abc1234..def5678  main -> main
```

**判断:**
1. `done.` が2回出ている → ✅ 完了している
2. 赤い `error:` や `fatal:` がない → ✅ エラーなし
3. `abc1234..def5678` → ✅ コミットIDが更新された
4. `main -> main` → ✅ プッシュ成功

**結論:** ✅ **完全に正常!プッシュ成功!**

---

### 【実例2】この画面は正常?異常?

```bash
$ git status

On branch feature/my-work
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
        modified:   src/login.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        src/new_file.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**判断:**
1. `error:` や `fatal:` がない → ✅ エラーではない
2. 赤色のファイル名 → ⚠️ まだaddしていない
3. `no changes added to commit` → ⚠️ コミット準備ができていない

**結論:** ✅ **正常だが作業中** (git add が必要)

---

### 【実例3】この画面は正常?異常?

```bash
$ git commit -m "test"

On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
```

**判断:**
1. `nothing to commit` → ⚠️ コミットできない
2. `working tree clean` → ✅ 変更なし
3. `ahead of 'origin/main' by 1 commit` → ℹ️ プッシュしていないコミットが1個ある

**結論:** ⚠️ **異常(git add忘れ)** または **既にコミット済みでpushが必要**

---

### 【実例4】この画面は正常?異常?

```bash
$ git pull origin main

Auto-merging src/login.py
CONFLICT (content): Merge conflict in src/login.py
Automatic merge failed; fix conflicts and then commit the result.
```

**判断:**
1. `CONFLICT` が出ている → ❌ コンフリクト発生
2. `failed` という単語 → ❌ 失敗
3. `fix conflicts` → ℹ️ 解決方法の指示

**結論:** ❌ **異常(コンフリクト)** 手動で解決が必要

---

### 【実例5】この画面は正常?異常?

```bash
$ git add .

warning: LF will be replaced by CRLF in test.py.
The file will have its original line endings in your working directory
```

**判断:**
1. `warning:` だが `error:` ではない → ⚠️ 警告レベル
2. `LF will be replaced by CRLF` → ℹ️ Windowsの自動変換
3. 処理は続行している → ✅ 動作している

**結論:** ✅ **正常(Windowsでは普通の警告)**

---

## 🎯 第6章: 判断フローチャート

```
画面を見る
    ↓
"error:" または "fatal:" がある?
    ├─ YES → ❌ 異常! エラー対処が必要
    └─ NO  → 次へ
    ↓
"done." が表示されている?
    ├─ YES → ✅ 正常! 処理完了
    └─ NO  → 次へ
    ↓
"CONFLICT" がある?
    ├─ YES → ⚠️ コンフリクト! 解決が必要
    └─ NO  → 次へ
    ↓
"warning:" だけ?
    ├─ YES → ⚠️ 警告(多くは無視してOK)
    └─ NO  → 次へ
    ↓
"hint:" だけ?
    ├─ YES → ℹ️ ヒント(参考情報)
    └─ NO  → 次へ
    ↓
何も出ない(無言)?
    └─ → ✅ 正常! (Gitは成功時ほど静か)
```

---

## 📋 第7章: チェックリスト

### ✅ 正常の証拠

- [ ] `done.` が表示される
- [ ] `100%` 完了表示
- [ ] `Already up to date.`
- [ ] `Fast-forward`
- [ ] `working tree clean`
- [ ] `up to date`
- [ ] 何も表示されない(特にgit add後)
- [ ] 緑色の文字が多い

### ❌ 異常の証拠

- [ ] `error:` が出る
- [ ] `fatal:` が出る
- [ ] `CONFLICT` が出る
- [ ] `rejected` が出る
- [ ] `failed` が出る
- [ ] `Aborting` が出る
- [ ] 赤色の `error:` が目立つ

### ⚠️ 要注意の証拠

- [ ] `warning:` が出る
- [ ] `detached HEAD`
- [ ] `(MERGING)` がプロンプトにある
- [ ] `hint:` が長文で出る
- [ ] `nothing to commit` (作業忘れ)

## 📋 第7章: チェックリスト(続き)

### ⚠️ 要注意の証拠(続き)

- [ ] `nothing to commit` (作業忘れ)
- [ ] `Your branch is behind` (pullが必要)
- [ ] `Your branch is ahead` (pushが必要)
- [ ] `Unmerged paths` (コンフリクト未解決)
- [ ] `both modified` (両方が変更=衝突)

---

## 🔬 第8章: 謎の表示を深掘り解説

### 【謎7】Your branch is ahead/behind

#### ケース1: ahead (先行している)

```bash
$ git status

On branch feature/my-work
Your branch is ahead of 'origin/feature/my-work' by 2 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
```

**判定:** ✅ **正常だがプッシュ忘れ**

**詳細解説:**
```
Your branch is ahead of 'origin/feature/my-work' by 2 commits
 ↑あなたのブランチはリモートより2コミット進んでいます

ahead = 先行している、進んでいる
by 2 commits = 2コミット分

(use "git push" to publish your local commits)
 ↑git push でローカルのコミットを公開してください
```

**視覚的イメージ:**
```
ローカル:    A --- B --- C --- D --- E
                              ↑あなたはここ

リモート:    A --- B --- C
                          ↑リモートはここで止まっている

差分: D, E の2コミット = ahead by 2
```

**次にやること:**
```bash
git push
```

---

#### ケース2: behind (遅れている)

```bash
$ git status

On branch main
Your branch is behind 'origin/main' by 3 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)

nothing to commit, working tree clean
```

**判定:** ✅ **正常だがプル忘れ**

**詳細解説:**
```
Your branch is behind 'origin/main' by 3 commits
 ↑あなたのブランチはリモートより3コミット遅れています

behind = 遅れている、後ろにいる
by 3 commits = 3コミット分

can be fast-forwarded
 ↑高速で同期できます(コンフリクトなし)

(use "git pull" to update your local branch)
 ↑git pull でローカルブランチを更新してください
```

**視覚的イメージ:**
```
ローカル:    A --- B --- C
                          ↑あなたはここで止まっている

リモート:    A --- B --- C --- D --- E --- F
                                          ↑リモートはここまで進んでいる

差分: D, E, F の3コミット = behind by 3
```

**次にやること:**
```bash
git pull origin main
```

---

#### ケース3: diverged (分岐している)

```bash
$ git status

On branch feature/my-work
Your branch and 'origin/feature/my-work' have diverged,
and have 2 and 3 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)
```

**判定:** ⚠️ **要注意(コンフリクトの可能性)**

**詳細解説:**
```
have diverged
 ↑分岐しています(お互いに違う方向に進んでいる)

have 2 and 3 different commits each, respectively
 ↑あなたは2コミット、リモートは3コミット、それぞれ独自に進んでいる

respectively = それぞれ
```

**視覚的イメージ:**
```
          D --- E  (あなたの2コミット)
         /
A --- B --- C
         \
          F --- G --- H  (リモートの3コミット)

= 分岐(diverged)
```

**次にやること:**
```bash
git pull origin feature/my-work
# コンフリクトが起きる可能性が高い
```

---

### 【謎8】nothing added to commit

```bash
$ git status

On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**判定:** ✅ **正常だが作業途中**

**詳細解説:**
```
Changes not staged for commit
 ↑ステージングされていない変更

not staged = ステージングされていない
for commit = コミット用の

(use "git add <file>..." to update...)
 ↑git add <file> で更新してください

(use "git restore <file>..." to discard...)
 ↑git restore <file> で変更を破棄できます

no changes added to commit
 ↑コミットに追加された変更がありません
 ↑= git add していない
```

**状態図:**
```
作業ディレクトリ    ステージング    リポジトリ
    (赤)              (緑)         (コミット済み)
     |                 |                |
  test.py ────✗────→  空っぽ  ────✗────→ まだない
  (変更済み)      git add忘れ!
```

**次にやること:**
```bash
git add test.py
# または
git add .
```

---

### 【謎9】プロンプトの (main|MERGING)

```bash
User@PC MINGW64 /c/projects/myproject (main|MERGING)
$
```

**判定:** ⚠️ **マージ中(特殊な状態)**

**詳細解説:**
```
(main|MERGING)
 ↑main = 現在のブランチ
 ↑| = パイプ(区切り)
 ↑MERGING = マージ中

この状態は:
- git merge を実行した
- コンフリクトが発生した、または
- マージは成功したがまだコミットしていない
```

**他のパターン:**
```bash
(main|REBASING)     # リベース中
(main|BISECTING)    # バイセクト中(バグ探し)
(main|CHERRY-PICKING)  # チェリーピック中
((no branch))       # ブランチにいない(detached HEAD)
```

**この状態から抜け出す方法:**

**パターン1: コンフリクト解決後**
```bash
# 1. コンフリクトを解決
$ code ファイル名.py

# 2. add
$ git add ファイル名.py

# 3. commit
$ git commit
# → プロンプトから |MERGING が消える
```

**パターン2: マージを中止**
```bash
$ git merge --abort
# → プロンプトから |MERGING が消える
```

---

### 【謎10】untracked files

```bash
$ git status

On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        new_file.py
        temp.txt

nothing added to commit but untracked files present (use "git add" to track)
```

**判定:** ✅ **正常(新しいファイルがある)**

**詳細解説:**
```
Untracked files
 ↑追跡されていないファイル
 ↑untracked = Gitが管理していないファイル

(use "git add <file>..." to include...)
 ↑git add <file> でコミットに含めてください

nothing added to commit but untracked files present
 ↑コミットに追加されたものはないが、未追跡ファイルがある

untracked files present = 未追跡ファイルが存在する
```

**ファイルの状態:**
```
untracked (赤) → git add → tracked (緑) → git commit → committed
未追跡              ↓           追跡中         ↓          コミット済み
                ステージング              リポジトリ
```

**次にやること:**

**追跡する場合:**
```bash
git add new_file.py
git commit -m "新しいファイルを追加"
```

**追跡しない場合(.gitignoreに追加):**
```bash
echo "temp.txt" >> .gitignore
git add .gitignore
git commit -m "gitignoreを更新"
```

---

### 【謎11】delta compression

```bash
$ git push

Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 8 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 1.23 KiB | 1.23 MiB/s, done.
Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
```

**判定:** ✅ **完全に正常!処理中の詳細表示**

**詳細解説:**
```
Delta compression using up to 8 threads
 ↑デルタ圧縮を8スレッド使って実行中

delta compression = 差分圧縮
using up to 8 threads = 最大8スレッド使用
(CPUコア数に応じて自動調整)

Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
 ↑合計7個のオブジェクト
 ↑うち3個は差分圧縮された
 ↑再利用は0個
 ↑パックから再利用は0個
```

**意味:**
- Gitは効率的にデータを送るために圧縮している
- 差分だけ送ることでデータ量を削減
- マルチスレッドで高速化

**これは正常?異常?**
- ✅ **完全に正常!** Gitの賢い動作
- 処理が進んでいる証拠
- 速度が表示されていればネットワークも正常

---

### 【謎12】pack-reused

```bash
$ git clone git@github.com:company/project.git

Cloning into 'project'...
remote: Enumerating objects: 1234, done.
remote: Total 1234 (delta 0), reused 0 (delta 0), pack-reused 1234
Receiving objects: 100% (1234/1234), 5.67 MiB | 2.34 MiB/s, done.
Resolving deltas: 100% (567/567), done.
```

**判定:** ✅ **正常!クローン成功**

**詳細解説:**
```
pack-reused 1234
 ↑パックから1234個のオブジェクトを再利用

pack = パックファイル(圧縮されたGitオブジェクトの塊)
reused = 再利用された

これは:
- サーバー側で既に圧縮済みのデータを使用
- 効率的なダウンロード
- 速度が速くなる
```

**数字の意味:**
```
Total 1234 (delta 0), reused 0 (delta 0), pack-reused 1234
       ↑全体     ↑差分  ↑キャッシュ再利用  ↑パック再利用

1234個全てがパックから = とても効率的!
```

---

### 【謎13】Resolving deltas

```bash
$ git pull

Receiving objects: 100% (50/50), done.
Resolving deltas: 100% (30/30), done.
```

**判定:** ✅ **正常!処理完了**

**詳細解説:**
```
Resolving deltas: 100% (30/30), done.
 ↑差分を解決しています: 100%(30個中30個)、完了

Resolving = 解決中、処理中
deltas = 差分データ

処理の流れ:
1. Receiving objects = オブジェクトを受信
2. Resolving deltas = 差分を元のデータに復元
3. done = 完了
```

**これは何をしている?**
```
サーバーから:  A の差分 → ローカルで: A の完全なデータに復元
              B の差分 →              B の完全なデータに復元
              C の差分 →              C の完全なデータに復元
```

**時間がかかる場合:**
- 差分データが多い = 大きなプロジェクト
- 処理中なので待つ
- 固まっているわけではない

---

## 🔍 第9章: エラーメッセージの深掘り

### 【エラー詳細1】pathspec did not match

```bash
$ git checkout feature/login

error: pathspec 'feature/login' did not match any file(s) known to git
```

**判定:** ❌ **エラー(ブランチが存在しない)**

**完全解説:**
```
error: pathspec 'feature/login' did not match...
 ↑エラー: パス指定 'feature/login' が一致しませんでした

pathspec = パス指定(ブランチ名やファイル名)
did not match = 一致しなかった
any file(s) known to git = Gitが知っているどのファイルとも

つまり:
- feature/login というブランチが存在しない
- タイプミスの可能性
- リモートにはあるがローカルにない可能性
```

**対処法:**

**1. ブランチ一覧を確認**
```bash
# ローカルのブランチ
$ git branch
  main
  feature/authentication  ← typo? login じゃなくて authentication?

# リモートも含めて
$ git branch -a
  main
  remotes/origin/main
  remotes/origin/feature/authentication
```

**2. リモートから取得**
```bash
# リモートにある場合
$ git fetch origin
$ git checkout feature/login
# または
$ git checkout -b feature/login origin/feature/login
```

**3. 新規作成する場合**
```bash
$ git checkout -b feature/login
```

---

### 【エラー詳細2】Not a git repository

```bash
$ git status

fatal: not a git repository (or any of the parent directories): .git
```

**判定:** ❌ **致命的エラー(Gitリポジトリじゃない)**

**完全解説:**
```
fatal: not a git repository
 ↑致命的: Gitリポジトリではありません

(or any of the parent directories): .git
 ↑(または親ディレクトリのどれにも): .git が無い

つまり:
- このフォルダはGit管理されていない
- .git フォルダが無い
- 間違ったフォルダにいる
```

**状態確認:**
```bash
$ pwd
/c/Users/YourName/Desktop  ← プロジェクトフォルダじゃない!

$ ls -la
# .git フォルダが無い
```

**対処法:**

**1. 正しいフォルダに移動**
```bash
$ cd /c/projects/myproject
$ git status
# これで動くはず
```

**2. 新規リポジトリとして初期化**
```bash
$ git init
Initialized empty Git repository in /c/projects/myproject/.git/
```

**3. クローンし直す**
```bash
$ cd /c/projects
$ git clone git@github.com:company/project.git
$ cd project
$ git status
```

---

### 【エラー詳細3】refusing to merge unrelated histories

```bash
$ git pull origin main

fatal: refusing to merge unrelated histories
```

**判定:** ❌ **エラー(関連性のない履歴)**

**完全解説:**
```
fatal: refusing to merge unrelated histories
 ↑致命的: 関連性のない履歴のマージを拒否します

refusing to merge = マージを拒否
unrelated histories = 関連性のない履歴

発生する状況:
- 別々に作られた2つのリポジトリをマージしようとした
- ローカルで git init してコミット
- その後、既存のリモートリポジトリをpullしようとした
```

**視覚的イメージ:**
```
ローカル:  A --- B --- C
           (独自の履歴)

リモート:  X --- Y --- Z
           (別の独自の履歴)

→ 共通の祖先が無い = unrelated
```

**対処法:**

**1. 強制的にマージを許可(推奨)**
```bash
$ git pull origin main --allow-unrelated-histories
```

**2. リポジトリを作り直す**
```bash
# 既存のフォルダをバックアップ
$ cd ..
$ mv myproject myproject_backup

# クローンし直す
$ git clone git@github.com:company/project.git
$ cd project

# 必要なファイルをバックアップから移動
```

---

### 【エラー詳細4】index.lock

```bash
$ git add .

fatal: Unable to create '/c/projects/myproject/.git/index.lock': File exists.

Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
```

**判定:** ❌ **エラー(ロックファイルが残っている)**

**完全解説:**
```
fatal: Unable to create '.git/index.lock': File exists
 ↑致命的: '.git/index.lock' を作成できません: ファイルが既に存在します

Another git process seems to be running
 ↑別のGitプロセスが実行中のようです

an editor opened by 'git commit'
 ↑例えば 'git commit' で開かれたエディタ

Please make sure all processes are terminated
 ↑全てのプロセスが終了していることを確認してください

remove the file manually to continue
 ↑手動でファイルを削除して続行してください
```

**原因:**
- 前回のGit操作が途中で中断された
- エディタを閉じずにターミナルを閉じた
- Gitが異常終了した

**対処法:**

**1. 他のGitプロセスを確認**
```bash
# Windowsの場合
$ tasklist | grep git

# プロセスがあれば終了させる
```

**2. ロックファイルを削除**
```bash
$ rm -f .git/index.lock

# 確認
$ ls -la .git/index.lock
ls: cannot access '.git/index.lock': No such file or directory
# ← ファイルが無ければ成功

# 再度実行
$ git add .
```

**3. それでもダメなら再起動**
```bash
# Git Bashを閉じて再起動
# または
# PCを再起動
```

---

## 🎨 第10章: 画面パターン別完全対応表

### パターン1: push後の画面

#### ✅ 成功パターン
```bash
Writing objects: 100% (3/3), done.
Total 3 (delta 1), reused 0 (delta 0)
To github.com:company/project.git
   abc1234..def5678  main -> main
```
**判定:** 正常

#### ❌ 失敗パターンA (rejected)
```bash
! [rejected]        main -> main (fetch first)
error: failed to push some refs
```
**判定:** 異常 → `git pull` してから再push

#### ❌ 失敗パターンB (permission denied)
```bash
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.
```
**判定:** 異常 → SSH鍵の確認・再登録

---

### パターン2: pull後の画面

#### ✅ 成功パターンA (最新)
```bash
From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```
**判定:** 正常(変更なし)

#### ✅ 成功パターンB (Fast-forward)
```bash
Updating abc1234..def5678
Fast-forward
 file.py | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)
```
**判定:** 正常(自動マージ成功)

#### ❌ 失敗パターンA (未コミット)
```bash
error: Your local changes to the following files would be overwritten by merge:
        file.py
Please commit your changes or stash them before you merge.
Aborting
```
**判定:** 異常 → コミットまたはstashしてから再pull

#### ⚠️ 失敗パターンB (コンフリクト)
```bash
Auto-merging file.py
CONFLICT (content): Merge conflict in file.py
Automatic merge failed; fix conflicts and then commit the result.
```
**判定:** 異常 → コンフリクト解決が必要

---

### パターン3: status後の画面

#### ✅ クリーンな状態
```bash
On branch main
nothing to commit, working tree clean
```
**判定:** 正常

#### ✅ 変更あり(未add)
```bash
Changes not staged for commit:
        modified:   file.py
```
**判定:** 正常(作業中) → `git add` が必要

#### ✅ 変更あり(add済み)
```bash
Changes to be committed:
        modified:   file.py
```
**判定:** 正常(ステージング済み) → `git commit` が必要

#### ⚠️ コンフリクト中
```bash
You have unmerged paths.
Unmerged paths:
        both modified:   file.py
```
**判定:** 異常 → コンフリクト解決が必要

---

### パターン4: commit後の画面

#### ✅ 成功
```bash
[main abc1234] コミットメッセージ
 1 file changed, 5 insertions(+)
```
**判定:** 正常

#### ❌ 失敗(何も無い)
```bash
On branch main
nothing to commit, working tree clean
```
**判定:** 異常 → `git add` 忘れ

#### ❌ 失敗(空メッセージ)
```bash
Aborting commit due to empty commit message.
```
**判定:** 異常 → メッセージを付けて再実行

---

## 📚 第11章: 完全チートシート

### 🟢 正常の証拠リスト

```bash
✅ done.
✅ 100% (完了表示)
✅ Already up to date.
✅ Fast-forward
✅ working tree clean
✅ up to date
✅ nothing to commit
✅ Changes to be committed (緑色)
✅ 何も表示されない(git add後)
✅ [ブランチ名 コミットID] メッセージ
✅ Total X (delta Y), reused Z
✅ Resolving deltas: 100%, done.
```

### 🔴 異常の証拠リスト

```bash
❌ error:
❌ fatal:
❌ CONFLICT
❌ rejected
❌ failed
❌ Aborting
❌ Permission denied
❌ Could not read
❌ Unable to create
❌ did not match
❌ refusing to merge
```

### 🟡 警告・注意の証拠リスト

```bash
⚠️ warning:
⚠️ hint:
⚠️ (MERGING)
⚠️ detached HEAD
⚠️ diverged
⚠️ behind
⚠️ ahead
⚠️ Unmerged paths
⚠️ both modified
⚠️ LF will be replaced by CRLF
```

---

## 🎯 第12章: よくある誤解

### 誤解1: 「何も表示されない = エラー?」

**❌ 誤解:**
```bash
$ git add file.py
$
# 何も出ない! エラー??
```

**✅ 正解:**
- Gitは**成功した時ほど何も言わない**
- 無言 = 正常に処理された
- エラーなら必ず `error:` か `fatal:` が出る

---

### 誤解2: 「warning = エラーだからダメ?」

**❌ 誤解:**
```bash
warning: LF will be replaced by CRLF
# warning が出た! 失敗した??
```

**✅ 正解:**
- `warning` = 警告(参考情報)
- `error` = エラー(処理失敗)
- warningは多くの場合、無視してOK
- 特にWindowsの改行コード警告は正常

---

### 誤解3: 「hint が出る = 失敗?」

**❌ 誤解:**
```bash
hint: Updates were rejected...
# hint がたくさん! エラー??
```

**✅ 正解:**
- `hint` = ヒント(助言)
- エラーの解決方法を教えてくれている
- hint自体はエラーではない
- 親切な情報

---

### 誤解4: 「赤い文字 = 全部エラー?」

**❌ 誤解:**
```bash
$ git status
        modified:   file.py  ← 赤い! エラー??
```

**✅ 正解:**
- 赤色 = まだaddしていない(作業中)
- エラーではない
- `git add` すれば緑色になる

---

### 誤解5: 「進捗表示 = 問題がある?」

**❌ 誤解:**
```bash
Resolving deltas: 50% (30/60)
# 処理中? 何か問題??
```

**✅ 正解:**
- 進捗表示 = 正常に処理中
- 最後に `done.` が出れば成功
- 途中経過を見せているだけ

---

## 🔍 第13章: デバッグ方法

### 問題: 何が起きているかわからない

```bash
# Step 1: 状態確認
$ git status

# Step 2: ログ確認
$ git log --oneline -5

# Step 3: リモートの状態確認
$ git remote -v
$ git branch -a

# Step 4: 差分確認
$ git diff
$ git diff --staged

# Step 5: 先輩に相談
# 上記の結果を全て見せる
```

---

### 問題: エラーの意味がわからない

```bash
# エラーメッセージをコピー

# Step 1: キーワードを探す
error:    ← これが本当の問題
fatal:    ← 致命的な問題
hint:     ← 解決方法の提案

# Step 2: ファイル名を確認
# エラーメッセージに出てくるファイル名

# Step 3: このガイドで検索
# Ctrl+F でエラーメッセージを検索

# Step 4: それでもダメなら
# エラーメッセージ全文を先輩に見せる
```

---

## 📊 第14章: 実践問題

### 【問題1】この画面は正常?異常?

```bash
$ git push

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Writing objects: 100% (3/3), 345 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:company/project.git
   abc1234..def5678  main -> main
```

<details>
<summary>答えを見る</summary>

**答え:** ✅ **正常!プッシュ成功**

**理由:**
- `done.` が出ている
- `100%` 完了
- `abc1234..def5678` = コミット更新
- `error:` や `fatal:` が無い

</details>

---

### 【問題2】この画面は正常?異常?

```bash
$ git pull origin main

error: Your local changes to the following files would be overwritten by merge:
        src/login.py
Please commit your changes or stash them before you merge.
Aborting
```

<details>
<summary>答えを見る</summary>

**答え:** ❌ **異常!未コミットの変更がある**

**理由:**
- `error:` が出ている
- `would be overwritten` = 上書きされる
- `Aborting` = 中止された

**対処:**
```bash
git add .
git commit -m "作業中の変更を保存"
git pull origin main
```

</details>

---

### 【問題3】この画面は正常?異常?

```bash
$ git status

On branch feature/my-work
Your branch is ahead of 'origin/feature/my-work' by 3 commits.

## 📋 第7章: チェックリスト(続き)

### ⚠️ 要注意の証拠(続き)

- [ ] `nothing to commit` (作業忘れ)
- [ ] `Your branch is behind` (pullが必要)
- [ ] `Your branch is ahead` (pushが必要)
- [ ] `Unmerged paths` (コンフリクト未解決)
- [ ] `both modified` (両方が変更=衝突)

---

## 🔬 第8章: 謎の表示を深掘り解説

### 【謎7】Your branch is ahead/behind

#### ケース1: ahead (先行している)

```bash
$ git status

On branch feature/my-work
Your branch is ahead of 'origin/feature/my-work' by 2 commits.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
```

**判定:** ✅ **正常だがプッシュ忘れ**

**詳細解説:**
```
Your branch is ahead of 'origin/feature/my-work' by 2 commits
 ↑あなたのブランチはリモートより2コミット進んでいます

ahead = 先行している、進んでいる
by 2 commits = 2コミット分

(use "git push" to publish your local commits)
 ↑git push でローカルのコミットを公開してください
```

**視覚的イメージ:**
```
ローカル:    A --- B --- C --- D --- E
                              ↑あなたはここ

リモート:    A --- B --- C
                          ↑リモートはここで止まっている

差分: D, E の2コミット = ahead by 2
```

**次にやること:**
```bash
git push
```

---

#### ケース2: behind (遅れている)

```bash
$ git status

On branch main
Your branch is behind 'origin/main' by 3 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)

nothing to commit, working tree clean
```

**判定:** ✅ **正常だがプル忘れ**

**詳細解説:**
```
Your branch is behind 'origin/main' by 3 commits
 ↑あなたのブランチはリモートより3コミット遅れています

behind = 遅れている、後ろにいる
by 3 commits = 3コミット分

can be fast-forwarded
 ↑高速で同期できます(コンフリクトなし)

(use "git pull" to update your local branch)
 ↑git pull でローカルブランチを更新してください
```

**視覚的イメージ:**
```
ローカル:    A --- B --- C
                          ↑あなたはここで止まっている

リモート:    A --- B --- C --- D --- E --- F
                                          ↑リモートはここまで進んでいる

差分: D, E, F の3コミット = behind by 3
```

**次にやること:**
```bash
git pull origin main
```

---

#### ケース3: diverged (分岐している)

```bash
$ git status

On branch feature/my-work
Your branch and 'origin/feature/my-work' have diverged,
and have 2 and 3 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)
```

**判定:** ⚠️ **要注意(コンフリクトの可能性)**

**詳細解説:**
```
have diverged
 ↑分岐しています(お互いに違う方向に進んでいる)

have 2 and 3 different commits each, respectively
 ↑あなたは2コミット、リモートは3コミット、それぞれ独自に進んでいる

respectively = それぞれ
```

**視覚的イメージ:**
```
          D --- E  (あなたの2コミット)
         /
A --- B --- C
         \
          F --- G --- H  (リモートの3コミット)

= 分岐(diverged)
```

**次にやること:**
```bash
git pull origin feature/my-work
# コンフリクトが起きる可能性が高い
```

---

### 【謎8】nothing added to commit

```bash
$ git status

On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   test.py

no changes added to commit (use "git add" and/or "git commit -a")
```

**判定:** ✅ **正常だが作業途中**

**詳細解説:**
```
Changes not staged for commit
 ↑ステージングされていない変更

not staged = ステージングされていない
for commit = コミット用の

(use "git add <file>..." to update...)
 ↑git add <file> で更新してください

(use "git restore <file>..." to discard...)
 ↑git restore <file> で変更を破棄できます

no changes added to commit
 ↑コミットに追加された変更がありません
 ↑= git add していない
```

**状態図:**
```
作業ディレクトリ    ステージング    リポジトリ
    (赤)              (緑)         (コミット済み)
     |                 |                |
  test.py ────✗────→  空っぽ  ────✗────→ まだない
  (変更済み)      git add忘れ!
```

**次にやること:**
```bash
git add test.py
# または
git add .
```

---

### 【謎9】プロンプトの (main|MERGING)

```bash
User@PC MINGW64 /c/projects/myproject (main|MERGING)
$
```

**判定:** ⚠️ **マージ中(特殊な状態)**

**詳細解説:**
```
(main|MERGING)
 ↑main = 現在のブランチ
 ↑| = パイプ(区切り)
 ↑MERGING = マージ中

この状態は:
- git merge を実行した
- コンフリクトが発生した、または
- マージは成功したがまだコミットしていない
```

**他のパターン:**
```bash
(main|REBASING)     # リベース中
(main|BISECTING)    # バイセクト中(バグ探し)
(main|CHERRY-PICKING)  # チェリーピック中
((no branch))       # ブランチにいない(detached HEAD)
```

**この状態から抜け出す方法:**

**パターン1: コンフリクト解決後**
```bash
# 1. コンフリクトを解決
$ code ファイル名.py

# 2. add
$ git add ファイル名.py

# 3. commit
$ git commit
# → プロンプトから |MERGING が消える
```

**パターン2: マージを中止**
```bash
$ git merge --abort
# → プロンプトから |MERGING が消える
```

---

### 【謎10】untracked files

```bash
$ git status

On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        new_file.py
        temp.txt

nothing added to commit but untracked files present (use "git add" to track)
```

**判定:** ✅ **正常(新しいファイルがある)**

**詳細解説:**
```
Untracked files
 ↑追跡されていないファイル
 ↑untracked = Gitが管理していないファイル

(use "git add <file>..." to include...)
 ↑git add <file> でコミットに含めてください

nothing added to commit but untracked files present
 ↑コミットに追加されたものはないが、未追跡ファイルがある

untracked files present = 未追跡ファイルが存在する
```

**ファイルの状態:**
```
untracked (赤) → git add → tracked (緑) → git commit → committed
未追跡              ↓           追跡中         ↓          コミット済み
                ステージング              リポジトリ
```

**次にやること:**

**追跡する場合:**
```bash
git add new_file.py
git commit -m "新しいファイルを追加"
```

**追跡しない場合(.gitignoreに追加):**
```bash
echo "temp.txt" >> .gitignore
git add .gitignore
git commit -m "gitignoreを更新"
```

---

### 【謎11】delta compression

```bash
$ git push

Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 8 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 1.23 KiB | 1.23 MiB/s, done.
Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
```

**判定:** ✅ **完全に正常!処理中の詳細表示**

**詳細解説:**
```
Delta compression using up to 8 threads
 ↑デルタ圧縮を8スレッド使って実行中

delta compression = 差分圧縮
using up to 8 threads = 最大8スレッド使用
(CPUコア数に応じて自動調整)

Total 7 (delta 3), reused 0 (delta 0), pack-reused 0
 ↑合計7個のオブジェクト
 ↑うち3個は差分圧縮された
 ↑再利用は0個
 ↑パックから再利用は0個
```

**意味:**
- Gitは効率的にデータを送るために圧縮している
- 差分だけ送ることでデータ量を削減
- マルチスレッドで高速化

**これは正常?異常?**
- ✅ **完全に正常!** Gitの賢い動作
- 処理が進んでいる証拠
- 速度が表示されていればネットワークも正常

---

### 【謎12】pack-reused

```bash
$ git clone git@github.com:company/project.git

Cloning into 'project'...
remote: Enumerating objects: 1234, done.
remote: Total 1234 (delta 0), reused 0 (delta 0), pack-reused 1234
Receiving objects: 100% (1234/1234), 5.67 MiB | 2.34 MiB/s, done.
Resolving deltas: 100% (567/567), done.
```

**判定:** ✅ **正常!クローン成功**

**詳細解説:**
```
pack-reused 1234
 ↑パックから1234個のオブジェクトを再利用

pack = パックファイル(圧縮されたGitオブジェクトの塊)
reused = 再利用された

これは:
- サーバー側で既に圧縮済みのデータを使用
- 効率的なダウンロード
- 速度が速くなる
```

**数字の意味:**
```
Total 1234 (delta 0), reused 0 (delta 0), pack-reused 1234
       ↑全体     ↑差分  ↑キャッシュ再利用  ↑パック再利用

1234個全てがパックから = とても効率的!
```

---

### 【謎13】Resolving deltas

```bash
$ git pull

Receiving objects: 100% (50/50), done.
Resolving deltas: 100% (30/30), done.
```

**判定:** ✅ **正常!処理完了**

**詳細解説:**
```
Resolving deltas: 100% (30/30), done.
 ↑差分を解決しています: 100%(30個中30個)、完了

Resolving = 解決中、処理中
deltas = 差分データ

処理の流れ:
1. Receiving objects = オブジェクトを受信
2. Resolving deltas = 差分を元のデータに復元
3. done = 完了
```

**これは何をしている?**
```
サーバーから:  A の差分 → ローカルで: A の完全なデータに復元
              B の差分 →              B の完全なデータに復元
              C の差分 →              C の完全なデータに復元
```

**時間がかかる場合:**
- 差分データが多い = 大きなプロジェクト
- 処理中なので待つ
- 固まっているわけではない

---

## 🔍 第9章: エラーメッセージの深掘り

### 【エラー詳細1】pathspec did not match

```bash
$ git checkout feature/login

error: pathspec 'feature/login' did not match any file(s) known to git
```

**判定:** ❌ **エラー(ブランチが存在しない)**

**完全解説:**
```
error: pathspec 'feature/login' did not match...
 ↑エラー: パス指定 'feature/login' が一致しませんでした

pathspec = パス指定(ブランチ名やファイル名)
did not match = 一致しなかった
any file(s) known to git = Gitが知っているどのファイルとも

つまり:
- feature/login というブランチが存在しない
- タイプミスの可能性
- リモートにはあるがローカルにない可能性
```

**対処法:**

**1. ブランチ一覧を確認**
```bash
# ローカルのブランチ
$ git branch
  main
  feature/authentication  ← typo? login じゃなくて authentication?

# リモートも含めて
$ git branch -a
  main
  remotes/origin/main
  remotes/origin/feature/authentication
```

**2. リモートから取得**
```bash
# リモートにある場合
$ git fetch origin
$ git checkout feature/login
# または
$ git checkout -b feature/login origin/feature/login
```

**3. 新規作成する場合**
```bash
$ git checkout -b feature/login
```

---

### 【エラー詳細2】Not a git repository

```bash
$ git status

fatal: not a git repository (or any of the parent directories): .git
```

**判定:** ❌ **致命的エラー(Gitリポジトリじゃない)**

**完全解説:**
```
fatal: not a git repository
 ↑致命的: Gitリポジトリではありません

(or any of the parent directories): .git
 ↑(または親ディレクトリのどれにも): .git が無い

つまり:
- このフォルダはGit管理されていない
- .git フォルダが無い
- 間違ったフォルダにいる
```

**状態確認:**
```bash
$ pwd
/c/Users/YourName/Desktop  ← プロジェクトフォルダじゃない!

$ ls -la
# .git フォルダが無い
```

**対処法:**

**1. 正しいフォルダに移動**
```bash
$ cd /c/projects/myproject
$ git status
# これで動くはず
```

**2. 新規リポジトリとして初期化**
```bash
$ git init
Initialized empty Git repository in /c/projects/myproject/.git/
```

**3. クローンし直す**
```bash
$ cd /c/projects
$ git clone git@github.com:company/project.git
$ cd project
$ git status
```

---

### 【エラー詳細3】refusing to merge unrelated histories

```bash
$ git pull origin main

fatal: refusing to merge unrelated histories
```

**判定:** ❌ **エラー(関連性のない履歴)**

**完全解説:**
```
fatal: refusing to merge unrelated histories
 ↑致命的: 関連性のない履歴のマージを拒否します

refusing to merge = マージを拒否
unrelated histories = 関連性のない履歴

発生する状況:
- 別々に作られた2つのリポジトリをマージしようとした
- ローカルで git init してコミット
- その後、既存のリモートリポジトリをpullしようとした
```

**視覚的イメージ:**
```
ローカル:  A --- B --- C
           (独自の履歴)

リモート:  X --- Y --- Z
           (別の独自の履歴)

→ 共通の祖先が無い = unrelated
```

**対処法:**

**1. 強制的にマージを許可(推奨)**
```bash
$ git pull origin main --allow-unrelated-histories
```

**2. リポジトリを作り直す**
```bash
# 既存のフォルダをバックアップ
$ cd ..
$ mv myproject myproject_backup

# クローンし直す
$ git clone git@github.com:company/project.git
$ cd project

# 必要なファイルをバックアップから移動
```

---

### 【エラー詳細4】index.lock

```bash
$ git add .

fatal: Unable to create '/c/projects/myproject/.git/index.lock': File exists.

Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
```

**判定:** ❌ **エラー(ロックファイルが残っている)**

**完全解説:**
```
fatal: Unable to create '.git/index.lock': File exists
 ↑致命的: '.git/index.lock' を作成できません: ファイルが既に存在します

Another git process seems to be running
 ↑別のGitプロセスが実行中のようです

an editor opened by 'git commit'
 ↑例えば 'git commit' で開かれたエディタ

Please make sure all processes are terminated
 ↑全てのプロセスが終了していることを確認してください

remove the file manually to continue
 ↑手動でファイルを削除して続行してください
```

**原因:**
- 前回のGit操作が途中で中断された
- エディタを閉じずにターミナルを閉じた
- Gitが異常終了した

**対処法:**

**1. 他のGitプロセスを確認**
```bash
# Windowsの場合
$ tasklist | grep git

# プロセスがあれば終了させる
```

**2. ロックファイルを削除**
```bash
$ rm -f .git/index.lock

# 確認
$ ls -la .git/index.lock
ls: cannot access '.git/index.lock': No such file or directory
# ← ファイルが無ければ成功

# 再度実行
$ git add .
```

**3. それでもダメなら再起動**
```bash
# Git Bashを閉じて再起動
# または
# PCを再起動
```

---

## 🎨 第10章: 画面パターン別完全対応表

### パターン1: push後の画面

#### ✅ 成功パターン
```bash
Writing objects: 100% (3/3), done.
Total 3 (delta 1), reused 0 (delta 0)
To github.com:company/project.git
   abc1234..def5678  main -> main
```
**判定:** 正常

#### ❌ 失敗パターンA (rejected)
```bash
! [rejected]        main -> main (fetch first)
error: failed to push some refs
```
**判定:** 異常 → `git pull` してから再push

#### ❌ 失敗パターンB (permission denied)
```bash
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.
```
**判定:** 異常 → SSH鍵の確認・再登録

---

### パターン2: pull後の画面

#### ✅ 成功パターンA (最新)
```bash
From github.com:company/project
 * branch            main       -> FETCH_HEAD
Already up to date.
```
**判定:** 正常(変更なし)

#### ✅ 成功パターンB (Fast-forward)
```bash
Updating abc1234..def5678
Fast-forward
 file.py | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)
```
**判定:** 正常(自動マージ成功)

#### ❌ 失敗パターンA (未コミット)
```bash
error: Your local changes to the following files would be overwritten by merge:
        file.py
Please commit your changes or stash them before you merge.
Aborting
```
**判定:** 異常 → コミットまたはstashしてから再pull

#### ⚠️ 失敗パターンB (コンフリクト)
```bash
Auto-merging file.py
CONFLICT (content): Merge conflict in file.py
Automatic merge failed; fix conflicts and then commit the result.
```
**判定:** 異常 → コンフリクト解決が必要

---

### パターン3: status後の画面

#### ✅ クリーンな状態
```bash
On branch main
nothing to commit, working tree clean
```
**判定:** 正常

#### ✅ 変更あり(未add)
```bash
Changes not staged for commit:
        modified:   file.py
```
**判定:** 正常(作業中) → `git add` が必要

#### ✅ 変更あり(add済み)
```bash
Changes to be committed:
        modified:   file.py
```
**判定:** 正常(ステージング済み) → `git commit` が必要

#### ⚠️ コンフリクト中
```bash
You have unmerged paths.
Unmerged paths:
        both modified:   file.py
```
**判定:** 異常 → コンフリクト解決が必要

---

### パターン4: commit後の画面

#### ✅ 成功
```bash
[main abc1234] コミットメッセージ
 1 file changed, 5 insertions(+)
```
**判定:** 正常

#### ❌ 失敗(何も無い)
```bash
On branch main
nothing to commit, working tree clean
```
**判定:** 異常 → `git add` 忘れ

#### ❌ 失敗(空メッセージ)
```bash
Aborting commit due to empty commit message.
```
**判定:** 異常 → メッセージを付けて再実行

---

## 📚 第11章: 完全チートシート

### 🟢 正常の証拠リスト

```bash
✅ done.
✅ 100% (完了表示)
✅ Already up to date.
✅ Fast-forward
✅ working tree clean
✅ up to date
✅ nothing to commit
✅ Changes to be committed (緑色)
✅ 何も表示されない(git add後)
✅ [ブランチ名 コミットID] メッセージ
✅ Total X (delta Y), reused Z
✅ Resolving deltas: 100%, done.
```

### 🔴 異常の証拠リスト

```bash
❌ error:
❌ fatal:
❌ CONFLICT
❌ rejected
❌ failed
❌ Aborting
❌ Permission denied
❌ Could not read
❌ Unable to create
❌ did not match
❌ refusing to merge
```

### 🟡 警告・注意の証拠リスト

```bash
⚠️ warning:
⚠️ hint:
⚠️ (MERGING)
⚠️ detached HEAD
⚠️ diverged
⚠️ behind
⚠️ ahead
⚠️ Unmerged paths
⚠️ both modified
⚠️ LF will be replaced by CRLF
```

---

## 🎯 第12章: よくある誤解

### 誤解1: 「何も表示されない = エラー?」

**❌ 誤解:**
```bash
$ git add file.py
$
# 何も出ない! エラー??
```

**✅ 正解:**
- Gitは**成功した時ほど何も言わない**
- 無言 = 正常に処理された
- エラーなら必ず `error:` か `fatal:` が出る

---

### 誤解2: 「warning = エラーだからダメ?」

**❌ 誤解:**
```bash
warning: LF will be replaced by CRLF
# warning が出た! 失敗した??
```

**✅ 正解:**
- `warning` = 警告(参考情報)
- `error` = エラー(処理失敗)
- warningは多くの場合、無視してOK
- 特にWindowsの改行コード警告は正常

---

### 誤解3: 「hint が出る = 失敗?」

**❌ 誤解:**
```bash
hint: Updates were rejected...
# hint がたくさん! エラー??
```

**✅ 正解:**
- `hint` = ヒント(助言)
- エラーの解決方法を教えてくれている
- hint自体はエラーではない
- 親切な情報

---

### 誤解4: 「赤い文字 = 全部エラー?」

**❌ 誤解:**
```bash
$ git status
        modified:   file.py  ← 赤い! エラー??
```

**✅ 正解:**
- 赤色 = まだaddしていない(作業中)
- エラーではない
- `git add` すれば緑色になる

---

### 誤解5: 「進捗表示 = 問題がある?」

**❌ 誤解:**
```bash
Resolving deltas: 50% (30/60)
# 処理中? 何か問題??
```

**✅ 正解:**
- 進捗表示 = 正常に処理中
- 最後に `done.` が出れば成功
- 途中経過を見せているだけ

---

## 🔍 第13章: デバッグ方法

### 問題: 何が起きているかわからない

```bash
# Step 1: 状態確認
$ git status

# Step 2: ログ確認
$ git log --oneline -5

# Step 3: リモートの状態確認
$ git remote -v
$ git branch -a

# Step 4: 差分確認
$ git diff
$ git diff --staged

# Step 5: 先輩に相談
# 上記の結果を全て見せる
```

---

### 問題: エラーの意味がわからない

```bash
# エラーメッセージをコピー

# Step 1: キーワードを探す
error:    ← これが本当の問題
fatal:    ← 致命的な問題
hint:     ← 解決方法の提案

# Step 2: ファイル名を確認
# エラーメッセージに出てくるファイル名

# Step 3: このガイドで検索
# Ctrl+F でエラーメッセージを検索

# Step 4: それでもダメなら
# エラーメッセージ全文を先輩に見せる
```

---

## 📊 第14章: 実践問題

### 【問題1】この画面は正常?異常?

```bash
$ git push

Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Writing objects: 100% (3/3), 345 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:company/project.git
   abc1234..def5678  main -> main
```

<details>
<summary>答えを見る</summary>

**答え:** ✅ **正常!プッシュ成功**

**理由:**
- `done.` が出ている
- `100%` 完了
- `abc1234..def5678` = コミット更新
- `error:` や `fatal:` が無い

</details>

---

### 【問題2】この画面は正常?異常?

```bash
$ git pull origin main

error: Your local changes to the following files would be overwritten by merge:
        src/login.py
Please commit your changes or stash them before you merge.
Aborting
```

<details>
<summary>答えを見る</summary>

**答え:** ❌ **異常!未コミットの変更がある**

**理由:**
- `error:` が出ている
- `would be overwritten` = 上書きされる
- `Aborting` = 中止された

**対処:**
```bash
git add .
git commit -m "作業中の変更を保存"
git pull origin main
```

</details>

---

### 【問題3】この画面は正常?異常?

```bash
$ git status

On branch feature/my-work
Your branch is ahead of 'origin/feature/my-work' by 3 commits.




何か具体的に困っていることや、もっと詳しく知りたいことはありますか?
